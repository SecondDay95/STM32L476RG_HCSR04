
12_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08008010  08008010  00009010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d8  080083d8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083d8  080083d8  000093d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e0  080083e0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083e4  080083e4  000093e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  080085bc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080085bc  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b88  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002623  00000000  00000000  0001ad8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5d  00000000  00000000  0001e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280e2  00000000  00000000  0001f00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b0b  00000000  00000000  000470ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f43d0  00000000  00000000  0005abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014efca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005190  00000000  00000000  0014f010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001541a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ff8 	.word	0x08007ff8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007ff8 	.word	0x08007ff8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b22      	ldr	r3, [pc, #136]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_GPIO_Init+0xb8>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <MX_GPIO_Init+0xbc>)
 8000efc:	f000 ff7e 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_1_Pin
 8000f00:	2200      	movs	r2, #0
 8000f02:	f64f 0106 	movw	r1, #63494	@ 0xf806
 8000f06:	4814      	ldr	r0, [pc, #80]	@ (8000f58 <MX_GPIO_Init+0xc0>)
 8000f08:	f000 ff78 	bl	8001dfc <HAL_GPIO_WritePin>
                          |SEG_A_Pin|SEG_F_Pin|SEG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_G_Pin;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_G_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_GPIO_Init+0xbc>)
 8000f24:	f000 fdc0 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_1_Pin
 8000f28:	f64f 0306 	movw	r3, #63494	@ 0xf806
 8000f2c:	60fb      	str	r3, [r7, #12]
                          |SEG_A_Pin|SEG_F_Pin|SEG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_GPIO_Init+0xc0>)
 8000f42:	f000 fdb1 	bl	8001aa8 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48000800 	.word	0x48000800
 8000f58:	48000400 	.word	0x48000400

08000f5c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d102      	bne.n	8000f70 <__io_putchar+0x14>
    __io_putchar('\r');
 8000f6a:	200d      	movs	r0, #13
 8000f6c:	f7ff fff6 	bl	8000f5c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f70:	1d39      	adds	r1, r7, #4
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	2201      	movs	r2, #1
 8000f78:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <__io_putchar+0x2c>)
 8000f7a:	f003 fe63 	bl	8004c44 <HAL_UART_Transmit>

  return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000240 	.word	0x20000240

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f000 fc0a 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f82b 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f7ff ff7d 	bl	8000e98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f9e:	f000 fa2f 	bl	8001400 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fa2:	f000 fb4d 	bl	8001640 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie pomiaru dlugosci impulsu zbocza narastajacego na kanale 1 licznika TIM2
  //(czasu od impulsu wyzwalajacego pomiar do rozpoczecia pomiaru):
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <main+0x60>)
 8000faa:	f002 fc9f 	bl	80038ec <HAL_TIM_IC_Start>
  //Uruchomienie pomiaru dlugosci impulsu zbocza opadajacego na kanale 2 licznika TIM2:
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	480e      	ldr	r0, [pc, #56]	@ (8000fec <main+0x60>)
 8000fb2:	f002 fc9b 	bl	80038ec <HAL_TIM_IC_Start>
  //Uruchomienie sygnalu PWM na kanale 3 licznika TIM2:
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <main+0x60>)
 8000fba:	f002 fb2f 	bl	800361c <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc2:	f000 fc67 	bl	8001894 <HAL_Delay>
	  printf("value = %.1f cm\n", (stop - start) / 58.0);
	  HAL_Delay(1000);
	  */

	  //Wyświetlanie liczb na wyswietlaczu 7-segmentowym:
	  for(int i = 0; i < 10; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	e00a      	b.n	8000fe2 <main+0x56>

		  seg7_show_digit(i);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8c6 	bl	8001160 <seg7_show_digit>
		  HAL_Delay(500);
 8000fd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fd8:	f000 fc5c 	bl	8001894 <HAL_Delay>
	  for(int i = 0; i < 10; i++) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	ddf1      	ble.n	8000fcc <main+0x40>
 8000fe8:	e7ed      	b.n	8000fc6 <main+0x3a>
 8000fea:	bf00      	nop
 8000fec:	200001f4 	.word	0x200001f4

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	@ 0x58
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2244      	movs	r2, #68	@ 0x44
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 f8d9 	bl	80061b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001012:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001016:	f000 ff27 	bl	8001e68 <HAL_PWREx_ControlVoltageScaling>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001020:	f000 f848 	bl	80010b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001024:	f000 ff02 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <SystemClock_Config+0xc0>)
 800102a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800102e:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <SystemClock_Config+0xc0>)
 8001030:	f023 0318 	bic.w	r3, r3, #24
 8001034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001038:	2314      	movs	r3, #20
 800103a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001048:	2360      	movs	r3, #96	@ 0x60
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001050:	2301      	movs	r3, #1
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001058:	2328      	movs	r3, #40	@ 0x28
 800105a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800105c:	2307      	movs	r3, #7
 800105e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4618      	mov	r0, r3
 800106e:	f000 ff51 	bl	8001f14 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001078:	f000 f81c 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2303      	movs	r3, #3
 8001082:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fb19 	bl	80026cc <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010a0:	f000 f808 	bl	80010b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010a4:	f002 f820 	bl	80030e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010a8:	bf00      	nop
 80010aa:	3758      	adds	r7, #88	@ 0x58
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <set_output>:
#include <stdbool.h>
#include "seg7.h"
#include "gpio.h"

static void set_output(uint8_t mask)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d8:	481f      	ldr	r0, [pc, #124]	@ (8001158 <set_output+0x98>)
 80010da:	f000 fe8f 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ec:	481a      	ldr	r0, [pc, #104]	@ (8001158 <set_output+0x98>)
 80010ee:	f000 fe85 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	2102      	movs	r1, #2
 80010fe:	4816      	ldr	r0, [pc, #88]	@ (8001158 <set_output+0x98>)
 8001100:	f000 fe7c 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001112:	4811      	ldr	r0, [pc, #68]	@ (8001158 <set_output+0x98>)
 8001114:	f000 fe72 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	2104      	movs	r1, #4
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <set_output+0x98>)
 8001126:	f000 fe69 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001138:	4807      	ldr	r0, [pc, #28]	@ (8001158 <set_output+0x98>)
 800113a:	f000 fe5f 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	2110      	movs	r1, #16
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <set_output+0x9c>)
 800114c:	f000 fe56 	bl	8001dfc <HAL_GPIO_WritePin>

}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800

08001160 <seg7_show_digit>:

void seg7_show_digit(uint32_t value) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

	const uint8_t digit[] = {
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <seg7_show_digit+0x40>)
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001170:	c303      	stmia	r3!, {r0, r1}
 8001172:	801a      	strh	r2, [r3, #0]
			0b0000111,
			0b1111111,
			0b1101111,
	};

	set_output(digit[value % 10]);
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <seg7_show_digit+0x44>)
 8001178:	fba3 2301 	umull	r2, r3, r3, r1
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	f102 0318 	add.w	r3, r2, #24
 800118c:	443b      	add	r3, r7
 800118e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff94 	bl	80010c0 <set_output>

}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	08008010 	.word	0x08008010
 80011a4:	cccccccd 	.word	0xcccccccd

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <HAL_MspInit+0x44>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	4a0e      	ldr	r2, [pc, #56]	@ (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <HAL_MspInit+0x44>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001246:	f000 fb05 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}

0800124e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_kill>:

int _kill(int pid, int sig)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001268:	f004 fff8 	bl	800625c <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	2216      	movs	r2, #22
 8001270:	601a      	str	r2, [r3, #0]
  return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_exit>:

void _exit (int status)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001286:	f04f 31ff 	mov.w	r1, #4294967295
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffe7 	bl	800125e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <_exit+0x12>

08001294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00a      	b.n	80012bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a6:	f3af 8000 	nop.w
 80012aa:	4601      	mov	r1, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf0      	blt.n	80012a6 <_read+0x12>
  }

  return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e009      	b.n	80012f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe37 	bl	8000f5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf1      	blt.n	80012e0 <_write+0x12>
  }
  return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_close>:

int _close(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800132e:	605a      	str	r2, [r3, #4]
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_isatty>:

int _isatty(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	@ (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f004 ff5c 	bl	800625c <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20018000 	.word	0x20018000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	200001f0 	.word	0x200001f0
 80013d8:	20000418 	.word	0x20000418

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b092      	sub	sp, #72	@ 0x48
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001440:	4b42      	ldr	r3, [pc, #264]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001442:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001448:	4b40      	ldr	r3, [pc, #256]	@ (800154c <MX_TIM2_Init+0x14c>)
 800144a:	224f      	movs	r2, #79	@ 0x4f
 800144c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8001454:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001456:	4a3e      	ldr	r2, [pc, #248]	@ (8001550 <MX_TIM2_Init+0x150>)
 8001458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b3c      	ldr	r3, [pc, #240]	@ (800154c <MX_TIM2_Init+0x14c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001466:	4839      	ldr	r0, [pc, #228]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001468:	f002 f820 	bl	80034ac <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001472:	f7ff fe1f 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001480:	4619      	mov	r1, r3
 8001482:	4832      	ldr	r0, [pc, #200]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001484:	f002 fcde 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800148e:	f7ff fe11 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001492:	482e      	ldr	r0, [pc, #184]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001494:	f002 f9c8 	bl	8003828 <HAL_TIM_IC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800149e:	f7ff fe09 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a2:	482a      	ldr	r0, [pc, #168]	@ (800154c <MX_TIM2_Init+0x14c>)
 80014a4:	f002 f859 	bl	800355a <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014ae:	f7ff fe01 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014be:	4619      	mov	r1, r3
 80014c0:	4822      	ldr	r0, [pc, #136]	@ (800154c <MX_TIM2_Init+0x14c>)
 80014c2:	f003 fae9 	bl	8004a98 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80014cc:	f7ff fdf2 	bl	80010b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014d4:	2301      	movs	r3, #1
 80014d6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICFilter = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_TIM2_Init+0x14c>)
 80014ea:	f002 fafb 	bl	8003ae4 <HAL_TIM_IC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80014f4:	f7ff fdde 	bl	80010b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4810      	ldr	r0, [pc, #64]	@ (800154c <MX_TIM2_Init+0x14c>)
 800150a:	f002 faeb 	bl	8003ae4 <HAL_TIM_IC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001514:	f7ff fdce 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001518:	2360      	movs	r3, #96	@ 0x60
 800151a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800151c:	230a      	movs	r3, #10
 800151e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	2208      	movs	r2, #8
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001530:	f002 fb74 	bl	8003c1c <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 800153a:	f7ff fdbb 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800153e:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM2_Init+0x14c>)
 8001540:	f000 f848 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3748      	adds	r7, #72	@ 0x48
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200001f4 	.word	0x200001f4
 8001550:	000f423f 	.word	0x000f423f

08001554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001574:	d128      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6593      	str	r3, [r2, #88]	@ 0x58
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b6:	2301      	movs	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c4:	f000 fa70 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	@ 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f4:	d11c      	bne.n	8001630 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_TIM_MspPostInit+0x64>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001638 <HAL_TIM_MspPostInit+0x64>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_TIM_MspPostInit+0x64>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800160e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001612:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001620:	2301      	movs	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	4804      	ldr	r0, [pc, #16]	@ (800163c <HAL_TIM_MspPostInit+0x68>)
 800162c:	f000 fa3c 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400

08001640 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001646:	4a15      	ldr	r2, [pc, #84]	@ (800169c <MX_USART2_UART_Init+0x5c>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_USART2_UART_Init+0x58>)
 8001684:	f003 fa90 	bl	8004ba8 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800168e:	f7ff fd11 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000240 	.word	0x20000240
 800169c:	40004400 	.word	0x40004400

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0ac      	sub	sp, #176	@ 0xb0
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2288      	movs	r2, #136	@ 0x88
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fd78 	bl	80061b6 <memset>
  if(uartHandle->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <HAL_UART_MspInit+0xb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13b      	bne.n	8001748 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fa19 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e8:	f7ff fce4 	bl	80010b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800171c:	230c      	movs	r3, #12
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001734:	2307      	movs	r3, #7
 8001736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001744:	f000 f9b0 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001748:	bf00      	nop
 800174a:	37b0      	adds	r7, #176	@ 0xb0
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40004400 	.word	0x40004400
 8001754:	40021000 	.word	0x40021000

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff fe3e 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	@ (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	@ (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f004 fd6f 	bl	8006268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fbff 	bl	8000f8c <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800179c:	080083e8 	.word	0x080083e8
  ldr r2, =_sbss
 80017a0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017a4:	20000418 	.word	0x20000418

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f943 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ba:	200f      	movs	r0, #15
 80017bc:	f000 f80e 	bl	80017dc <HAL_InitTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	e001      	b.n	80017d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017cc:	f7ff fcec 	bl	80011a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_InitTick+0x6c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d023      	beq.n	8001838 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_InitTick+0x70>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <HAL_InitTick+0x6c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f941 	bl	8001a8e <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d809      	bhi.n	800182c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 f919 	bl	8001a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_InitTick+0x74>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e007      	b.n	800183c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e004      	b.n	800183c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e001      	b.n	800183c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	200002c8 	.word	0x200002c8

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200002c8 	.word	0x200002c8

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	@ (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	@ (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff47 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff5c 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff8e 	bl	8001994 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5d 	bl	8001940 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb0 	bl	80019fc <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e17f      	b.n	8001db8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8171 	beq.w	8001db2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d005      	beq.n	8001ae8 <HAL_GPIO_Init+0x40>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d130      	bne.n	8001b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1e:	2201      	movs	r2, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0201 	and.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d118      	bne.n	8001b88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	6939      	ldr	r1, [r7, #16]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ac 	beq.w	8001db2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c66:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd8 <HAL_GPIO_Init+0x330>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c72:	4a5a      	ldr	r2, [pc, #360]	@ (8001ddc <HAL_GPIO_Init+0x334>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x242>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8001de0 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x23e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8001de4 <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x23a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001de8 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x236>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001dec <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x232>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001df0 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x22e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001df4 <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x22a>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e00c      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	e00a      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	e008      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e004      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x244>
 8001cea:	2300      	movs	r3, #0
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cfc:	4937      	ldr	r1, [pc, #220]	@ (8001ddc <HAL_GPIO_Init+0x334>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d2e:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d34:	4b30      	ldr	r3, [pc, #192]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d58:	4a27      	ldr	r2, [pc, #156]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d82:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dac:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <HAL_GPIO_Init+0x350>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f47f ae78 	bne.w	8001ab8 <HAL_GPIO_Init+0x10>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	48000800 	.word	0x48000800
 8001de8:	48000c00 	.word	0x48000c00
 8001dec:	48001000 	.word	0x48001000
 8001df0:	48001400 	.word	0x48001400
 8001df4:	48001800 	.word	0x48001800
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40007000 	.word	0x40007000

08001e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e76:	d130      	bne.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e84:	d038      	beq.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e86:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2232      	movs	r2, #50	@ 0x32
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eac:	e002      	b.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec0:	d102      	bne.n	8001ec8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f2      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed4:	d110      	bne.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e00f      	b.n	8001efa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d007      	beq.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef0:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	431bde83 	.word	0x431bde83

08001f14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e3ca      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b97      	ldr	r3, [pc, #604]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b94      	ldr	r3, [pc, #592]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80e4 	beq.w	8002110 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4a>
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	f040 808b 	bne.w	800206c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f040 8087 	bne.w	800206c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f5e:	4b89      	ldr	r3, [pc, #548]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x62>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e3a2      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	4b82      	ldr	r3, [pc, #520]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_RCC_OscConfig+0x7c>
 8001f86:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f8e:	e005      	b.n	8001f9c <HAL_RCC_OscConfig+0x88>
 8001f90:	4b7c      	ldr	r3, [pc, #496]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d223      	bcs.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fd55 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e383      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb4:	4b73      	ldr	r3, [pc, #460]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a72      	ldr	r2, [pc, #456]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b70      	ldr	r3, [pc, #448]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	496d      	ldr	r1, [pc, #436]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	4968      	ldr	r1, [pc, #416]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
 8001fe6:	e025      	b.n	8002034 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe8:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a65      	ldr	r2, [pc, #404]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f043 0308 	orr.w	r3, r3, #8
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4960      	ldr	r1, [pc, #384]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002006:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	495b      	ldr	r1, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fd15 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e343      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002034:	f000 fc4a 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b52      	ldr	r3, [pc, #328]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	4950      	ldr	r1, [pc, #320]	@ (8002188 <HAL_RCC_OscConfig+0x274>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a4e      	ldr	r2, [pc, #312]	@ (800218c <HAL_RCC_OscConfig+0x278>)
 8002052:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002054:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <HAL_RCC_OscConfig+0x27c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fbbf 	bl	80017dc <HAL_InitTick>
 800205e:	4603      	mov	r3, r0
 8002060:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d052      	beq.n	800210e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	e327      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002074:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a42      	ldr	r2, [pc, #264]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002080:	f7ff fbfc 	bl	800187c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002088:	f7ff fbf8 	bl	800187c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e310      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209a:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a6:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a36      	ldr	r2, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4931      	ldr	r1, [pc, #196]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	492c      	ldr	r1, [pc, #176]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	e01a      	b.n	8002110 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a29      	ldr	r2, [pc, #164]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fbc9 	bl	800187c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ee:	f7ff fbc5 	bl	800187c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e2dd      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002100:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x1da>
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d074      	beq.n	8002206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b08      	cmp	r3, #8
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x21a>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d10e      	bne.n	8002146 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d10b      	bne.n	8002146 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d064      	beq.n	8002204 <HAL_RCC_OscConfig+0x2f0>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d160      	bne.n	8002204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e2ba      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x24a>
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0b      	ldr	r2, [pc, #44]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e026      	b.n	80021ac <HAL_RCC_OscConfig+0x298>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002166:	d115      	bne.n	8002194 <HAL_RCC_OscConfig+0x280>
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800216e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a02      	ldr	r2, [pc, #8]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 800217a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x298>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	0800801c 	.word	0x0800801c
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004
 8002194:	4ba0      	ldr	r3, [pc, #640]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a9f      	ldr	r2, [pc, #636]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb62 	bl	800187c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb5e 	bl	800187c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e276      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b92      	ldr	r3, [pc, #584]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x2a8>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff fb4e 	bl	800187c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fb4a 	bl	800187c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e262      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2d0>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d060      	beq.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x310>
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d119      	bne.n	8002252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d116      	bne.n	8002252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002224:	4b7c      	ldr	r3, [pc, #496]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_OscConfig+0x328>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e23f      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	4973      	ldr	r1, [pc, #460]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002250:	e040      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d023      	beq.n	80022a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6e      	ldr	r2, [pc, #440]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff fb09 	bl	800187c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff fb05 	bl	800187c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e21d      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b65      	ldr	r3, [pc, #404]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b62      	ldr	r3, [pc, #392]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	495f      	ldr	r1, [pc, #380]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e018      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7ff fae5 	bl	800187c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff fae1 	bl	800187c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1f9      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d03c      	beq.n	800235a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7ff fac0 	bl	800187c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff fabc 	bl	800187c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1d4      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002312:	4b41      	ldr	r3, [pc, #260]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x3ec>
 8002320:	e01b      	b.n	800235a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002322:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002328:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7ff faa3 	bl	800187c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233a:	f7ff fa9f 	bl	800187c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1b7      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234c:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a6 	beq.w	80024b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002390:	2301      	movs	r3, #1
 8002392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d118      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fa66 	bl	800187c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7ff fa62 	bl	800187c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e17a      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCC_OscConfig+0x508>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x4d8>
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ea:	e029      	b.n	8002440 <HAL_RCC_OscConfig+0x52c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d115      	bne.n	8002420 <HAL_RCC_OscConfig+0x50c>
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	4a03      	ldr	r2, [pc, #12]	@ (8002418 <HAL_RCC_OscConfig+0x504>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0x52c>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
 8002420:	4b9c      	ldr	r3, [pc, #624]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002426:	4a9b      	ldr	r2, [pc, #620]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002430:	4b98      	ldr	r3, [pc, #608]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	4a97      	ldr	r2, [pc, #604]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7ff fa18 	bl	800187c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7ff fa14 	bl	800187c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e12a      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	4b8b      	ldr	r3, [pc, #556]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ed      	beq.n	8002450 <HAL_RCC_OscConfig+0x53c>
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7ff fa01 	bl	800187c <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7ff f9fd 	bl	800187c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e113      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002494:	4b7f      	ldr	r3, [pc, #508]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ed      	bne.n	800247e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	4a79      	ldr	r2, [pc, #484]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80fe 	beq.w	80026ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	f040 80d0 	bne.w	8002668 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c8:	4b72      	ldr	r3, [pc, #456]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d130      	bne.n	800253e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	3b01      	subs	r3, #1
 80024e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d127      	bne.n	800253e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d11f      	bne.n	800253e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002508:	2a07      	cmp	r2, #7
 800250a:	bf14      	ite	ne
 800250c:	2201      	movne	r2, #1
 800250e:	2200      	moveq	r2, #0
 8002510:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002512:	4293      	cmp	r3, r2
 8002514:	d113      	bne.n	800253e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	3b01      	subs	r3, #1
 8002524:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d109      	bne.n	800253e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d06e      	beq.n	800261c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d069      	beq.n	8002618 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002544:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002550:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0ad      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002560:	4b4c      	ldr	r3, [pc, #304]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a4b      	ldr	r2, [pc, #300]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800256c:	f7ff f986 	bl	800187c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7ff f982 	bl	800187c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e09a      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002586:	4b43      	ldr	r3, [pc, #268]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002592:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_RCC_OscConfig+0x784>)
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025a2:	3a01      	subs	r2, #1
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025ac:	0212      	lsls	r2, r2, #8
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025b4:	0852      	lsrs	r2, r2, #1
 80025b6:	3a01      	subs	r2, #1
 80025b8:	0552      	lsls	r2, r2, #21
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c0:	0852      	lsrs	r2, r2, #1
 80025c2:	3a01      	subs	r2, #1
 80025c4:	0652      	lsls	r2, r2, #25
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025cc:	0912      	lsrs	r2, r2, #4
 80025ce:	0452      	lsls	r2, r2, #17
 80025d0:	430a      	orrs	r2, r1
 80025d2:	4930      	ldr	r1, [pc, #192]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f0:	f7ff f944 	bl	800187c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7ff f940 	bl	800187c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e058      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002616:	e050      	b.n	80026ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04f      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d148      	bne.n	80026ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 800262e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a16      	ldr	r2, [pc, #88]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800263e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002640:	f7ff f91c 	bl	800187c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7ff f918 	bl	800187c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e030      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	4b0e      	ldr	r3, [pc, #56]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x734>
 8002666:	e028      	b.n	80026ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d023      	beq.n	80026b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <HAL_RCC_OscConfig+0x780>)
 8002674:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff f8ff 	bl	800187c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	e00c      	b.n	800269c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7ff f8fb 	bl	800187c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d905      	bls.n	800269c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e013      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
 8002694:	40021000 	.word	0x40021000
 8002698:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269c:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_RCC_OscConfig+0x7b0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ec      	bne.n	8002682 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_RCC_OscConfig+0x7b0>)
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4905      	ldr	r1, [pc, #20]	@ (80026c4 <HAL_RCC_OscConfig+0x7b0>)
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_OscConfig+0x7b4>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
 80026b4:	e001      	b.n	80026ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	feeefffc 	.word	0xfeeefffc

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0e7      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d910      	bls.n	8002710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4970      	ldr	r1, [pc, #448]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b6e      	ldr	r3, [pc, #440]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0cf      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	4b66      	ldr	r3, [pc, #408]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002728:	429a      	cmp	r2, r3
 800272a:	d908      	bls.n	800273e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b63      	ldr	r3, [pc, #396]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4960      	ldr	r1, [pc, #384]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d04c      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b5a      	ldr	r3, [pc, #360]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d121      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0a6      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276a:	4b54      	ldr	r3, [pc, #336]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e09a      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002782:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e08e      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002792:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e086      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b46      	ldr	r3, [pc, #280]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4943      	ldr	r1, [pc, #268]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7ff f862 	bl	800187c <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7ff f85e 	bl	800187c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e06e      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b3a      	ldr	r3, [pc, #232]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d208      	bcs.n	8002812 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b2e      	ldr	r3, [pc, #184]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	492b      	ldr	r1, [pc, #172]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002812:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d210      	bcs.n	8002842 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0207 	bic.w	r2, r3, #7
 8002828:	4923      	ldr	r1, [pc, #140]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002830:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e036      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284e:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4918      	ldr	r1, [pc, #96]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286c:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4910      	ldr	r1, [pc, #64]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002880:	f000 f824 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	490b      	ldr	r1, [pc, #44]	@ (80028c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_RCC_ClockConfig+0x1f8>)
 800289e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_ClockConfig+0x1fc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe ff99 	bl	80017dc <HAL_InitTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ae:	7afb      	ldrb	r3, [r7, #11]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	0800801c 	.word	0x0800801c
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	@ 0x24
 80028d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028da:	4b3e      	ldr	r3, [pc, #248]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x34>
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d121      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d11e      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002900:	4b34      	ldr	r3, [pc, #208]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800290c:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e005      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002928:	4a2b      	ldr	r2, [pc, #172]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d102      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002944:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e004      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d101      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002950:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d134      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0xa6>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d003      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0xac>
 8002970:	e005      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002974:	617b      	str	r3, [r7, #20]
      break;
 8002976:	e005      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800297a:	617b      	str	r3, [r7, #20]
      break;
 800297c:	e002      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	617b      	str	r3, [r7, #20]
      break;
 8002982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	3301      	adds	r3, #1
 8002990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	fb03 f202 	mul.w	r2, r3, r2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	0e5b      	lsrs	r3, r3, #25
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	3301      	adds	r3, #1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029c4:	69bb      	ldr	r3, [r7, #24]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08008034 	.word	0x08008034
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	007a1200 	.word	0x007a1200

080029e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	@ (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	0800802c 	.word	0x0800802c

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a2c:	f7ff ffda 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0adb      	lsrs	r3, r3, #11
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	0800802c 	.word	0x0800802c

08002a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a60:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a6c:	f7ff f9ee 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8002a70:	6178      	str	r0, [r7, #20]
 8002a72:	e014      	b.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a80:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a8c:	f7ff f9de 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 8002a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa4:	d10b      	bne.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b80      	cmp	r3, #128	@ 0x80
 8002aaa:	d919      	bls.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ab0:	d902      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e013      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab8:	2301      	movs	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e010      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b80      	cmp	r3, #128	@ 0x80
 8002ac2:	d902      	bls.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e00a      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b80      	cmp	r3, #128	@ 0x80
 8002ace:	d102      	bne.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e004      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b70      	cmp	r3, #112	@ 0x70
 8002ada:	d101      	bne.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 0207 	bic.w	r2, r3, #7
 8002ae8:	4909      	ldr	r1, [pc, #36]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b20:	2300      	movs	r3, #0
 8002b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d041      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b38:	d02a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b3e:	d824      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b4a:	d81e      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b54:	d010      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b56:	e018      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b58:	4b86      	ldr	r3, [pc, #536]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a85      	ldr	r2, [pc, #532]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b64:	e015      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 facb 	bl	8003108 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b76:	e00c      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fbb6 	bl	80032f0 <RCCEx_PLLSAI2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b88:	e003      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b8e:	e000      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b98:	4b76      	ldr	r3, [pc, #472]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba6:	4973      	ldr	r1, [pc, #460]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002bae:	e001      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d041      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bc8:	d02a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002bca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bce:	d824      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bda:	d81e      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be4:	d010      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002be6:	e018      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be8:	4b62      	ldr	r3, [pc, #392]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a61      	ldr	r2, [pc, #388]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf4:	e015      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa83 	bl	8003108 <RCCEx_PLLSAI1_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c06:	e00c      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3320      	adds	r3, #32
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb6e 	bl	80032f0 <RCCEx_PLLSAI2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c18:	e003      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c28:	4b52      	ldr	r3, [pc, #328]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c36:	494f      	ldr	r1, [pc, #316]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a0 	beq.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c56:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a40      	ldr	r2, [pc, #256]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c78:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c88:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fdf2 	bl	800187c <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fdee 	bl	800187c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	74fb      	strb	r3, [r7, #19]
        break;
 8002cae:	e005      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cb0:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d15c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d019      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce0:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cec:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	4a20      	ldr	r2, [pc, #128]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d0c:	4a19      	ldr	r2, [pc, #100]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fdad 	bl	800187c <HAL_GetTick>
 8002d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	e00b      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe fda9 	bl	800187c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d902      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ec      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d62:	4904      	ldr	r1, [pc, #16]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d6a:	e009      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
 8002d70:	e006      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d80:	7c7b      	ldrb	r3, [r7, #17]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b9e      	ldr	r3, [pc, #632]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	4a9d      	ldr	r2, [pc, #628]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9e:	4b98      	ldr	r3, [pc, #608]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	4994      	ldr	r1, [pc, #592]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 020c 	bic.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	498c      	ldr	r1, [pc, #560]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de2:	4b87      	ldr	r3, [pc, #540]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	4983      	ldr	r1, [pc, #524]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e04:	4b7e      	ldr	r3, [pc, #504]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	497b      	ldr	r1, [pc, #492]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e26:	4b76      	ldr	r3, [pc, #472]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	4972      	ldr	r1, [pc, #456]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e48:	4b6d      	ldr	r3, [pc, #436]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	496a      	ldr	r1, [pc, #424]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	4961      	ldr	r1, [pc, #388]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	4959      	ldr	r1, [pc, #356]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eae:	4b54      	ldr	r3, [pc, #336]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	4950      	ldr	r1, [pc, #320]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	4948      	ldr	r1, [pc, #288]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef2:	4b43      	ldr	r3, [pc, #268]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	493f      	ldr	r1, [pc, #252]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d028      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f14:	4b3a      	ldr	r3, [pc, #232]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f22:	4937      	ldr	r1, [pc, #220]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b32      	ldr	r3, [pc, #200]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a31      	ldr	r2, [pc, #196]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
 8002f40:	e011      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f8d8 	bl	8003108 <RCCEx_PLLSAI1_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d028      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	491f      	ldr	r1, [pc, #124]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f92:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4a1a      	ldr	r2, [pc, #104]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9c:	60d3      	str	r3, [r2, #12]
 8002f9e:	e011      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f8a9 	bl	8003108 <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	4908      	ldr	r1, [pc, #32]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fee:	d109      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a02      	ldr	r2, [pc, #8]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
 8002ffc:	e014      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003008:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f877 	bl	8003108 <RCCEx_PLLSAI1_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d02f      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003034:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003042:	4928      	ldr	r1, [pc, #160]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003052:	d10d      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f854 	bl	8003108 <RCCEx_PLLSAI1_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	74bb      	strb	r3, [r7, #18]
 800306e:	e011      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3320      	adds	r3, #32
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f935 	bl	80032f0 <RCCEx_PLLSAI2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030a0:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030ae:	490d      	ldr	r1, [pc, #52]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030d2:	4904      	ldr	r1, [pc, #16]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030da:	7cbb      	ldrb	r3, [r7, #18]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000

08003108 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003116:	4b75      	ldr	r3, [pc, #468]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003122:	4b72      	ldr	r3, [pc, #456]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0203 	and.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d10d      	bne.n	800314e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
       ||
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800313a:	4b6c      	ldr	r3, [pc, #432]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
       ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d047      	beq.n	80031de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	e044      	b.n	80031de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d018      	beq.n	800318e <RCCEx_PLLSAI1_Config+0x86>
 800315c:	2b03      	cmp	r3, #3
 800315e:	d825      	bhi.n	80031ac <RCCEx_PLLSAI1_Config+0xa4>
 8003160:	2b01      	cmp	r3, #1
 8003162:	d002      	beq.n	800316a <RCCEx_PLLSAI1_Config+0x62>
 8003164:	2b02      	cmp	r3, #2
 8003166:	d009      	beq.n	800317c <RCCEx_PLLSAI1_Config+0x74>
 8003168:	e020      	b.n	80031ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800316a:	4b60      	ldr	r3, [pc, #384]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11d      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317a:	e01a      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800317c:	4b5b      	ldr	r3, [pc, #364]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e013      	b.n	80031b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800318e:	4b57      	ldr	r3, [pc, #348]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800319a:	4b54      	ldr	r3, [pc, #336]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031aa:	e006      	b.n	80031ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e004      	b.n	80031bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	430b      	orrs	r3, r1
 80031d8:	4944      	ldr	r1, [pc, #272]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d17d      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031e4:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a40      	ldr	r2, [pc, #256]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fe fb44 	bl	800187c <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031f6:	e009      	b.n	800320c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f8:	f7fe fb40 	bl	800187c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d902      	bls.n	800320c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	73fb      	strb	r3, [r7, #15]
        break;
 800320a:	e005      	b.n	8003218 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800320c:	4b37      	ldr	r3, [pc, #220]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ef      	bne.n	80031f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d160      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003224:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800322c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6892      	ldr	r2, [r2, #8]
 8003234:	0211      	lsls	r1, r2, #8
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	0912      	lsrs	r2, r2, #4
 800323c:	0452      	lsls	r2, r2, #17
 800323e:	430a      	orrs	r2, r1
 8003240:	492a      	ldr	r1, [pc, #168]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	610b      	str	r3, [r1, #16]
 8003246:	e027      	b.n	8003298 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d112      	bne.n	8003274 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003256:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6892      	ldr	r2, [r2, #8]
 800325e:	0211      	lsls	r1, r2, #8
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6912      	ldr	r2, [r2, #16]
 8003264:	0852      	lsrs	r2, r2, #1
 8003266:	3a01      	subs	r2, #1
 8003268:	0552      	lsls	r2, r2, #21
 800326a:	430a      	orrs	r2, r1
 800326c:	491f      	ldr	r1, [pc, #124]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	610b      	str	r3, [r1, #16]
 8003272:	e011      	b.n	8003298 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003274:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800327c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6892      	ldr	r2, [r2, #8]
 8003284:	0211      	lsls	r1, r2, #8
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6952      	ldr	r2, [r2, #20]
 800328a:	0852      	lsrs	r2, r2, #1
 800328c:	3a01      	subs	r2, #1
 800328e:	0652      	lsls	r2, r2, #25
 8003290:	430a      	orrs	r2, r1
 8003292:	4916      	ldr	r1, [pc, #88]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a13      	ldr	r2, [pc, #76]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800329e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe faea 	bl	800187c <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032aa:	e009      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ac:	f7fe fae6 	bl	800187c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	73fb      	strb	r3, [r7, #15]
          break;
 80032be:	e005      	b.n	80032cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ef      	beq.n	80032ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	4904      	ldr	r1, [pc, #16]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032fe:	4b6a      	ldr	r3, [pc, #424]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800330a:	4b67      	ldr	r3, [pc, #412]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d10d      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
       ||
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003322:	4b61      	ldr	r3, [pc, #388]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
       ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d047      	beq.n	80033c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e044      	b.n	80033c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d018      	beq.n	8003376 <RCCEx_PLLSAI2_Config+0x86>
 8003344:	2b03      	cmp	r3, #3
 8003346:	d825      	bhi.n	8003394 <RCCEx_PLLSAI2_Config+0xa4>
 8003348:	2b01      	cmp	r3, #1
 800334a:	d002      	beq.n	8003352 <RCCEx_PLLSAI2_Config+0x62>
 800334c:	2b02      	cmp	r3, #2
 800334e:	d009      	beq.n	8003364 <RCCEx_PLLSAI2_Config+0x74>
 8003350:	e020      	b.n	8003394 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003352:	4b55      	ldr	r3, [pc, #340]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11d      	bne.n	800339a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003362:	e01a      	b.n	800339a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003364:	4b50      	ldr	r3, [pc, #320]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d116      	bne.n	800339e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003374:	e013      	b.n	800339e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003376:	4b4c      	ldr	r3, [pc, #304]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003382:	4b49      	ldr	r3, [pc, #292]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003392:	e006      	b.n	80033a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      break;
 8003398:	e004      	b.n	80033a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033aa:	4b3f      	ldr	r3, [pc, #252]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	430b      	orrs	r3, r1
 80033c0:	4939      	ldr	r1, [pc, #228]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d167      	bne.n	800349c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033cc:	4b36      	ldr	r3, [pc, #216]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a35      	ldr	r2, [pc, #212]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d8:	f7fe fa50 	bl	800187c <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033e0:	f7fe fa4c 	bl	800187c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
        break;
 80033f2:	e005      	b.n	8003400 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033f4:	4b2c      	ldr	r3, [pc, #176]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ef      	bne.n	80033e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d14a      	bne.n	800349c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d111      	bne.n	8003430 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800340c:	4b26      	ldr	r3, [pc, #152]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
 800341c:	0211      	lsls	r1, r2, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	0912      	lsrs	r2, r2, #4
 8003424:	0452      	lsls	r2, r2, #17
 8003426:	430a      	orrs	r2, r1
 8003428:	491f      	ldr	r1, [pc, #124]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	614b      	str	r3, [r1, #20]
 800342e:	e011      	b.n	8003454 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003438:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6892      	ldr	r2, [r2, #8]
 8003440:	0211      	lsls	r1, r2, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6912      	ldr	r2, [r2, #16]
 8003446:	0852      	lsrs	r2, r2, #1
 8003448:	3a01      	subs	r2, #1
 800344a:	0652      	lsls	r2, r2, #25
 800344c:	430a      	orrs	r2, r1
 800344e:	4916      	ldr	r1, [pc, #88]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a13      	ldr	r2, [pc, #76]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe fa0c 	bl	800187c <HAL_GetTick>
 8003464:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003466:	e009      	b.n	800347c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003468:	f7fe fa08 	bl	800187c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d902      	bls.n	800347c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	73fb      	strb	r3, [r7, #15]
          break;
 800347a:	e005      	b.n	8003488 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800347c:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4904      	ldr	r1, [pc, #16]	@ (80034a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e049      	b.n	8003552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe f83e 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f000 fd74 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e049      	b.n	8003600 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f841 	bl	8003608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 fd1d 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_TIM_PWM_Start+0x24>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e03c      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d109      	bne.n	800365a <HAL_TIM_PWM_Start+0x3e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e02f      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d109      	bne.n	8003674 <HAL_TIM_PWM_Start+0x58>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e022      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d109      	bne.n	800368e <HAL_TIM_PWM_Start+0x72>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e015      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d109      	bne.n	80036a8 <HAL_TIM_PWM_Start+0x8c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e008      	b.n	80036ba <HAL_TIM_PWM_Start+0x9e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e09c      	b.n	80037fc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0xb6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d0:	e023      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start+0xc6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e0:	e01b      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_PWM_Start+0xd6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f0:	e013      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Start+0xe6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003700:	e00b      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b10      	cmp	r3, #16
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start+0xf6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003710:	e003      	b.n	800371a <HAL_TIM_PWM_Start+0xfe>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2201      	movs	r2, #1
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f001 f992 	bl	8004a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a35      	ldr	r2, [pc, #212]	@ (8003804 <HAL_TIM_PWM_Start+0x1e8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <HAL_TIM_PWM_Start+0x13e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a34      	ldr	r2, [pc, #208]	@ (8003808 <HAL_TIM_PWM_Start+0x1ec>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00e      	beq.n	800375a <HAL_TIM_PWM_Start+0x13e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a32      	ldr	r2, [pc, #200]	@ (800380c <HAL_TIM_PWM_Start+0x1f0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_TIM_PWM_Start+0x13e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a31      	ldr	r2, [pc, #196]	@ (8003810 <HAL_TIM_PWM_Start+0x1f4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_TIM_PWM_Start+0x13e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2f      	ldr	r2, [pc, #188]	@ (8003814 <HAL_TIM_PWM_Start+0x1f8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_TIM_PWM_Start+0x142>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_TIM_PWM_Start+0x144>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <HAL_TIM_PWM_Start+0x1e8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01d      	beq.n	80037ba <HAL_TIM_PWM_Start+0x19e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003786:	d018      	beq.n	80037ba <HAL_TIM_PWM_Start+0x19e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a22      	ldr	r2, [pc, #136]	@ (8003818 <HAL_TIM_PWM_Start+0x1fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_TIM_PWM_Start+0x19e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	@ (800381c <HAL_TIM_PWM_Start+0x200>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIM_PWM_Start+0x19e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003820 <HAL_TIM_PWM_Start+0x204>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_TIM_PWM_Start+0x19e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a17      	ldr	r2, [pc, #92]	@ (8003808 <HAL_TIM_PWM_Start+0x1ec>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIM_PWM_Start+0x19e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a15      	ldr	r2, [pc, #84]	@ (800380c <HAL_TIM_PWM_Start+0x1f0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d115      	bne.n	80037e6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <HAL_TIM_PWM_Start+0x208>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b06      	cmp	r3, #6
 80037ca:	d015      	beq.n	80037f8 <HAL_TIM_PWM_Start+0x1dc>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d2:	d011      	beq.n	80037f8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	e008      	b.n	80037f8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e000      	b.n	80037fa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	00010007 	.word	0x00010007

08003828 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e049      	b.n	80038ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f841 	bl	80038d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f000 fbb6 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_IC_Start+0x1a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e023      	b.n	800394e <HAL_TIM_IC_Start+0x62>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d104      	bne.n	8003916 <HAL_TIM_IC_Start+0x2a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e01b      	b.n	800394e <HAL_TIM_IC_Start+0x62>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d104      	bne.n	8003926 <HAL_TIM_IC_Start+0x3a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e013      	b.n	800394e <HAL_TIM_IC_Start+0x62>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d104      	bne.n	8003936 <HAL_TIM_IC_Start+0x4a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e00b      	b.n	800394e <HAL_TIM_IC_Start+0x62>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b10      	cmp	r3, #16
 800393a:	d104      	bne.n	8003946 <HAL_TIM_IC_Start+0x5a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e003      	b.n	800394e <HAL_TIM_IC_Start+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800394c:	b2db      	uxtb	r3, r3
 800394e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_TIM_IC_Start+0x74>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e013      	b.n	8003988 <HAL_TIM_IC_Start+0x9c>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d104      	bne.n	8003970 <HAL_TIM_IC_Start+0x84>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e00b      	b.n	8003988 <HAL_TIM_IC_Start+0x9c>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d104      	bne.n	8003980 <HAL_TIM_IC_Start+0x94>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e003      	b.n	8003988 <HAL_TIM_IC_Start+0x9c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e092      	b.n	8003ac0 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start+0xbe>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a8:	e023      	b.n	80039f2 <HAL_TIM_IC_Start+0x106>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start+0xce>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b8:	e01b      	b.n	80039f2 <HAL_TIM_IC_Start+0x106>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start+0xde>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c8:	e013      	b.n	80039f2 <HAL_TIM_IC_Start+0x106>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d104      	bne.n	80039da <HAL_TIM_IC_Start+0xee>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039d8:	e00b      	b.n	80039f2 <HAL_TIM_IC_Start+0x106>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d104      	bne.n	80039ea <HAL_TIM_IC_Start+0xfe>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e8:	e003      	b.n	80039f2 <HAL_TIM_IC_Start+0x106>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start+0x116>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a00:	e013      	b.n	8003a2a <HAL_TIM_IC_Start+0x13e>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_IC_Start+0x126>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a10:	e00b      	b.n	8003a2a <HAL_TIM_IC_Start+0x13e>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_IC_Start+0x136>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a20:	e003      	b.n	8003a2a <HAL_TIM_IC_Start+0x13e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 f80a 	bl	8004a4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a22      	ldr	r2, [pc, #136]	@ (8003ac8 <HAL_TIM_IC_Start+0x1dc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01d      	beq.n	8003a7e <HAL_TIM_IC_Start+0x192>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4a:	d018      	beq.n	8003a7e <HAL_TIM_IC_Start+0x192>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	@ (8003acc <HAL_TIM_IC_Start+0x1e0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_TIM_IC_Start+0x192>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_TIM_IC_Start+0x1e4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_TIM_IC_Start+0x192>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad4 <HAL_TIM_IC_Start+0x1e8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_TIM_IC_Start+0x192>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_TIM_IC_Start+0x1ec>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_TIM_IC_Start+0x192>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <HAL_TIM_IC_Start+0x1f0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d115      	bne.n	8003aaa <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <HAL_TIM_IC_Start+0x1f4>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d015      	beq.n	8003abc <HAL_TIM_IC_Start+0x1d0>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a96:	d011      	beq.n	8003abc <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	e008      	b.n	8003abc <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e000      	b.n	8003abe <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40013400 	.word	0x40013400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	00010007 	.word	0x00010007

08003ae4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e088      	b.n	8003c14 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b20:	f000 fdd6 	bl	80046d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 020c 	bic.w	r2, r2, #12
 8003b32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6999      	ldr	r1, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	619a      	str	r2, [r3, #24]
 8003b46:	e060      	b.n	8003c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d11c      	bne.n	8003b88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003b5e:	f000 fe54 	bl	800480a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6999      	ldr	r1, [r3, #24]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
 8003b86:	e040      	b.n	8003c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d11b      	bne.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b9e:	f000 fea1 	bl	80048e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 020c 	bic.w	r2, r2, #12
 8003bb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69d9      	ldr	r1, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
 8003bc4:	e021      	b.n	8003c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d11c      	bne.n	8003c06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003bdc:	f000 febe 	bl	800495c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003bee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69d9      	ldr	r1, [r3, #28]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	61da      	str	r2, [r3, #28]
 8003c04:	e001      	b.n	8003c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0ff      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b14      	cmp	r3, #20
 8003c46:	f200 80f0 	bhi.w	8003e2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003e2b 	.word	0x08003e2b
 8003c58:	08003e2b 	.word	0x08003e2b
 8003c5c:	08003e2b 	.word	0x08003e2b
 8003c60:	08003ce5 	.word	0x08003ce5
 8003c64:	08003e2b 	.word	0x08003e2b
 8003c68:	08003e2b 	.word	0x08003e2b
 8003c6c:	08003e2b 	.word	0x08003e2b
 8003c70:	08003d27 	.word	0x08003d27
 8003c74:	08003e2b 	.word	0x08003e2b
 8003c78:	08003e2b 	.word	0x08003e2b
 8003c7c:	08003e2b 	.word	0x08003e2b
 8003c80:	08003d67 	.word	0x08003d67
 8003c84:	08003e2b 	.word	0x08003e2b
 8003c88:	08003e2b 	.word	0x08003e2b
 8003c8c:	08003e2b 	.word	0x08003e2b
 8003c90:	08003da9 	.word	0x08003da9
 8003c94:	08003e2b 	.word	0x08003e2b
 8003c98:	08003e2b 	.word	0x08003e2b
 8003c9c:	08003e2b 	.word	0x08003e2b
 8003ca0:	08003de9 	.word	0x08003de9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fa3a 	bl	8004124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0204 	bic.w	r2, r2, #4
 8003cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	619a      	str	r2, [r3, #24]
      break;
 8003ce2:	e0a5      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 faaa 	bl	8004244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6999      	ldr	r1, [r3, #24]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	619a      	str	r2, [r3, #24]
      break;
 8003d24:	e084      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fb13 	bl	8004358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0208 	orr.w	r2, r2, #8
 8003d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0204 	bic.w	r2, r2, #4
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]
      break;
 8003d64:	e064      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fb7b 	bl	8004468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69d9      	ldr	r1, [r3, #28]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	021a      	lsls	r2, r3, #8
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	61da      	str	r2, [r3, #28]
      break;
 8003da6:	e043      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fbc4 	bl	800453c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0208 	orr.w	r2, r2, #8
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0204 	bic.w	r2, r2, #4
 8003dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003de6:	e023      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fc08 	bl	8004604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e28:	e002      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop

08003e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x1c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0b6      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x18a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9c:	d03e      	beq.n	8003f1c <HAL_TIM_ConfigClockSource+0xd8>
 8003e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea2:	f200 8087 	bhi.w	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eaa:	f000 8086 	beq.w	8003fba <HAL_TIM_ConfigClockSource+0x176>
 8003eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb2:	d87f      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003eb4:	2b70      	cmp	r3, #112	@ 0x70
 8003eb6:	d01a      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xaa>
 8003eb8:	2b70      	cmp	r3, #112	@ 0x70
 8003eba:	d87b      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003ebc:	2b60      	cmp	r3, #96	@ 0x60
 8003ebe:	d050      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x11e>
 8003ec0:	2b60      	cmp	r3, #96	@ 0x60
 8003ec2:	d877      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003ec4:	2b50      	cmp	r3, #80	@ 0x50
 8003ec6:	d03c      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0xfe>
 8003ec8:	2b50      	cmp	r3, #80	@ 0x50
 8003eca:	d873      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	d058      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x13e>
 8003ed0:	2b40      	cmp	r3, #64	@ 0x40
 8003ed2:	d86f      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003ed4:	2b30      	cmp	r3, #48	@ 0x30
 8003ed6:	d064      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ed8:	2b30      	cmp	r3, #48	@ 0x30
 8003eda:	d86b      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d060      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d867      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d05a      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8003eec:	e062      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003efe:	f000 fd85 	bl	8004a0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	609a      	str	r2, [r3, #8]
      break;
 8003f1a:	e04f      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	f000 fd6e 	bl	8004a0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f3e:	609a      	str	r2, [r3, #8]
      break;
 8003f40:	e03c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fc2c 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2150      	movs	r1, #80	@ 0x50
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fd3b 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8003f60:	e02c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 fc88 	bl	8004884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2160      	movs	r1, #96	@ 0x60
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fd2b 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e01c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fc0c 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2140      	movs	r1, #64	@ 0x40
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fd1b 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e00c      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f000 fd12 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8003fb2:	e003      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb8:	e000      	b.n	8003fbc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a46      	ldr	r2, [pc, #280]	@ (8004104 <TIM_Base_SetConfig+0x12c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff6:	d00f      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a43      	ldr	r2, [pc, #268]	@ (8004108 <TIM_Base_SetConfig+0x130>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a42      	ldr	r2, [pc, #264]	@ (800410c <TIM_Base_SetConfig+0x134>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a41      	ldr	r2, [pc, #260]	@ (8004110 <TIM_Base_SetConfig+0x138>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a40      	ldr	r2, [pc, #256]	@ (8004114 <TIM_Base_SetConfig+0x13c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d108      	bne.n	800402a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a35      	ldr	r2, [pc, #212]	@ (8004104 <TIM_Base_SetConfig+0x12c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004038:	d01b      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a32      	ldr	r2, [pc, #200]	@ (8004108 <TIM_Base_SetConfig+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d017      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a31      	ldr	r2, [pc, #196]	@ (800410c <TIM_Base_SetConfig+0x134>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a30      	ldr	r2, [pc, #192]	@ (8004110 <TIM_Base_SetConfig+0x138>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2f      	ldr	r2, [pc, #188]	@ (8004114 <TIM_Base_SetConfig+0x13c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2e      	ldr	r2, [pc, #184]	@ (8004118 <TIM_Base_SetConfig+0x140>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2d      	ldr	r2, [pc, #180]	@ (800411c <TIM_Base_SetConfig+0x144>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <TIM_Base_SetConfig+0x148>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <TIM_Base_SetConfig+0x12c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00f      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <TIM_Base_SetConfig+0x13c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <TIM_Base_SetConfig+0x140>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a16      	ldr	r2, [pc, #88]	@ (800411c <TIM_Base_SetConfig+0x144>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <TIM_Base_SetConfig+0x148>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]
  }
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40013400 	.word	0x40013400
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800

08004124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f023 0201 	bic.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0302 	bic.w	r3, r3, #2
 8004170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <TIM_OC1_SetConfig+0x10c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00f      	beq.n	80041a4 <TIM_OC1_SetConfig+0x80>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2b      	ldr	r2, [pc, #172]	@ (8004234 <TIM_OC1_SetConfig+0x110>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_OC1_SetConfig+0x80>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2a      	ldr	r2, [pc, #168]	@ (8004238 <TIM_OC1_SetConfig+0x114>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_OC1_SetConfig+0x80>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a29      	ldr	r2, [pc, #164]	@ (800423c <TIM_OC1_SetConfig+0x118>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_OC1_SetConfig+0x80>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a28      	ldr	r2, [pc, #160]	@ (8004240 <TIM_OC1_SetConfig+0x11c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10c      	bne.n	80041be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0308 	bic.w	r3, r3, #8
 80041aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <TIM_OC1_SetConfig+0x10c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_OC1_SetConfig+0xc2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004234 <TIM_OC1_SetConfig+0x110>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_OC1_SetConfig+0xc2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a19      	ldr	r2, [pc, #100]	@ (8004238 <TIM_OC1_SetConfig+0x114>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_OC1_SetConfig+0xc2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a18      	ldr	r2, [pc, #96]	@ (800423c <TIM_OC1_SetConfig+0x118>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC1_SetConfig+0xc2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <TIM_OC1_SetConfig+0x11c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40013400 	.word	0x40013400
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f023 0210 	bic.w	r2, r3, #16
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0320 	bic.w	r3, r3, #32
 8004292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a28      	ldr	r2, [pc, #160]	@ (8004344 <TIM_OC2_SetConfig+0x100>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC2_SetConfig+0x6c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a27      	ldr	r2, [pc, #156]	@ (8004348 <TIM_OC2_SetConfig+0x104>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10d      	bne.n	80042cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <TIM_OC2_SetConfig+0x100>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00f      	beq.n	80042f4 <TIM_OC2_SetConfig+0xb0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004348 <TIM_OC2_SetConfig+0x104>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00b      	beq.n	80042f4 <TIM_OC2_SetConfig+0xb0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a1b      	ldr	r2, [pc, #108]	@ (800434c <TIM_OC2_SetConfig+0x108>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <TIM_OC2_SetConfig+0xb0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004350 <TIM_OC2_SetConfig+0x10c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_OC2_SetConfig+0xb0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <TIM_OC2_SetConfig+0x110>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d113      	bne.n	800431c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <TIM_OC3_SetConfig+0xfc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_OC3_SetConfig+0x6a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <TIM_OC3_SetConfig+0x100>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10d      	bne.n	80043de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004454 <TIM_OC3_SetConfig+0xfc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_OC3_SetConfig+0xae>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004458 <TIM_OC3_SetConfig+0x100>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_OC3_SetConfig+0xae>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1a      	ldr	r2, [pc, #104]	@ (800445c <TIM_OC3_SetConfig+0x104>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_OC3_SetConfig+0xae>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <TIM_OC3_SetConfig+0x108>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_OC3_SetConfig+0xae>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <TIM_OC3_SetConfig+0x10c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d113      	bne.n	800442e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800440c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40013400 	.word	0x40013400
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800

08004468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a18      	ldr	r2, [pc, #96]	@ (8004528 <TIM_OC4_SetConfig+0xc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00f      	beq.n	80044ec <TIM_OC4_SetConfig+0x84>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a17      	ldr	r2, [pc, #92]	@ (800452c <TIM_OC4_SetConfig+0xc4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_OC4_SetConfig+0x84>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a16      	ldr	r2, [pc, #88]	@ (8004530 <TIM_OC4_SetConfig+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_OC4_SetConfig+0x84>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a15      	ldr	r2, [pc, #84]	@ (8004534 <TIM_OC4_SetConfig+0xcc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC4_SetConfig+0x84>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <TIM_OC4_SetConfig+0xd0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d109      	bne.n	8004500 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40013400 	.word	0x40013400
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800

0800453c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004580:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a17      	ldr	r2, [pc, #92]	@ (80045f0 <TIM_OC5_SetConfig+0xb4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_OC5_SetConfig+0x7a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a16      	ldr	r2, [pc, #88]	@ (80045f4 <TIM_OC5_SetConfig+0xb8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_OC5_SetConfig+0x7a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <TIM_OC5_SetConfig+0xbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_OC5_SetConfig+0x7a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <TIM_OC5_SetConfig+0xc0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_OC5_SetConfig+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <TIM_OC5_SetConfig+0xc4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d109      	bne.n	80045ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	621a      	str	r2, [r3, #32]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40013400 	.word	0x40013400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800464a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	051b      	lsls	r3, r3, #20
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a18      	ldr	r2, [pc, #96]	@ (80046bc <TIM_OC6_SetConfig+0xb8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00f      	beq.n	8004680 <TIM_OC6_SetConfig+0x7c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a17      	ldr	r2, [pc, #92]	@ (80046c0 <TIM_OC6_SetConfig+0xbc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00b      	beq.n	8004680 <TIM_OC6_SetConfig+0x7c>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a16      	ldr	r2, [pc, #88]	@ (80046c4 <TIM_OC6_SetConfig+0xc0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d007      	beq.n	8004680 <TIM_OC6_SetConfig+0x7c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <TIM_OC6_SetConfig+0xc4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_OC6_SetConfig+0x7c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <TIM_OC6_SetConfig+0xc8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d109      	bne.n	8004694 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004686:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40013400 	.word	0x40013400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800

080046d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0201 	bic.w	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a26      	ldr	r2, [pc, #152]	@ (8004794 <TIM_TI1_SetConfig+0xc4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d017      	beq.n	800472e <TIM_TI1_SetConfig+0x5e>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d013      	beq.n	800472e <TIM_TI1_SetConfig+0x5e>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a23      	ldr	r2, [pc, #140]	@ (8004798 <TIM_TI1_SetConfig+0xc8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_TI1_SetConfig+0x5e>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a22      	ldr	r2, [pc, #136]	@ (800479c <TIM_TI1_SetConfig+0xcc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_TI1_SetConfig+0x5e>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <TIM_TI1_SetConfig+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_TI1_SetConfig+0x5e>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a20      	ldr	r2, [pc, #128]	@ (80047a4 <TIM_TI1_SetConfig+0xd4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_TI1_SetConfig+0x5e>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a1f      	ldr	r2, [pc, #124]	@ (80047a8 <TIM_TI1_SetConfig+0xd8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <TIM_TI1_SetConfig+0x62>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <TIM_TI1_SetConfig+0x64>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e003      	b.n	8004752 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	b2db      	uxtb	r3, r3
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 030a 	bic.w	r3, r3, #10
 800476c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 030a 	and.w	r3, r3, #10
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40013400 	.word	0x40013400
 80047a8:	40014000 	.word	0x40014000

080047ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 030a 	bic.w	r3, r3, #10
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0210 	bic.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	b29b      	uxth	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800485c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0210 	bic.w	r2, r3, #16
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	031b      	lsls	r3, r3, #12
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f023 0303 	bic.w	r3, r3, #3
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004920:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	b2db      	uxtb	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004934:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004988:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2201      	movs	r2, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e068      	b.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2d      	ldr	r2, [pc, #180]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004aea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1e      	ldr	r2, [pc, #120]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b22:	d018      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1a      	ldr	r2, [pc, #104]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a13      	ldr	r2, [pc, #76]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a14      	ldr	r2, [pc, #80]	@ (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10c      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40013400 	.word	0x40013400
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e040      	b.n	8004c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fd68 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	@ 0x24
 8004bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb6a 	bl	80052c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8af 	bl	8004d58 <UART_SetConfig>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e01b      	b.n	8004c3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fbe9 	bl	800540c <UART_CheckIdleState>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	@ 0x28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d177      	bne.n	8004d4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Transmit+0x24>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e070      	b.n	8004d4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2221      	movs	r2, #33	@ 0x21
 8004c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fdff 	bl	800187c <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c98:	d108      	bne.n	8004cac <HAL_UART_Transmit+0x68>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e003      	b.n	8004cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb4:	e02f      	b.n	8004d16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	@ 0x80
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fc4b 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e03b      	b.n	8004d4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	3302      	adds	r3, #2
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e007      	b.n	8004d04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1c9      	bne.n	8004cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2140      	movs	r1, #64	@ 0x40
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fc15 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e005      	b.n	8004d4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b08a      	sub	sp, #40	@ 0x28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4ba4      	ldr	r3, [pc, #656]	@ (8005018 <UART_SetConfig+0x2c0>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a99      	ldr	r2, [pc, #612]	@ (800501c <UART_SetConfig+0x2c4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a90      	ldr	r2, [pc, #576]	@ (8005020 <UART_SetConfig+0x2c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d126      	bne.n	8004e30 <UART_SetConfig+0xd8>
 8004de2:	4b90      	ldr	r3, [pc, #576]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d81b      	bhi.n	8004e28 <UART_SetConfig+0xd0>
 8004df0:	a201      	add	r2, pc, #4	@ (adr r2, 8004df8 <UART_SetConfig+0xa0>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e19 	.word	0x08004e19
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e116      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e112      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e10e      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e26:	e10a      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2e:	e106      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a7c      	ldr	r2, [pc, #496]	@ (8005028 <UART_SetConfig+0x2d0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d138      	bne.n	8004eac <UART_SetConfig+0x154>
 8004e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	d82d      	bhi.n	8004ea4 <UART_SetConfig+0x14c>
 8004e48:	a201      	add	r2, pc, #4	@ (adr r2, 8004e50 <UART_SetConfig+0xf8>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004ea5 	.word	0x08004ea5
 8004e58:	08004ea5 	.word	0x08004ea5
 8004e5c:	08004ea5 	.word	0x08004ea5
 8004e60:	08004e95 	.word	0x08004e95
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004ea5 	.word	0x08004ea5
 8004e6c:	08004ea5 	.word	0x08004ea5
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e0d8      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e0d4      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e0d0      	b.n	800503e <UART_SetConfig+0x2e6>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e0cc      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e0c8      	b.n	800503e <UART_SetConfig+0x2e6>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800502c <UART_SetConfig+0x2d4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d125      	bne.n	8004f02 <UART_SetConfig+0x1aa>
 8004eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ec0:	2b30      	cmp	r3, #48	@ 0x30
 8004ec2:	d016      	beq.n	8004ef2 <UART_SetConfig+0x19a>
 8004ec4:	2b30      	cmp	r3, #48	@ 0x30
 8004ec6:	d818      	bhi.n	8004efa <UART_SetConfig+0x1a2>
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d00a      	beq.n	8004ee2 <UART_SetConfig+0x18a>
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d814      	bhi.n	8004efa <UART_SetConfig+0x1a2>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <UART_SetConfig+0x182>
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d008      	beq.n	8004eea <UART_SetConfig+0x192>
 8004ed8:	e00f      	b.n	8004efa <UART_SetConfig+0x1a2>
 8004eda:	2300      	movs	r3, #0
 8004edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee0:	e0ad      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee8:	e0a9      	b.n	800503e <UART_SetConfig+0x2e6>
 8004eea:	2304      	movs	r3, #4
 8004eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef0:	e0a5      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef8:	e0a1      	b.n	800503e <UART_SetConfig+0x2e6>
 8004efa:	2310      	movs	r3, #16
 8004efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f00:	e09d      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a4a      	ldr	r2, [pc, #296]	@ (8005030 <UART_SetConfig+0x2d8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d125      	bne.n	8004f58 <UART_SetConfig+0x200>
 8004f0c:	4b45      	ldr	r3, [pc, #276]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f18:	d016      	beq.n	8004f48 <UART_SetConfig+0x1f0>
 8004f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f1c:	d818      	bhi.n	8004f50 <UART_SetConfig+0x1f8>
 8004f1e:	2b80      	cmp	r3, #128	@ 0x80
 8004f20:	d00a      	beq.n	8004f38 <UART_SetConfig+0x1e0>
 8004f22:	2b80      	cmp	r3, #128	@ 0x80
 8004f24:	d814      	bhi.n	8004f50 <UART_SetConfig+0x1f8>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x1d8>
 8004f2a:	2b40      	cmp	r3, #64	@ 0x40
 8004f2c:	d008      	beq.n	8004f40 <UART_SetConfig+0x1e8>
 8004f2e:	e00f      	b.n	8004f50 <UART_SetConfig+0x1f8>
 8004f30:	2300      	movs	r3, #0
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e082      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e07e      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e07a      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e076      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e072      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a35      	ldr	r2, [pc, #212]	@ (8005034 <UART_SetConfig+0x2dc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d12a      	bne.n	8004fb8 <UART_SetConfig+0x260>
 8004f62:	4b30      	ldr	r3, [pc, #192]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f70:	d01a      	beq.n	8004fa8 <UART_SetConfig+0x250>
 8004f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f76:	d81b      	bhi.n	8004fb0 <UART_SetConfig+0x258>
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f7c:	d00c      	beq.n	8004f98 <UART_SetConfig+0x240>
 8004f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f82:	d815      	bhi.n	8004fb0 <UART_SetConfig+0x258>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <UART_SetConfig+0x238>
 8004f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f8c:	d008      	beq.n	8004fa0 <UART_SetConfig+0x248>
 8004f8e:	e00f      	b.n	8004fb0 <UART_SetConfig+0x258>
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e052      	b.n	800503e <UART_SetConfig+0x2e6>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e04e      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e04a      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fae:	e046      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb6:	e042      	b.n	800503e <UART_SetConfig+0x2e6>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	@ (800501c <UART_SetConfig+0x2c4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d13a      	bne.n	8005038 <UART_SetConfig+0x2e0>
 8004fc2:	4b18      	ldr	r3, [pc, #96]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd0:	d01a      	beq.n	8005008 <UART_SetConfig+0x2b0>
 8004fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd6:	d81b      	bhi.n	8005010 <UART_SetConfig+0x2b8>
 8004fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fdc:	d00c      	beq.n	8004ff8 <UART_SetConfig+0x2a0>
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe2:	d815      	bhi.n	8005010 <UART_SetConfig+0x2b8>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <UART_SetConfig+0x298>
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fec:	d008      	beq.n	8005000 <UART_SetConfig+0x2a8>
 8004fee:	e00f      	b.n	8005010 <UART_SetConfig+0x2b8>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e022      	b.n	800503e <UART_SetConfig+0x2e6>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e01e      	b.n	800503e <UART_SetConfig+0x2e6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e01a      	b.n	800503e <UART_SetConfig+0x2e6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800500e:	e016      	b.n	800503e <UART_SetConfig+0x2e6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005016:	e012      	b.n	800503e <UART_SetConfig+0x2e6>
 8005018:	efff69f3 	.word	0xefff69f3
 800501c:	40008000 	.word	0x40008000
 8005020:	40013800 	.word	0x40013800
 8005024:	40021000 	.word	0x40021000
 8005028:	40004400 	.word	0x40004400
 800502c:	40004800 	.word	0x40004800
 8005030:	40004c00 	.word	0x40004c00
 8005034:	40005000 	.word	0x40005000
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a9f      	ldr	r2, [pc, #636]	@ (80052c0 <UART_SetConfig+0x568>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d17a      	bne.n	800513e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005048:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800504c:	2b08      	cmp	r3, #8
 800504e:	d824      	bhi.n	800509a <UART_SetConfig+0x342>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <UART_SetConfig+0x300>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	0800509b 	.word	0x0800509b
 8005060:	08005085 	.word	0x08005085
 8005064:	0800509b 	.word	0x0800509b
 8005068:	0800508b 	.word	0x0800508b
 800506c:	0800509b 	.word	0x0800509b
 8005070:	0800509b 	.word	0x0800509b
 8005074:	0800509b 	.word	0x0800509b
 8005078:	08005093 	.word	0x08005093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fd fcbe 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005080:	61f8      	str	r0, [r7, #28]
        break;
 8005082:	e010      	b.n	80050a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005084:	4b8f      	ldr	r3, [pc, #572]	@ (80052c4 <UART_SetConfig+0x56c>)
 8005086:	61fb      	str	r3, [r7, #28]
        break;
 8005088:	e00d      	b.n	80050a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508a:	f7fd fc1f 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800508e:	61f8      	str	r0, [r7, #28]
        break;
 8005090:	e009      	b.n	80050a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005096:	61fb      	str	r3, [r7, #28]
        break;
 8005098:	e005      	b.n	80050a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80fb 	beq.w	80052a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d305      	bcc.n	80050ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d903      	bls.n	80050d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050d0:	e0e8      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2200      	movs	r2, #0
 80050d6:	461c      	mov	r4, r3
 80050d8:	4615      	mov	r5, r2
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	022b      	lsls	r3, r5, #8
 80050e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050e8:	0222      	lsls	r2, r4, #8
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6849      	ldr	r1, [r1, #4]
 80050ee:	0849      	lsrs	r1, r1, #1
 80050f0:	2000      	movs	r0, #0
 80050f2:	4688      	mov	r8, r1
 80050f4:	4681      	mov	r9, r0
 80050f6:	eb12 0a08 	adds.w	sl, r2, r8
 80050fa:	eb43 0b09 	adc.w	fp, r3, r9
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510c:	4650      	mov	r0, sl
 800510e:	4659      	mov	r1, fp
 8005110:	f7fb fd4a 	bl	8000ba8 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4613      	mov	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005122:	d308      	bcc.n	8005136 <UART_SetConfig+0x3de>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800512a:	d204      	bcs.n	8005136 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e0b6      	b.n	80052a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800513c:	e0b2      	b.n	80052a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005146:	d15e      	bne.n	8005206 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800514c:	2b08      	cmp	r3, #8
 800514e:	d828      	bhi.n	80051a2 <UART_SetConfig+0x44a>
 8005150:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <UART_SetConfig+0x400>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fd fc3e 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005180:	61f8      	str	r0, [r7, #28]
        break;
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fd fc50 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b4d      	ldr	r3, [pc, #308]	@ (80052c4 <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fd fb9b 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d077      	beq.n	80052a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	005a      	lsls	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	441a      	add	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d916      	bls.n	80051fe <UART_SetConfig+0x4a6>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d6:	d212      	bcs.n	80051fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f023 030f 	bic.w	r3, r3, #15
 80051e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	8afb      	ldrh	r3, [r7, #22]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	8afa      	ldrh	r2, [r7, #22]
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	e052      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005204:	e04e      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800520a:	2b08      	cmp	r3, #8
 800520c:	d827      	bhi.n	800525e <UART_SetConfig+0x506>
 800520e:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <UART_SetConfig+0x4bc>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005239 	.word	0x08005239
 8005218:	08005241 	.word	0x08005241
 800521c:	08005249 	.word	0x08005249
 8005220:	0800525f 	.word	0x0800525f
 8005224:	0800524f 	.word	0x0800524f
 8005228:	0800525f 	.word	0x0800525f
 800522c:	0800525f 	.word	0x0800525f
 8005230:	0800525f 	.word	0x0800525f
 8005234:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fd fbe0 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 800523c:	61f8      	str	r0, [r7, #28]
        break;
 800523e:	e014      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005240:	f7fd fbf2 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005244:	61f8      	str	r0, [r7, #28]
        break;
 8005246:	e010      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005248:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <UART_SetConfig+0x56c>)
 800524a:	61fb      	str	r3, [r7, #28]
        break;
 800524c:	e00d      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524e:	f7fd fb3d 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8005252:	61f8      	str	r0, [r7, #28]
        break;
 8005254:	e009      	b.n	800526a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800525a:	61fb      	str	r3, [r7, #28]
        break;
 800525c:	e005      	b.n	800526a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005268:	bf00      	nop
    }

    if (pclk != 0U)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d019      	beq.n	80052a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085a      	lsrs	r2, r3, #1
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d909      	bls.n	800529e <UART_SetConfig+0x546>
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005290:	d205      	bcs.n	800529e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e002      	b.n	80052a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3728      	adds	r7, #40	@ 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052be:	bf00      	nop
 80052c0:	40008000 	.word	0x40008000
 80052c4:	00f42400 	.word	0x00f42400

080052c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c6:	d10a      	bne.n	80053de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
  }
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b098      	sub	sp, #96	@ 0x60
 8005410:	af02      	add	r7, sp, #8
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800541c:	f7fc fa2e 	bl	800187c <HAL_GetTick>
 8005420:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b08      	cmp	r3, #8
 800542e:	d12e      	bne.n	800548e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005438:	2200      	movs	r2, #0
 800543a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f88c 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d021      	beq.n	800548e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800545e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005468:	647b      	str	r3, [r7, #68]	@ 0x44
 800546a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800546e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e6      	bne.n	800544a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e062      	b.n	8005554 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d149      	bne.n	8005530 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f856 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03c      	beq.n	8005530 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	623b      	str	r3, [r7, #32]
   return(result);
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e6      	bne.n	80054b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	69b9      	ldr	r1, [r7, #24]
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	617b      	str	r3, [r7, #20]
   return(result);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e011      	b.n	8005554 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3758      	adds	r7, #88	@ 0x58
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	e04f      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d04b      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fc f981 	bl	800187c <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <UART_WaitOnFlagUntilTimeout+0x30>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e04e      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d037      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b80      	cmp	r3, #128	@ 0x80
 80055a2:	d034      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b40      	cmp	r3, #64	@ 0x40
 80055a8:	d031      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d110      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2208      	movs	r2, #8
 80055be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f838 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2208      	movs	r2, #8
 80055ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e029      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e8:	d111      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f81e 	bl	8005636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e00f      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf0c      	ite	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	2300      	movne	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d0a0      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005636:	b480      	push	{r7}
 8005638:	b095      	sub	sp, #84	@ 0x54
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565c:	643b      	str	r3, [r7, #64]	@ 0x40
 800565e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e6      	bne.n	800563e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3308      	adds	r3, #8
 8005676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e5      	bne.n	8005670 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d118      	bne.n	80056de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f023 0310 	bic.w	r3, r3, #16
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6979      	ldr	r1, [r7, #20]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	613b      	str	r3, [r7, #16]
   return(result);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e6      	bne.n	80056ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056f2:	bf00      	nop
 80056f4:	3754      	adds	r7, #84	@ 0x54
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <__cvt>:
 80056fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005702:	ec57 6b10 	vmov	r6, r7, d0
 8005706:	2f00      	cmp	r7, #0
 8005708:	460c      	mov	r4, r1
 800570a:	4619      	mov	r1, r3
 800570c:	463b      	mov	r3, r7
 800570e:	bfbb      	ittet	lt
 8005710:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005714:	461f      	movlt	r7, r3
 8005716:	2300      	movge	r3, #0
 8005718:	232d      	movlt	r3, #45	@ 0x2d
 800571a:	700b      	strb	r3, [r1, #0]
 800571c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800571e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005722:	4691      	mov	r9, r2
 8005724:	f023 0820 	bic.w	r8, r3, #32
 8005728:	bfbc      	itt	lt
 800572a:	4632      	movlt	r2, r6
 800572c:	4616      	movlt	r6, r2
 800572e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005732:	d005      	beq.n	8005740 <__cvt+0x42>
 8005734:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005738:	d100      	bne.n	800573c <__cvt+0x3e>
 800573a:	3401      	adds	r4, #1
 800573c:	2102      	movs	r1, #2
 800573e:	e000      	b.n	8005742 <__cvt+0x44>
 8005740:	2103      	movs	r1, #3
 8005742:	ab03      	add	r3, sp, #12
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	ab02      	add	r3, sp, #8
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	ec47 6b10 	vmov	d0, r6, r7
 800574e:	4653      	mov	r3, sl
 8005750:	4622      	mov	r2, r4
 8005752:	f000 fe39 	bl	80063c8 <_dtoa_r>
 8005756:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800575a:	4605      	mov	r5, r0
 800575c:	d119      	bne.n	8005792 <__cvt+0x94>
 800575e:	f019 0f01 	tst.w	r9, #1
 8005762:	d00e      	beq.n	8005782 <__cvt+0x84>
 8005764:	eb00 0904 	add.w	r9, r0, r4
 8005768:	2200      	movs	r2, #0
 800576a:	2300      	movs	r3, #0
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fb f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005774:	b108      	cbz	r0, 800577a <__cvt+0x7c>
 8005776:	f8cd 900c 	str.w	r9, [sp, #12]
 800577a:	2230      	movs	r2, #48	@ 0x30
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	454b      	cmp	r3, r9
 8005780:	d31e      	bcc.n	80057c0 <__cvt+0xc2>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005786:	1b5b      	subs	r3, r3, r5
 8005788:	4628      	mov	r0, r5
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	b004      	add	sp, #16
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005796:	eb00 0904 	add.w	r9, r0, r4
 800579a:	d1e5      	bne.n	8005768 <__cvt+0x6a>
 800579c:	7803      	ldrb	r3, [r0, #0]
 800579e:	2b30      	cmp	r3, #48	@ 0x30
 80057a0:	d10a      	bne.n	80057b8 <__cvt+0xba>
 80057a2:	2200      	movs	r2, #0
 80057a4:	2300      	movs	r3, #0
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
 80057aa:	f7fb f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ae:	b918      	cbnz	r0, 80057b8 <__cvt+0xba>
 80057b0:	f1c4 0401 	rsb	r4, r4, #1
 80057b4:	f8ca 4000 	str.w	r4, [sl]
 80057b8:	f8da 3000 	ldr.w	r3, [sl]
 80057bc:	4499      	add	r9, r3
 80057be:	e7d3      	b.n	8005768 <__cvt+0x6a>
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	9103      	str	r1, [sp, #12]
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e7d9      	b.n	800577c <__cvt+0x7e>

080057c8 <__exponent>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	2900      	cmp	r1, #0
 80057cc:	bfba      	itte	lt
 80057ce:	4249      	neglt	r1, r1
 80057d0:	232d      	movlt	r3, #45	@ 0x2d
 80057d2:	232b      	movge	r3, #43	@ 0x2b
 80057d4:	2909      	cmp	r1, #9
 80057d6:	7002      	strb	r2, [r0, #0]
 80057d8:	7043      	strb	r3, [r0, #1]
 80057da:	dd29      	ble.n	8005830 <__exponent+0x68>
 80057dc:	f10d 0307 	add.w	r3, sp, #7
 80057e0:	461d      	mov	r5, r3
 80057e2:	270a      	movs	r7, #10
 80057e4:	461a      	mov	r2, r3
 80057e6:	fbb1 f6f7 	udiv	r6, r1, r7
 80057ea:	fb07 1416 	mls	r4, r7, r6, r1
 80057ee:	3430      	adds	r4, #48	@ 0x30
 80057f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057f4:	460c      	mov	r4, r1
 80057f6:	2c63      	cmp	r4, #99	@ 0x63
 80057f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80057fc:	4631      	mov	r1, r6
 80057fe:	dcf1      	bgt.n	80057e4 <__exponent+0x1c>
 8005800:	3130      	adds	r1, #48	@ 0x30
 8005802:	1e94      	subs	r4, r2, #2
 8005804:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005808:	1c41      	adds	r1, r0, #1
 800580a:	4623      	mov	r3, r4
 800580c:	42ab      	cmp	r3, r5
 800580e:	d30a      	bcc.n	8005826 <__exponent+0x5e>
 8005810:	f10d 0309 	add.w	r3, sp, #9
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	42ac      	cmp	r4, r5
 8005818:	bf88      	it	hi
 800581a:	2300      	movhi	r3, #0
 800581c:	3302      	adds	r3, #2
 800581e:	4403      	add	r3, r0
 8005820:	1a18      	subs	r0, r3, r0
 8005822:	b003      	add	sp, #12
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005826:	f813 6b01 	ldrb.w	r6, [r3], #1
 800582a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800582e:	e7ed      	b.n	800580c <__exponent+0x44>
 8005830:	2330      	movs	r3, #48	@ 0x30
 8005832:	3130      	adds	r1, #48	@ 0x30
 8005834:	7083      	strb	r3, [r0, #2]
 8005836:	70c1      	strb	r1, [r0, #3]
 8005838:	1d03      	adds	r3, r0, #4
 800583a:	e7f1      	b.n	8005820 <__exponent+0x58>

0800583c <_printf_float>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	b08d      	sub	sp, #52	@ 0x34
 8005842:	460c      	mov	r4, r1
 8005844:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005848:	4616      	mov	r6, r2
 800584a:	461f      	mov	r7, r3
 800584c:	4605      	mov	r5, r0
 800584e:	f000 fcbb 	bl	80061c8 <_localeconv_r>
 8005852:	6803      	ldr	r3, [r0, #0]
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fa fd0a 	bl	8000270 <strlen>
 800585c:	2300      	movs	r3, #0
 800585e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005860:	f8d8 3000 	ldr.w	r3, [r8]
 8005864:	9005      	str	r0, [sp, #20]
 8005866:	3307      	adds	r3, #7
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	f103 0208 	add.w	r2, r3, #8
 8005870:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005874:	f8d4 b000 	ldr.w	fp, [r4]
 8005878:	f8c8 2000 	str.w	r2, [r8]
 800587c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005880:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005884:	9307      	str	r3, [sp, #28]
 8005886:	f8cd 8018 	str.w	r8, [sp, #24]
 800588a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800588e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005892:	4b9c      	ldr	r3, [pc, #624]	@ (8005b04 <_printf_float+0x2c8>)
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	f7fb f948 	bl	8000b2c <__aeabi_dcmpun>
 800589c:	bb70      	cbnz	r0, 80058fc <_printf_float+0xc0>
 800589e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058a2:	4b98      	ldr	r3, [pc, #608]	@ (8005b04 <_printf_float+0x2c8>)
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295
 80058a8:	f7fb f922 	bl	8000af0 <__aeabi_dcmple>
 80058ac:	bb30      	cbnz	r0, 80058fc <_printf_float+0xc0>
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	f7fb f911 	bl	8000adc <__aeabi_dcmplt>
 80058ba:	b110      	cbz	r0, 80058c2 <_printf_float+0x86>
 80058bc:	232d      	movs	r3, #45	@ 0x2d
 80058be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058c2:	4a91      	ldr	r2, [pc, #580]	@ (8005b08 <_printf_float+0x2cc>)
 80058c4:	4b91      	ldr	r3, [pc, #580]	@ (8005b0c <_printf_float+0x2d0>)
 80058c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058ca:	bf94      	ite	ls
 80058cc:	4690      	movls	r8, r2
 80058ce:	4698      	movhi	r8, r3
 80058d0:	2303      	movs	r3, #3
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	f02b 0304 	bic.w	r3, fp, #4
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	f04f 0900 	mov.w	r9, #0
 80058de:	9700      	str	r7, [sp, #0]
 80058e0:	4633      	mov	r3, r6
 80058e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 f9d2 	bl	8005c90 <_printf_common>
 80058ec:	3001      	adds	r0, #1
 80058ee:	f040 808d 	bne.w	8005a0c <_printf_float+0x1d0>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	b00d      	add	sp, #52	@ 0x34
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	4640      	mov	r0, r8
 8005902:	4649      	mov	r1, r9
 8005904:	f7fb f912 	bl	8000b2c <__aeabi_dcmpun>
 8005908:	b140      	cbz	r0, 800591c <_printf_float+0xe0>
 800590a:	464b      	mov	r3, r9
 800590c:	2b00      	cmp	r3, #0
 800590e:	bfbc      	itt	lt
 8005910:	232d      	movlt	r3, #45	@ 0x2d
 8005912:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005916:	4a7e      	ldr	r2, [pc, #504]	@ (8005b10 <_printf_float+0x2d4>)
 8005918:	4b7e      	ldr	r3, [pc, #504]	@ (8005b14 <_printf_float+0x2d8>)
 800591a:	e7d4      	b.n	80058c6 <_printf_float+0x8a>
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005922:	9206      	str	r2, [sp, #24]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	d13b      	bne.n	80059a0 <_printf_float+0x164>
 8005928:	2306      	movs	r3, #6
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005930:	2300      	movs	r3, #0
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	9303      	str	r3, [sp, #12]
 8005936:	ab0a      	add	r3, sp, #40	@ 0x28
 8005938:	e9cd a301 	strd	sl, r3, [sp, #4]
 800593c:	ab09      	add	r3, sp, #36	@ 0x24
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	6861      	ldr	r1, [r4, #4]
 8005942:	ec49 8b10 	vmov	d0, r8, r9
 8005946:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800594a:	4628      	mov	r0, r5
 800594c:	f7ff fed7 	bl	80056fe <__cvt>
 8005950:	9b06      	ldr	r3, [sp, #24]
 8005952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005954:	2b47      	cmp	r3, #71	@ 0x47
 8005956:	4680      	mov	r8, r0
 8005958:	d129      	bne.n	80059ae <_printf_float+0x172>
 800595a:	1cc8      	adds	r0, r1, #3
 800595c:	db02      	blt.n	8005964 <_printf_float+0x128>
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	4299      	cmp	r1, r3
 8005962:	dd41      	ble.n	80059e8 <_printf_float+0x1ac>
 8005964:	f1aa 0a02 	sub.w	sl, sl, #2
 8005968:	fa5f fa8a 	uxtb.w	sl, sl
 800596c:	3901      	subs	r1, #1
 800596e:	4652      	mov	r2, sl
 8005970:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005974:	9109      	str	r1, [sp, #36]	@ 0x24
 8005976:	f7ff ff27 	bl	80057c8 <__exponent>
 800597a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800597c:	1813      	adds	r3, r2, r0
 800597e:	2a01      	cmp	r2, #1
 8005980:	4681      	mov	r9, r0
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	dc02      	bgt.n	800598c <_printf_float+0x150>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	07d2      	lsls	r2, r2, #31
 800598a:	d501      	bpl.n	8005990 <_printf_float+0x154>
 800598c:	3301      	adds	r3, #1
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0a2      	beq.n	80058de <_printf_float+0xa2>
 8005998:	232d      	movs	r3, #45	@ 0x2d
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599e:	e79e      	b.n	80058de <_printf_float+0xa2>
 80059a0:	9a06      	ldr	r2, [sp, #24]
 80059a2:	2a47      	cmp	r2, #71	@ 0x47
 80059a4:	d1c2      	bne.n	800592c <_printf_float+0xf0>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1c0      	bne.n	800592c <_printf_float+0xf0>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e7bd      	b.n	800592a <_printf_float+0xee>
 80059ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059b2:	d9db      	bls.n	800596c <_printf_float+0x130>
 80059b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059b8:	d118      	bne.n	80059ec <_printf_float+0x1b0>
 80059ba:	2900      	cmp	r1, #0
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	dd0b      	ble.n	80059d8 <_printf_float+0x19c>
 80059c0:	6121      	str	r1, [r4, #16]
 80059c2:	b913      	cbnz	r3, 80059ca <_printf_float+0x18e>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	07d0      	lsls	r0, r2, #31
 80059c8:	d502      	bpl.n	80059d0 <_printf_float+0x194>
 80059ca:	3301      	adds	r3, #1
 80059cc:	440b      	add	r3, r1
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	e7db      	b.n	8005990 <_printf_float+0x154>
 80059d8:	b913      	cbnz	r3, 80059e0 <_printf_float+0x1a4>
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	07d2      	lsls	r2, r2, #31
 80059de:	d501      	bpl.n	80059e4 <_printf_float+0x1a8>
 80059e0:	3302      	adds	r3, #2
 80059e2:	e7f4      	b.n	80059ce <_printf_float+0x192>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e7f2      	b.n	80059ce <_printf_float+0x192>
 80059e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ee:	4299      	cmp	r1, r3
 80059f0:	db05      	blt.n	80059fe <_printf_float+0x1c2>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	6121      	str	r1, [r4, #16]
 80059f6:	07d8      	lsls	r0, r3, #31
 80059f8:	d5ea      	bpl.n	80059d0 <_printf_float+0x194>
 80059fa:	1c4b      	adds	r3, r1, #1
 80059fc:	e7e7      	b.n	80059ce <_printf_float+0x192>
 80059fe:	2900      	cmp	r1, #0
 8005a00:	bfd4      	ite	le
 8005a02:	f1c1 0202 	rsble	r2, r1, #2
 8005a06:	2201      	movgt	r2, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	e7e0      	b.n	80059ce <_printf_float+0x192>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	055a      	lsls	r2, r3, #21
 8005a10:	d407      	bmi.n	8005a22 <_printf_float+0x1e6>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	4642      	mov	r2, r8
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d12b      	bne.n	8005a78 <_printf_float+0x23c>
 8005a20:	e767      	b.n	80058f2 <_printf_float+0xb6>
 8005a22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a26:	f240 80dd 	bls.w	8005be4 <_printf_float+0x3a8>
 8005a2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2300      	movs	r3, #0
 8005a32:	f7fb f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d033      	beq.n	8005aa2 <_printf_float+0x266>
 8005a3a:	4a37      	ldr	r2, [pc, #220]	@ (8005b18 <_printf_float+0x2dc>)
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f af54 	beq.w	80058f2 <_printf_float+0xb6>
 8005a4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a4e:	4543      	cmp	r3, r8
 8005a50:	db02      	blt.n	8005a58 <_printf_float+0x21c>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	07d8      	lsls	r0, r3, #31
 8005a56:	d50f      	bpl.n	8005a78 <_printf_float+0x23c>
 8005a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	f43f af45 	beq.w	80058f2 <_printf_float+0xb6>
 8005a68:	f04f 0900 	mov.w	r9, #0
 8005a6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a70:	f104 0a1a 	add.w	sl, r4, #26
 8005a74:	45c8      	cmp	r8, r9
 8005a76:	dc09      	bgt.n	8005a8c <_printf_float+0x250>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	079b      	lsls	r3, r3, #30
 8005a7c:	f100 8103 	bmi.w	8005c86 <_printf_float+0x44a>
 8005a80:	68e0      	ldr	r0, [r4, #12]
 8005a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a84:	4298      	cmp	r0, r3
 8005a86:	bfb8      	it	lt
 8005a88:	4618      	movlt	r0, r3
 8005a8a:	e734      	b.n	80058f6 <_printf_float+0xba>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4652      	mov	r2, sl
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f af2b 	beq.w	80058f2 <_printf_float+0xb6>
 8005a9c:	f109 0901 	add.w	r9, r9, #1
 8005aa0:	e7e8      	b.n	8005a74 <_printf_float+0x238>
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dc39      	bgt.n	8005b1c <_printf_float+0x2e0>
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b18 <_printf_float+0x2dc>)
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f af1d 	beq.w	80058f2 <_printf_float+0xb6>
 8005ab8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005abc:	ea59 0303 	orrs.w	r3, r9, r3
 8005ac0:	d102      	bne.n	8005ac8 <_printf_float+0x28c>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	07d9      	lsls	r1, r3, #31
 8005ac6:	d5d7      	bpl.n	8005a78 <_printf_float+0x23c>
 8005ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f af0d 	beq.w	80058f2 <_printf_float+0xb6>
 8005ad8:	f04f 0a00 	mov.w	sl, #0
 8005adc:	f104 0b1a 	add.w	fp, r4, #26
 8005ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae2:	425b      	negs	r3, r3
 8005ae4:	4553      	cmp	r3, sl
 8005ae6:	dc01      	bgt.n	8005aec <_printf_float+0x2b0>
 8005ae8:	464b      	mov	r3, r9
 8005aea:	e793      	b.n	8005a14 <_printf_float+0x1d8>
 8005aec:	2301      	movs	r3, #1
 8005aee:	465a      	mov	r2, fp
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f aefb 	beq.w	80058f2 <_printf_float+0xb6>
 8005afc:	f10a 0a01 	add.w	sl, sl, #1
 8005b00:	e7ee      	b.n	8005ae0 <_printf_float+0x2a4>
 8005b02:	bf00      	nop
 8005b04:	7fefffff 	.word	0x7fefffff
 8005b08:	08008064 	.word	0x08008064
 8005b0c:	08008068 	.word	0x08008068
 8005b10:	0800806c 	.word	0x0800806c
 8005b14:	08008070 	.word	0x08008070
 8005b18:	08008074 	.word	0x08008074
 8005b1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b22:	4553      	cmp	r3, sl
 8005b24:	bfa8      	it	ge
 8005b26:	4653      	movge	r3, sl
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	dc36      	bgt.n	8005b9c <_printf_float+0x360>
 8005b2e:	f04f 0b00 	mov.w	fp, #0
 8005b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b36:	f104 021a 	add.w	r2, r4, #26
 8005b3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b3c:	9306      	str	r3, [sp, #24]
 8005b3e:	eba3 0309 	sub.w	r3, r3, r9
 8005b42:	455b      	cmp	r3, fp
 8005b44:	dc31      	bgt.n	8005baa <_printf_float+0x36e>
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	459a      	cmp	sl, r3
 8005b4a:	dc3a      	bgt.n	8005bc2 <_printf_float+0x386>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	07da      	lsls	r2, r3, #31
 8005b50:	d437      	bmi.n	8005bc2 <_printf_float+0x386>
 8005b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b54:	ebaa 0903 	sub.w	r9, sl, r3
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b5e:	4599      	cmp	r9, r3
 8005b60:	bfa8      	it	ge
 8005b62:	4699      	movge	r9, r3
 8005b64:	f1b9 0f00 	cmp.w	r9, #0
 8005b68:	dc33      	bgt.n	8005bd2 <_printf_float+0x396>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b72:	f104 0b1a 	add.w	fp, r4, #26
 8005b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b78:	ebaa 0303 	sub.w	r3, sl, r3
 8005b7c:	eba3 0309 	sub.w	r3, r3, r9
 8005b80:	4543      	cmp	r3, r8
 8005b82:	f77f af79 	ble.w	8005a78 <_printf_float+0x23c>
 8005b86:	2301      	movs	r3, #1
 8005b88:	465a      	mov	r2, fp
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f aeae 	beq.w	80058f2 <_printf_float+0xb6>
 8005b96:	f108 0801 	add.w	r8, r8, #1
 8005b9a:	e7ec      	b.n	8005b76 <_printf_float+0x33a>
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1c2      	bne.n	8005b2e <_printf_float+0x2f2>
 8005ba8:	e6a3      	b.n	80058f2 <_printf_float+0xb6>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	9206      	str	r2, [sp, #24]
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae9c 	beq.w	80058f2 <_printf_float+0xb6>
 8005bba:	9a06      	ldr	r2, [sp, #24]
 8005bbc:	f10b 0b01 	add.w	fp, fp, #1
 8005bc0:	e7bb      	b.n	8005b3a <_printf_float+0x2fe>
 8005bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d1c0      	bne.n	8005b52 <_printf_float+0x316>
 8005bd0:	e68f      	b.n	80058f2 <_printf_float+0xb6>
 8005bd2:	9a06      	ldr	r2, [sp, #24]
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	4442      	add	r2, r8
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1c3      	bne.n	8005b6a <_printf_float+0x32e>
 8005be2:	e686      	b.n	80058f2 <_printf_float+0xb6>
 8005be4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005be8:	f1ba 0f01 	cmp.w	sl, #1
 8005bec:	dc01      	bgt.n	8005bf2 <_printf_float+0x3b6>
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d536      	bpl.n	8005c60 <_printf_float+0x424>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f ae78 	beq.w	80058f2 <_printf_float+0xb6>
 8005c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f ae70 	beq.w	80058f2 <_printf_float+0xb6>
 8005c12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c1e:	f7fa ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c22:	b9c0      	cbnz	r0, 8005c56 <_printf_float+0x41a>
 8005c24:	4653      	mov	r3, sl
 8005c26:	f108 0201 	add.w	r2, r8, #1
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	d10c      	bne.n	8005c4e <_printf_float+0x412>
 8005c34:	e65d      	b.n	80058f2 <_printf_float+0xb6>
 8005c36:	2301      	movs	r3, #1
 8005c38:	465a      	mov	r2, fp
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	f43f ae56 	beq.w	80058f2 <_printf_float+0xb6>
 8005c46:	f108 0801 	add.w	r8, r8, #1
 8005c4a:	45d0      	cmp	r8, sl
 8005c4c:	dbf3      	blt.n	8005c36 <_printf_float+0x3fa>
 8005c4e:	464b      	mov	r3, r9
 8005c50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c54:	e6df      	b.n	8005a16 <_printf_float+0x1da>
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	f104 0b1a 	add.w	fp, r4, #26
 8005c5e:	e7f4      	b.n	8005c4a <_printf_float+0x40e>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4642      	mov	r2, r8
 8005c64:	e7e1      	b.n	8005c2a <_printf_float+0x3ee>
 8005c66:	2301      	movs	r3, #1
 8005c68:	464a      	mov	r2, r9
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae3e 	beq.w	80058f2 <_printf_float+0xb6>
 8005c76:	f108 0801 	add.w	r8, r8, #1
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c7e:	1a5b      	subs	r3, r3, r1
 8005c80:	4543      	cmp	r3, r8
 8005c82:	dcf0      	bgt.n	8005c66 <_printf_float+0x42a>
 8005c84:	e6fc      	b.n	8005a80 <_printf_float+0x244>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 0919 	add.w	r9, r4, #25
 8005c8e:	e7f4      	b.n	8005c7a <_printf_float+0x43e>

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	4698      	mov	r8, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfb8      	it	lt
 8005ca4:	4613      	movlt	r3, r2
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_printf_common+0x26>
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	0699      	lsls	r1, r3, #26
 8005cba:	bf42      	ittt	mi
 8005cbc:	6833      	ldrmi	r3, [r6, #0]
 8005cbe:	3302      	addmi	r3, #2
 8005cc0:	6033      	strmi	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	f015 0506 	ands.w	r5, r5, #6
 8005cc8:	d106      	bne.n	8005cd8 <_printf_common+0x48>
 8005cca:	f104 0a19 	add.w	sl, r4, #25
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	6832      	ldr	r2, [r6, #0]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dc26      	bgt.n	8005d26 <_printf_common+0x96>
 8005cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	3b00      	subs	r3, #0
 8005ce0:	bf18      	it	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	0692      	lsls	r2, r2, #26
 8005ce6:	d42b      	bmi.n	8005d40 <_printf_common+0xb0>
 8005ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cec:	4641      	mov	r1, r8
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c8      	blx	r9
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d01e      	beq.n	8005d34 <_printf_common+0xa4>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	bf02      	ittt	eq
 8005d02:	68e5      	ldreq	r5, [r4, #12]
 8005d04:	6833      	ldreq	r3, [r6, #0]
 8005d06:	1aed      	subeq	r5, r5, r3
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	bf0c      	ite	eq
 8005d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d10:	2500      	movne	r5, #0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bfc4      	itt	gt
 8005d16:	1a9b      	subgt	r3, r3, r2
 8005d18:	18ed      	addgt	r5, r5, r3
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	341a      	adds	r4, #26
 8005d1e:	42b5      	cmp	r5, r6
 8005d20:	d11a      	bne.n	8005d58 <_printf_common+0xc8>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e008      	b.n	8005d38 <_printf_common+0xa8>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	47c8      	blx	r9
 8005d30:	3001      	adds	r0, #1
 8005d32:	d103      	bne.n	8005d3c <_printf_common+0xac>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	e7c6      	b.n	8005cce <_printf_common+0x3e>
 8005d40:	18e1      	adds	r1, r4, r3
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	2030      	movs	r0, #48	@ 0x30
 8005d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d4a:	4422      	add	r2, r4
 8005d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d54:	3302      	adds	r3, #2
 8005d56:	e7c7      	b.n	8005ce8 <_printf_common+0x58>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c8      	blx	r9
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0e6      	beq.n	8005d34 <_printf_common+0xa4>
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7d9      	b.n	8005d1e <_printf_common+0x8e>
	...

08005d6c <_printf_i>:
 8005d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	7e0f      	ldrb	r7, [r1, #24]
 8005d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d74:	2f78      	cmp	r7, #120	@ 0x78
 8005d76:	4691      	mov	r9, r2
 8005d78:	4680      	mov	r8, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d82:	d807      	bhi.n	8005d94 <_printf_i+0x28>
 8005d84:	2f62      	cmp	r7, #98	@ 0x62
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x32>
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f000 80d2 	beq.w	8005f32 <_printf_i+0x1c6>
 8005d8e:	2f58      	cmp	r7, #88	@ 0x58
 8005d90:	f000 80b9 	beq.w	8005f06 <_printf_i+0x19a>
 8005d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d9c:	e03a      	b.n	8005e14 <_printf_i+0xa8>
 8005d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005da2:	2b15      	cmp	r3, #21
 8005da4:	d8f6      	bhi.n	8005d94 <_printf_i+0x28>
 8005da6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dac <_printf_i+0x40>)
 8005da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005d95 	.word	0x08005d95
 8005db8:	08005d95 	.word	0x08005d95
 8005dbc:	08005d95 	.word	0x08005d95
 8005dc0:	08005d95 	.word	0x08005d95
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005d95 	.word	0x08005d95
 8005dcc:	08005d95 	.word	0x08005d95
 8005dd0:	08005d95 	.word	0x08005d95
 8005dd4:	08005d95 	.word	0x08005d95
 8005dd8:	08005f19 	.word	0x08005f19
 8005ddc:	08005e43 	.word	0x08005e43
 8005de0:	08005ed3 	.word	0x08005ed3
 8005de4:	08005d95 	.word	0x08005d95
 8005de8:	08005d95 	.word	0x08005d95
 8005dec:	08005f3b 	.word	0x08005f3b
 8005df0:	08005d95 	.word	0x08005d95
 8005df4:	08005e43 	.word	0x08005e43
 8005df8:	08005d95 	.word	0x08005d95
 8005dfc:	08005d95 	.word	0x08005d95
 8005e00:	08005edb 	.word	0x08005edb
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6032      	str	r2, [r6, #0]
 8005e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e14:	2301      	movs	r3, #1
 8005e16:	e09d      	b.n	8005f54 <_printf_i+0x1e8>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	6031      	str	r1, [r6, #0]
 8005e20:	0606      	lsls	r6, r0, #24
 8005e22:	d501      	bpl.n	8005e28 <_printf_i+0xbc>
 8005e24:	681d      	ldr	r5, [r3, #0]
 8005e26:	e003      	b.n	8005e30 <_printf_i+0xc4>
 8005e28:	0645      	lsls	r5, r0, #25
 8005e2a:	d5fb      	bpl.n	8005e24 <_printf_i+0xb8>
 8005e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	da03      	bge.n	8005e3c <_printf_i+0xd0>
 8005e34:	232d      	movs	r3, #45	@ 0x2d
 8005e36:	426d      	negs	r5, r5
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e3c:	4859      	ldr	r0, [pc, #356]	@ (8005fa4 <_printf_i+0x238>)
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e011      	b.n	8005e66 <_printf_i+0xfa>
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	0608      	lsls	r0, r1, #24
 8005e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e4c:	d402      	bmi.n	8005e54 <_printf_i+0xe8>
 8005e4e:	0649      	lsls	r1, r1, #25
 8005e50:	bf48      	it	mi
 8005e52:	b2ad      	uxthmi	r5, r5
 8005e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e56:	4853      	ldr	r0, [pc, #332]	@ (8005fa4 <_printf_i+0x238>)
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	bf14      	ite	ne
 8005e5c:	230a      	movne	r3, #10
 8005e5e:	2308      	moveq	r3, #8
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e66:	6866      	ldr	r6, [r4, #4]
 8005e68:	60a6      	str	r6, [r4, #8]
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90d      	cbnz	r5, 8005e7c <_printf_i+0x110>
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d04b      	beq.n	8005f14 <_printf_i+0x1a8>
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e82:	fb03 5711 	mls	r7, r3, r1, r5
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e8c:	462f      	mov	r7, r5
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460d      	mov	r5, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x112>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x144>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07df      	lsls	r7, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x144>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	@ 0x30
 8005ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eb0:	1b92      	subs	r2, r2, r6
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee6 	bl	8005c90 <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14a      	bne.n	8005f5e <_printf_i+0x1f2>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	4833      	ldr	r0, [pc, #204]	@ (8005fa8 <_printf_i+0x23c>)
 8005edc:	2778      	movs	r7, #120	@ 0x78
 8005ede:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6831      	ldr	r1, [r6, #0]
 8005ee6:	061f      	lsls	r7, r3, #24
 8005ee8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eec:	d402      	bmi.n	8005ef4 <_printf_i+0x188>
 8005eee:	065f      	lsls	r7, r3, #25
 8005ef0:	bf48      	it	mi
 8005ef2:	b2ad      	uxthmi	r5, r5
 8005ef4:	6031      	str	r1, [r6, #0]
 8005ef6:	07d9      	lsls	r1, r3, #31
 8005ef8:	bf44      	itt	mi
 8005efa:	f043 0320 	orrmi.w	r3, r3, #32
 8005efe:	6023      	strmi	r3, [r4, #0]
 8005f00:	b11d      	cbz	r5, 8005f0a <_printf_i+0x19e>
 8005f02:	2310      	movs	r3, #16
 8005f04:	e7ac      	b.n	8005e60 <_printf_i+0xf4>
 8005f06:	4827      	ldr	r0, [pc, #156]	@ (8005fa4 <_printf_i+0x238>)
 8005f08:	e7e9      	b.n	8005ede <_printf_i+0x172>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	f023 0320 	bic.w	r3, r3, #32
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	e7f6      	b.n	8005f02 <_printf_i+0x196>
 8005f14:	4616      	mov	r6, r2
 8005f16:	e7bd      	b.n	8005e94 <_printf_i+0x128>
 8005f18:	6833      	ldr	r3, [r6, #0]
 8005f1a:	6825      	ldr	r5, [r4, #0]
 8005f1c:	6961      	ldr	r1, [r4, #20]
 8005f1e:	1d18      	adds	r0, r3, #4
 8005f20:	6030      	str	r0, [r6, #0]
 8005f22:	062e      	lsls	r6, r5, #24
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0x1c0>
 8005f28:	6019      	str	r1, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0x1c6>
 8005f2c:	0668      	lsls	r0, r5, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0x1bc>
 8005f30:	8019      	strh	r1, [r3, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	4616      	mov	r6, r2
 8005f38:	e7bc      	b.n	8005eb4 <_printf_i+0x148>
 8005f3a:	6833      	ldr	r3, [r6, #0]
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	6032      	str	r2, [r6, #0]
 8005f40:	681e      	ldr	r6, [r3, #0]
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	2100      	movs	r1, #0
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7fa f942 	bl	80001d0 <memchr>
 8005f4c:	b108      	cbz	r0, 8005f52 <_printf_i+0x1e6>
 8005f4e:	1b80      	subs	r0, r0, r6
 8005f50:	6060      	str	r0, [r4, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	2300      	movs	r3, #0
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5c:	e7aa      	b.n	8005eb4 <_printf_i+0x148>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	4632      	mov	r2, r6
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d0ad      	beq.n	8005ec8 <_printf_i+0x15c>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	079b      	lsls	r3, r3, #30
 8005f70:	d413      	bmi.n	8005f9a <_printf_i+0x22e>
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	4298      	cmp	r0, r3
 8005f78:	bfb8      	it	lt
 8005f7a:	4618      	movlt	r0, r3
 8005f7c:	e7a6      	b.n	8005ecc <_printf_i+0x160>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4632      	mov	r2, r6
 8005f82:	4649      	mov	r1, r9
 8005f84:	4640      	mov	r0, r8
 8005f86:	47d0      	blx	sl
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d09d      	beq.n	8005ec8 <_printf_i+0x15c>
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	9903      	ldr	r1, [sp, #12]
 8005f92:	1a5b      	subs	r3, r3, r1
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dcf2      	bgt.n	8005f7e <_printf_i+0x212>
 8005f98:	e7eb      	b.n	8005f72 <_printf_i+0x206>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	f104 0619 	add.w	r6, r4, #25
 8005fa0:	e7f5      	b.n	8005f8e <_printf_i+0x222>
 8005fa2:	bf00      	nop
 8005fa4:	08008076 	.word	0x08008076
 8005fa8:	08008087 	.word	0x08008087

08005fac <std>:
 8005fac:	2300      	movs	r3, #0
 8005fae:	b510      	push	{r4, lr}
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fba:	6083      	str	r3, [r0, #8]
 8005fbc:	8181      	strh	r1, [r0, #12]
 8005fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fc0:	81c2      	strh	r2, [r0, #14]
 8005fc2:	6183      	str	r3, [r0, #24]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	305c      	adds	r0, #92	@ 0x5c
 8005fca:	f000 f8f4 	bl	80061b6 <memset>
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <std+0x58>)
 8005fd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <std+0x5c>)
 8005fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <std+0x60>)
 8005fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <std+0x64>)
 8005fdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <std+0x68>)
 8005fe0:	6224      	str	r4, [r4, #32]
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	d006      	beq.n	8005ff4 <std+0x48>
 8005fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fea:	4294      	cmp	r4, r2
 8005fec:	d002      	beq.n	8005ff4 <std+0x48>
 8005fee:	33d0      	adds	r3, #208	@ 0xd0
 8005ff0:	429c      	cmp	r4, r3
 8005ff2:	d105      	bne.n	8006000 <std+0x54>
 8005ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ffc:	f000 b958 	b.w	80062b0 <__retarget_lock_init_recursive>
 8006000:	bd10      	pop	{r4, pc}
 8006002:	bf00      	nop
 8006004:	08006131 	.word	0x08006131
 8006008:	08006153 	.word	0x08006153
 800600c:	0800618b 	.word	0x0800618b
 8006010:	080061af 	.word	0x080061af
 8006014:	200002cc 	.word	0x200002cc

08006018 <stdio_exit_handler>:
 8006018:	4a02      	ldr	r2, [pc, #8]	@ (8006024 <stdio_exit_handler+0xc>)
 800601a:	4903      	ldr	r1, [pc, #12]	@ (8006028 <stdio_exit_handler+0x10>)
 800601c:	4803      	ldr	r0, [pc, #12]	@ (800602c <stdio_exit_handler+0x14>)
 800601e:	f000 b869 	b.w	80060f4 <_fwalk_sglue>
 8006022:	bf00      	nop
 8006024:	2000000c 	.word	0x2000000c
 8006028:	0800795d 	.word	0x0800795d
 800602c:	2000001c 	.word	0x2000001c

08006030 <cleanup_stdio>:
 8006030:	6841      	ldr	r1, [r0, #4]
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <cleanup_stdio+0x34>)
 8006034:	4299      	cmp	r1, r3
 8006036:	b510      	push	{r4, lr}
 8006038:	4604      	mov	r4, r0
 800603a:	d001      	beq.n	8006040 <cleanup_stdio+0x10>
 800603c:	f001 fc8e 	bl	800795c <_fflush_r>
 8006040:	68a1      	ldr	r1, [r4, #8]
 8006042:	4b09      	ldr	r3, [pc, #36]	@ (8006068 <cleanup_stdio+0x38>)
 8006044:	4299      	cmp	r1, r3
 8006046:	d002      	beq.n	800604e <cleanup_stdio+0x1e>
 8006048:	4620      	mov	r0, r4
 800604a:	f001 fc87 	bl	800795c <_fflush_r>
 800604e:	68e1      	ldr	r1, [r4, #12]
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <cleanup_stdio+0x3c>)
 8006052:	4299      	cmp	r1, r3
 8006054:	d004      	beq.n	8006060 <cleanup_stdio+0x30>
 8006056:	4620      	mov	r0, r4
 8006058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605c:	f001 bc7e 	b.w	800795c <_fflush_r>
 8006060:	bd10      	pop	{r4, pc}
 8006062:	bf00      	nop
 8006064:	200002cc 	.word	0x200002cc
 8006068:	20000334 	.word	0x20000334
 800606c:	2000039c 	.word	0x2000039c

08006070 <global_stdio_init.part.0>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <global_stdio_init.part.0+0x30>)
 8006074:	4c0b      	ldr	r4, [pc, #44]	@ (80060a4 <global_stdio_init.part.0+0x34>)
 8006076:	4a0c      	ldr	r2, [pc, #48]	@ (80060a8 <global_stdio_init.part.0+0x38>)
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	4620      	mov	r0, r4
 800607c:	2200      	movs	r2, #0
 800607e:	2104      	movs	r1, #4
 8006080:	f7ff ff94 	bl	8005fac <std>
 8006084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006088:	2201      	movs	r2, #1
 800608a:	2109      	movs	r1, #9
 800608c:	f7ff ff8e 	bl	8005fac <std>
 8006090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006094:	2202      	movs	r2, #2
 8006096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800609a:	2112      	movs	r1, #18
 800609c:	f7ff bf86 	b.w	8005fac <std>
 80060a0:	20000404 	.word	0x20000404
 80060a4:	200002cc 	.word	0x200002cc
 80060a8:	08006019 	.word	0x08006019

080060ac <__sfp_lock_acquire>:
 80060ac:	4801      	ldr	r0, [pc, #4]	@ (80060b4 <__sfp_lock_acquire+0x8>)
 80060ae:	f000 b900 	b.w	80062b2 <__retarget_lock_acquire_recursive>
 80060b2:	bf00      	nop
 80060b4:	2000040d 	.word	0x2000040d

080060b8 <__sfp_lock_release>:
 80060b8:	4801      	ldr	r0, [pc, #4]	@ (80060c0 <__sfp_lock_release+0x8>)
 80060ba:	f000 b8fb 	b.w	80062b4 <__retarget_lock_release_recursive>
 80060be:	bf00      	nop
 80060c0:	2000040d 	.word	0x2000040d

080060c4 <__sinit>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	4604      	mov	r4, r0
 80060c8:	f7ff fff0 	bl	80060ac <__sfp_lock_acquire>
 80060cc:	6a23      	ldr	r3, [r4, #32]
 80060ce:	b11b      	cbz	r3, 80060d8 <__sinit+0x14>
 80060d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d4:	f7ff bff0 	b.w	80060b8 <__sfp_lock_release>
 80060d8:	4b04      	ldr	r3, [pc, #16]	@ (80060ec <__sinit+0x28>)
 80060da:	6223      	str	r3, [r4, #32]
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <__sinit+0x2c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f5      	bne.n	80060d0 <__sinit+0xc>
 80060e4:	f7ff ffc4 	bl	8006070 <global_stdio_init.part.0>
 80060e8:	e7f2      	b.n	80060d0 <__sinit+0xc>
 80060ea:	bf00      	nop
 80060ec:	08006031 	.word	0x08006031
 80060f0:	20000404 	.word	0x20000404

080060f4 <_fwalk_sglue>:
 80060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f8:	4607      	mov	r7, r0
 80060fa:	4688      	mov	r8, r1
 80060fc:	4614      	mov	r4, r2
 80060fe:	2600      	movs	r6, #0
 8006100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006104:	f1b9 0901 	subs.w	r9, r9, #1
 8006108:	d505      	bpl.n	8006116 <_fwalk_sglue+0x22>
 800610a:	6824      	ldr	r4, [r4, #0]
 800610c:	2c00      	cmp	r4, #0
 800610e:	d1f7      	bne.n	8006100 <_fwalk_sglue+0xc>
 8006110:	4630      	mov	r0, r6
 8006112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d907      	bls.n	800612c <_fwalk_sglue+0x38>
 800611c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006120:	3301      	adds	r3, #1
 8006122:	d003      	beq.n	800612c <_fwalk_sglue+0x38>
 8006124:	4629      	mov	r1, r5
 8006126:	4638      	mov	r0, r7
 8006128:	47c0      	blx	r8
 800612a:	4306      	orrs	r6, r0
 800612c:	3568      	adds	r5, #104	@ 0x68
 800612e:	e7e9      	b.n	8006104 <_fwalk_sglue+0x10>

08006130 <__sread>:
 8006130:	b510      	push	{r4, lr}
 8006132:	460c      	mov	r4, r1
 8006134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006138:	f000 f86c 	bl	8006214 <_read_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	bfab      	itete	ge
 8006140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006142:	89a3      	ldrhlt	r3, [r4, #12]
 8006144:	181b      	addge	r3, r3, r0
 8006146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800614a:	bfac      	ite	ge
 800614c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800614e:	81a3      	strhlt	r3, [r4, #12]
 8006150:	bd10      	pop	{r4, pc}

08006152 <__swrite>:
 8006152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	461f      	mov	r7, r3
 8006158:	898b      	ldrh	r3, [r1, #12]
 800615a:	05db      	lsls	r3, r3, #23
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	4616      	mov	r6, r2
 8006162:	d505      	bpl.n	8006170 <__swrite+0x1e>
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	2302      	movs	r3, #2
 800616a:	2200      	movs	r2, #0
 800616c:	f000 f840 	bl	80061f0 <_lseek_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	f000 b857 	b.w	8006238 <_write_r>

0800618a <__sseek>:
 800618a:	b510      	push	{r4, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006192:	f000 f82d 	bl	80061f0 <_lseek_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	bf15      	itete	ne
 800619c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800619e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061a6:	81a3      	strheq	r3, [r4, #12]
 80061a8:	bf18      	it	ne
 80061aa:	81a3      	strhne	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__sclose>:
 80061ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b2:	f000 b80d 	b.w	80061d0 <_close_r>

080061b6 <memset>:
 80061b6:	4402      	add	r2, r0
 80061b8:	4603      	mov	r3, r0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d100      	bne.n	80061c0 <memset+0xa>
 80061be:	4770      	bx	lr
 80061c0:	f803 1b01 	strb.w	r1, [r3], #1
 80061c4:	e7f9      	b.n	80061ba <memset+0x4>
	...

080061c8 <_localeconv_r>:
 80061c8:	4800      	ldr	r0, [pc, #0]	@ (80061cc <_localeconv_r+0x4>)
 80061ca:	4770      	bx	lr
 80061cc:	20000158 	.word	0x20000158

080061d0 <_close_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d06      	ldr	r5, [pc, #24]	@ (80061ec <_close_r+0x1c>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	f7fb f893 	bl	8001306 <_close>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_close_r+0x1a>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_close_r+0x1a>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000408 	.word	0x20000408

080061f0 <_lseek_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	@ (8006210 <_lseek_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fb f8a8 	bl	8001354 <_lseek>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_lseek_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_lseek_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	20000408 	.word	0x20000408

08006214 <_read_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	@ (8006234 <_read_r+0x20>)
 8006218:	4604      	mov	r4, r0
 800621a:	4608      	mov	r0, r1
 800621c:	4611      	mov	r1, r2
 800621e:	2200      	movs	r2, #0
 8006220:	602a      	str	r2, [r5, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f7fb f836 	bl	8001294 <_read>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_read_r+0x1e>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_read_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	20000408 	.word	0x20000408

08006238 <_write_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4d07      	ldr	r5, [pc, #28]	@ (8006258 <_write_r+0x20>)
 800623c:	4604      	mov	r4, r0
 800623e:	4608      	mov	r0, r1
 8006240:	4611      	mov	r1, r2
 8006242:	2200      	movs	r2, #0
 8006244:	602a      	str	r2, [r5, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	f7fb f841 	bl	80012ce <_write>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_write_r+0x1e>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_write_r+0x1e>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	20000408 	.word	0x20000408

0800625c <__errno>:
 800625c:	4b01      	ldr	r3, [pc, #4]	@ (8006264 <__errno+0x8>)
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000018 	.word	0x20000018

08006268 <__libc_init_array>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	4d0d      	ldr	r5, [pc, #52]	@ (80062a0 <__libc_init_array+0x38>)
 800626c:	4c0d      	ldr	r4, [pc, #52]	@ (80062a4 <__libc_init_array+0x3c>)
 800626e:	1b64      	subs	r4, r4, r5
 8006270:	10a4      	asrs	r4, r4, #2
 8006272:	2600      	movs	r6, #0
 8006274:	42a6      	cmp	r6, r4
 8006276:	d109      	bne.n	800628c <__libc_init_array+0x24>
 8006278:	4d0b      	ldr	r5, [pc, #44]	@ (80062a8 <__libc_init_array+0x40>)
 800627a:	4c0c      	ldr	r4, [pc, #48]	@ (80062ac <__libc_init_array+0x44>)
 800627c:	f001 febc 	bl	8007ff8 <_init>
 8006280:	1b64      	subs	r4, r4, r5
 8006282:	10a4      	asrs	r4, r4, #2
 8006284:	2600      	movs	r6, #0
 8006286:	42a6      	cmp	r6, r4
 8006288:	d105      	bne.n	8006296 <__libc_init_array+0x2e>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006290:	4798      	blx	r3
 8006292:	3601      	adds	r6, #1
 8006294:	e7ee      	b.n	8006274 <__libc_init_array+0xc>
 8006296:	f855 3b04 	ldr.w	r3, [r5], #4
 800629a:	4798      	blx	r3
 800629c:	3601      	adds	r6, #1
 800629e:	e7f2      	b.n	8006286 <__libc_init_array+0x1e>
 80062a0:	080083e0 	.word	0x080083e0
 80062a4:	080083e0 	.word	0x080083e0
 80062a8:	080083e0 	.word	0x080083e0
 80062ac:	080083e4 	.word	0x080083e4

080062b0 <__retarget_lock_init_recursive>:
 80062b0:	4770      	bx	lr

080062b2 <__retarget_lock_acquire_recursive>:
 80062b2:	4770      	bx	lr

080062b4 <__retarget_lock_release_recursive>:
 80062b4:	4770      	bx	lr

080062b6 <quorem>:
 80062b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	6903      	ldr	r3, [r0, #16]
 80062bc:	690c      	ldr	r4, [r1, #16]
 80062be:	42a3      	cmp	r3, r4
 80062c0:	4607      	mov	r7, r0
 80062c2:	db7e      	blt.n	80063c2 <quorem+0x10c>
 80062c4:	3c01      	subs	r4, #1
 80062c6:	f101 0814 	add.w	r8, r1, #20
 80062ca:	00a3      	lsls	r3, r4, #2
 80062cc:	f100 0514 	add.w	r5, r0, #20
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062e0:	3301      	adds	r3, #1
 80062e2:	429a      	cmp	r2, r3
 80062e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062ec:	d32e      	bcc.n	800634c <quorem+0x96>
 80062ee:	f04f 0a00 	mov.w	sl, #0
 80062f2:	46c4      	mov	ip, r8
 80062f4:	46ae      	mov	lr, r5
 80062f6:	46d3      	mov	fp, sl
 80062f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062fc:	b298      	uxth	r0, r3
 80062fe:	fb06 a000 	mla	r0, r6, r0, sl
 8006302:	0c02      	lsrs	r2, r0, #16
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	fb06 2303 	mla	r3, r6, r3, r2
 800630a:	f8de 2000 	ldr.w	r2, [lr]
 800630e:	b280      	uxth	r0, r0
 8006310:	b292      	uxth	r2, r2
 8006312:	1a12      	subs	r2, r2, r0
 8006314:	445a      	add	r2, fp
 8006316:	f8de 0000 	ldr.w	r0, [lr]
 800631a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800631e:	b29b      	uxth	r3, r3
 8006320:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006324:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006328:	b292      	uxth	r2, r2
 800632a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800632e:	45e1      	cmp	r9, ip
 8006330:	f84e 2b04 	str.w	r2, [lr], #4
 8006334:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006338:	d2de      	bcs.n	80062f8 <quorem+0x42>
 800633a:	9b00      	ldr	r3, [sp, #0]
 800633c:	58eb      	ldr	r3, [r5, r3]
 800633e:	b92b      	cbnz	r3, 800634c <quorem+0x96>
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	3b04      	subs	r3, #4
 8006344:	429d      	cmp	r5, r3
 8006346:	461a      	mov	r2, r3
 8006348:	d32f      	bcc.n	80063aa <quorem+0xf4>
 800634a:	613c      	str	r4, [r7, #16]
 800634c:	4638      	mov	r0, r7
 800634e:	f001 f979 	bl	8007644 <__mcmp>
 8006352:	2800      	cmp	r0, #0
 8006354:	db25      	blt.n	80063a2 <quorem+0xec>
 8006356:	4629      	mov	r1, r5
 8006358:	2000      	movs	r0, #0
 800635a:	f858 2b04 	ldr.w	r2, [r8], #4
 800635e:	f8d1 c000 	ldr.w	ip, [r1]
 8006362:	fa1f fe82 	uxth.w	lr, r2
 8006366:	fa1f f38c 	uxth.w	r3, ip
 800636a:	eba3 030e 	sub.w	r3, r3, lr
 800636e:	4403      	add	r3, r0
 8006370:	0c12      	lsrs	r2, r2, #16
 8006372:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006376:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800637a:	b29b      	uxth	r3, r3
 800637c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006380:	45c1      	cmp	r9, r8
 8006382:	f841 3b04 	str.w	r3, [r1], #4
 8006386:	ea4f 4022 	mov.w	r0, r2, asr #16
 800638a:	d2e6      	bcs.n	800635a <quorem+0xa4>
 800638c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006394:	b922      	cbnz	r2, 80063a0 <quorem+0xea>
 8006396:	3b04      	subs	r3, #4
 8006398:	429d      	cmp	r5, r3
 800639a:	461a      	mov	r2, r3
 800639c:	d30b      	bcc.n	80063b6 <quorem+0x100>
 800639e:	613c      	str	r4, [r7, #16]
 80063a0:	3601      	adds	r6, #1
 80063a2:	4630      	mov	r0, r6
 80063a4:	b003      	add	sp, #12
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1cb      	bne.n	800634a <quorem+0x94>
 80063b2:	3c01      	subs	r4, #1
 80063b4:	e7c6      	b.n	8006344 <quorem+0x8e>
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	3b04      	subs	r3, #4
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	d1ef      	bne.n	800639e <quorem+0xe8>
 80063be:	3c01      	subs	r4, #1
 80063c0:	e7ea      	b.n	8006398 <quorem+0xe2>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e7ee      	b.n	80063a4 <quorem+0xee>
	...

080063c8 <_dtoa_r>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	69c7      	ldr	r7, [r0, #28]
 80063ce:	b099      	sub	sp, #100	@ 0x64
 80063d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063d4:	ec55 4b10 	vmov	r4, r5, d0
 80063d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80063da:	9109      	str	r1, [sp, #36]	@ 0x24
 80063dc:	4683      	mov	fp, r0
 80063de:	920e      	str	r2, [sp, #56]	@ 0x38
 80063e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063e2:	b97f      	cbnz	r7, 8006404 <_dtoa_r+0x3c>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f000 fdfd 	bl	8006fe4 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80063f0:	b920      	cbnz	r0, 80063fc <_dtoa_r+0x34>
 80063f2:	4ba7      	ldr	r3, [pc, #668]	@ (8006690 <_dtoa_r+0x2c8>)
 80063f4:	21ef      	movs	r1, #239	@ 0xef
 80063f6:	48a7      	ldr	r0, [pc, #668]	@ (8006694 <_dtoa_r+0x2cc>)
 80063f8:	f001 faf6 	bl	80079e8 <__assert_func>
 80063fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006400:	6007      	str	r7, [r0, #0]
 8006402:	60c7      	str	r7, [r0, #12]
 8006404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	b159      	cbz	r1, 8006424 <_dtoa_r+0x5c>
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	604a      	str	r2, [r1, #4]
 8006410:	2301      	movs	r3, #1
 8006412:	4093      	lsls	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
 8006416:	4658      	mov	r0, fp
 8006418:	f000 feda 	bl	80071d0 <_Bfree>
 800641c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	1e2b      	subs	r3, r5, #0
 8006426:	bfb9      	ittee	lt
 8006428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800642c:	9303      	strlt	r3, [sp, #12]
 800642e:	2300      	movge	r3, #0
 8006430:	6033      	strge	r3, [r6, #0]
 8006432:	9f03      	ldr	r7, [sp, #12]
 8006434:	4b98      	ldr	r3, [pc, #608]	@ (8006698 <_dtoa_r+0x2d0>)
 8006436:	bfbc      	itt	lt
 8006438:	2201      	movlt	r2, #1
 800643a:	6032      	strlt	r2, [r6, #0]
 800643c:	43bb      	bics	r3, r7
 800643e:	d112      	bne.n	8006466 <_dtoa_r+0x9e>
 8006440:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006442:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800644c:	4323      	orrs	r3, r4
 800644e:	f000 854d 	beq.w	8006eec <_dtoa_r+0xb24>
 8006452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006454:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80066ac <_dtoa_r+0x2e4>
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 854f 	beq.w	8006efc <_dtoa_r+0xb34>
 800645e:	f10a 0303 	add.w	r3, sl, #3
 8006462:	f000 bd49 	b.w	8006ef8 <_dtoa_r+0xb30>
 8006466:	ed9d 7b02 	vldr	d7, [sp, #8]
 800646a:	2200      	movs	r2, #0
 800646c:	ec51 0b17 	vmov	r0, r1, d7
 8006470:	2300      	movs	r3, #0
 8006472:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006476:	f7fa fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800647a:	4680      	mov	r8, r0
 800647c:	b158      	cbz	r0, 8006496 <_dtoa_r+0xce>
 800647e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006480:	2301      	movs	r3, #1
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006486:	b113      	cbz	r3, 800648e <_dtoa_r+0xc6>
 8006488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800648a:	4b84      	ldr	r3, [pc, #528]	@ (800669c <_dtoa_r+0x2d4>)
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80066b0 <_dtoa_r+0x2e8>
 8006492:	f000 bd33 	b.w	8006efc <_dtoa_r+0xb34>
 8006496:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800649a:	aa16      	add	r2, sp, #88	@ 0x58
 800649c:	a917      	add	r1, sp, #92	@ 0x5c
 800649e:	4658      	mov	r0, fp
 80064a0:	f001 f980 	bl	80077a4 <__d2b>
 80064a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80064a8:	4681      	mov	r9, r0
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	d077      	beq.n	800659e <_dtoa_r+0x1d6>
 80064ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80064b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064c8:	4619      	mov	r1, r3
 80064ca:	2200      	movs	r2, #0
 80064cc:	4b74      	ldr	r3, [pc, #464]	@ (80066a0 <_dtoa_r+0x2d8>)
 80064ce:	f7f9 fedb 	bl	8000288 <__aeabi_dsub>
 80064d2:	a369      	add	r3, pc, #420	@ (adr r3, 8006678 <_dtoa_r+0x2b0>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	a368      	add	r3, pc, #416	@ (adr r3, 8006680 <_dtoa_r+0x2b8>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7f9 fed3 	bl	800028c <__adddf3>
 80064e6:	4604      	mov	r4, r0
 80064e8:	4630      	mov	r0, r6
 80064ea:	460d      	mov	r5, r1
 80064ec:	f7fa f81a 	bl	8000524 <__aeabi_i2d>
 80064f0:	a365      	add	r3, pc, #404	@ (adr r3, 8006688 <_dtoa_r+0x2c0>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f87f 	bl	80005f8 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7f9 fec3 	bl	800028c <__adddf3>
 8006506:	4604      	mov	r4, r0
 8006508:	460d      	mov	r5, r1
 800650a:	f7fa fb25 	bl	8000b58 <__aeabi_d2iz>
 800650e:	2200      	movs	r2, #0
 8006510:	4607      	mov	r7, r0
 8006512:	2300      	movs	r3, #0
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	f7fa fae0 	bl	8000adc <__aeabi_dcmplt>
 800651c:	b140      	cbz	r0, 8006530 <_dtoa_r+0x168>
 800651e:	4638      	mov	r0, r7
 8006520:	f7fa f800 	bl	8000524 <__aeabi_i2d>
 8006524:	4622      	mov	r2, r4
 8006526:	462b      	mov	r3, r5
 8006528:	f7fa face 	bl	8000ac8 <__aeabi_dcmpeq>
 800652c:	b900      	cbnz	r0, 8006530 <_dtoa_r+0x168>
 800652e:	3f01      	subs	r7, #1
 8006530:	2f16      	cmp	r7, #22
 8006532:	d851      	bhi.n	80065d8 <_dtoa_r+0x210>
 8006534:	4b5b      	ldr	r3, [pc, #364]	@ (80066a4 <_dtoa_r+0x2dc>)
 8006536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006542:	f7fa facb 	bl	8000adc <__aeabi_dcmplt>
 8006546:	2800      	cmp	r0, #0
 8006548:	d048      	beq.n	80065dc <_dtoa_r+0x214>
 800654a:	3f01      	subs	r7, #1
 800654c:	2300      	movs	r3, #0
 800654e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006552:	1b9b      	subs	r3, r3, r6
 8006554:	1e5a      	subs	r2, r3, #1
 8006556:	bf44      	itt	mi
 8006558:	f1c3 0801 	rsbmi	r8, r3, #1
 800655c:	2300      	movmi	r3, #0
 800655e:	9208      	str	r2, [sp, #32]
 8006560:	bf54      	ite	pl
 8006562:	f04f 0800 	movpl.w	r8, #0
 8006566:	9308      	strmi	r3, [sp, #32]
 8006568:	2f00      	cmp	r7, #0
 800656a:	db39      	blt.n	80065e0 <_dtoa_r+0x218>
 800656c:	9b08      	ldr	r3, [sp, #32]
 800656e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006570:	443b      	add	r3, r7
 8006572:	9308      	str	r3, [sp, #32]
 8006574:	2300      	movs	r3, #0
 8006576:	930a      	str	r3, [sp, #40]	@ 0x28
 8006578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657a:	2b09      	cmp	r3, #9
 800657c:	d864      	bhi.n	8006648 <_dtoa_r+0x280>
 800657e:	2b05      	cmp	r3, #5
 8006580:	bfc4      	itt	gt
 8006582:	3b04      	subgt	r3, #4
 8006584:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006588:	f1a3 0302 	sub.w	r3, r3, #2
 800658c:	bfcc      	ite	gt
 800658e:	2400      	movgt	r4, #0
 8006590:	2401      	movle	r4, #1
 8006592:	2b03      	cmp	r3, #3
 8006594:	d863      	bhi.n	800665e <_dtoa_r+0x296>
 8006596:	e8df f003 	tbb	[pc, r3]
 800659a:	372a      	.short	0x372a
 800659c:	5535      	.short	0x5535
 800659e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80065a2:	441e      	add	r6, r3
 80065a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	bfc1      	itttt	gt
 80065ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065b0:	409f      	lslgt	r7, r3
 80065b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065ba:	bfd6      	itet	le
 80065bc:	f1c3 0320 	rsble	r3, r3, #32
 80065c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80065c4:	fa04 f003 	lslle.w	r0, r4, r3
 80065c8:	f7f9 ff9c 	bl	8000504 <__aeabi_ui2d>
 80065cc:	2201      	movs	r2, #1
 80065ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065d2:	3e01      	subs	r6, #1
 80065d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80065d6:	e777      	b.n	80064c8 <_dtoa_r+0x100>
 80065d8:	2301      	movs	r3, #1
 80065da:	e7b8      	b.n	800654e <_dtoa_r+0x186>
 80065dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80065de:	e7b7      	b.n	8006550 <_dtoa_r+0x188>
 80065e0:	427b      	negs	r3, r7
 80065e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065e4:	2300      	movs	r3, #0
 80065e6:	eba8 0807 	sub.w	r8, r8, r7
 80065ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065ec:	e7c4      	b.n	8006578 <_dtoa_r+0x1b0>
 80065ee:	2300      	movs	r3, #0
 80065f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc35      	bgt.n	8006664 <_dtoa_r+0x29c>
 80065f8:	2301      	movs	r3, #1
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	9307      	str	r3, [sp, #28]
 80065fe:	461a      	mov	r2, r3
 8006600:	920e      	str	r2, [sp, #56]	@ 0x38
 8006602:	e00b      	b.n	800661c <_dtoa_r+0x254>
 8006604:	2301      	movs	r3, #1
 8006606:	e7f3      	b.n	80065f0 <_dtoa_r+0x228>
 8006608:	2300      	movs	r3, #0
 800660a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800660c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	9307      	str	r3, [sp, #28]
 8006618:	bfb8      	it	lt
 800661a:	2301      	movlt	r3, #1
 800661c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006620:	2100      	movs	r1, #0
 8006622:	2204      	movs	r2, #4
 8006624:	f102 0514 	add.w	r5, r2, #20
 8006628:	429d      	cmp	r5, r3
 800662a:	d91f      	bls.n	800666c <_dtoa_r+0x2a4>
 800662c:	6041      	str	r1, [r0, #4]
 800662e:	4658      	mov	r0, fp
 8006630:	f000 fd8e 	bl	8007150 <_Balloc>
 8006634:	4682      	mov	sl, r0
 8006636:	2800      	cmp	r0, #0
 8006638:	d13c      	bne.n	80066b4 <_dtoa_r+0x2ec>
 800663a:	4b1b      	ldr	r3, [pc, #108]	@ (80066a8 <_dtoa_r+0x2e0>)
 800663c:	4602      	mov	r2, r0
 800663e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006642:	e6d8      	b.n	80063f6 <_dtoa_r+0x2e>
 8006644:	2301      	movs	r3, #1
 8006646:	e7e0      	b.n	800660a <_dtoa_r+0x242>
 8006648:	2401      	movs	r4, #1
 800664a:	2300      	movs	r3, #0
 800664c:	9309      	str	r3, [sp, #36]	@ 0x24
 800664e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	9307      	str	r3, [sp, #28]
 8006658:	2200      	movs	r2, #0
 800665a:	2312      	movs	r3, #18
 800665c:	e7d0      	b.n	8006600 <_dtoa_r+0x238>
 800665e:	2301      	movs	r3, #1
 8006660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006662:	e7f5      	b.n	8006650 <_dtoa_r+0x288>
 8006664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	e7d7      	b.n	800661c <_dtoa_r+0x254>
 800666c:	3101      	adds	r1, #1
 800666e:	0052      	lsls	r2, r2, #1
 8006670:	e7d8      	b.n	8006624 <_dtoa_r+0x25c>
 8006672:	bf00      	nop
 8006674:	f3af 8000 	nop.w
 8006678:	636f4361 	.word	0x636f4361
 800667c:	3fd287a7 	.word	0x3fd287a7
 8006680:	8b60c8b3 	.word	0x8b60c8b3
 8006684:	3fc68a28 	.word	0x3fc68a28
 8006688:	509f79fb 	.word	0x509f79fb
 800668c:	3fd34413 	.word	0x3fd34413
 8006690:	080080a5 	.word	0x080080a5
 8006694:	080080bc 	.word	0x080080bc
 8006698:	7ff00000 	.word	0x7ff00000
 800669c:	08008075 	.word	0x08008075
 80066a0:	3ff80000 	.word	0x3ff80000
 80066a4:	080081b8 	.word	0x080081b8
 80066a8:	08008114 	.word	0x08008114
 80066ac:	080080a1 	.word	0x080080a1
 80066b0:	08008074 	.word	0x08008074
 80066b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066b8:	6018      	str	r0, [r3, #0]
 80066ba:	9b07      	ldr	r3, [sp, #28]
 80066bc:	2b0e      	cmp	r3, #14
 80066be:	f200 80a4 	bhi.w	800680a <_dtoa_r+0x442>
 80066c2:	2c00      	cmp	r4, #0
 80066c4:	f000 80a1 	beq.w	800680a <_dtoa_r+0x442>
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	dd33      	ble.n	8006734 <_dtoa_r+0x36c>
 80066cc:	4bad      	ldr	r3, [pc, #692]	@ (8006984 <_dtoa_r+0x5bc>)
 80066ce:	f007 020f 	and.w	r2, r7, #15
 80066d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066d6:	ed93 7b00 	vldr	d7, [r3]
 80066da:	05f8      	lsls	r0, r7, #23
 80066dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066e4:	d516      	bpl.n	8006714 <_dtoa_r+0x34c>
 80066e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006988 <_dtoa_r+0x5c0>)
 80066e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066f0:	f7fa f8ac 	bl	800084c <__aeabi_ddiv>
 80066f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f8:	f004 040f 	and.w	r4, r4, #15
 80066fc:	2603      	movs	r6, #3
 80066fe:	4da2      	ldr	r5, [pc, #648]	@ (8006988 <_dtoa_r+0x5c0>)
 8006700:	b954      	cbnz	r4, 8006718 <_dtoa_r+0x350>
 8006702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670a:	f7fa f89f 	bl	800084c <__aeabi_ddiv>
 800670e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006712:	e028      	b.n	8006766 <_dtoa_r+0x39e>
 8006714:	2602      	movs	r6, #2
 8006716:	e7f2      	b.n	80066fe <_dtoa_r+0x336>
 8006718:	07e1      	lsls	r1, r4, #31
 800671a:	d508      	bpl.n	800672e <_dtoa_r+0x366>
 800671c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006724:	f7f9 ff68 	bl	80005f8 <__aeabi_dmul>
 8006728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800672c:	3601      	adds	r6, #1
 800672e:	1064      	asrs	r4, r4, #1
 8006730:	3508      	adds	r5, #8
 8006732:	e7e5      	b.n	8006700 <_dtoa_r+0x338>
 8006734:	f000 80d2 	beq.w	80068dc <_dtoa_r+0x514>
 8006738:	427c      	negs	r4, r7
 800673a:	4b92      	ldr	r3, [pc, #584]	@ (8006984 <_dtoa_r+0x5bc>)
 800673c:	4d92      	ldr	r5, [pc, #584]	@ (8006988 <_dtoa_r+0x5c0>)
 800673e:	f004 020f 	and.w	r2, r4, #15
 8006742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800674e:	f7f9 ff53 	bl	80005f8 <__aeabi_dmul>
 8006752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006756:	1124      	asrs	r4, r4, #4
 8006758:	2300      	movs	r3, #0
 800675a:	2602      	movs	r6, #2
 800675c:	2c00      	cmp	r4, #0
 800675e:	f040 80b2 	bne.w	80068c6 <_dtoa_r+0x4fe>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1d3      	bne.n	800670e <_dtoa_r+0x346>
 8006766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006768:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80b7 	beq.w	80068e0 <_dtoa_r+0x518>
 8006772:	4b86      	ldr	r3, [pc, #536]	@ (800698c <_dtoa_r+0x5c4>)
 8006774:	2200      	movs	r2, #0
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f7fa f9af 	bl	8000adc <__aeabi_dcmplt>
 800677e:	2800      	cmp	r0, #0
 8006780:	f000 80ae 	beq.w	80068e0 <_dtoa_r+0x518>
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80aa 	beq.w	80068e0 <_dtoa_r+0x518>
 800678c:	9b00      	ldr	r3, [sp, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	dd37      	ble.n	8006802 <_dtoa_r+0x43a>
 8006792:	1e7b      	subs	r3, r7, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	4620      	mov	r0, r4
 8006798:	4b7d      	ldr	r3, [pc, #500]	@ (8006990 <_dtoa_r+0x5c8>)
 800679a:	2200      	movs	r2, #0
 800679c:	4629      	mov	r1, r5
 800679e:	f7f9 ff2b 	bl	80005f8 <__aeabi_dmul>
 80067a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a6:	9c00      	ldr	r4, [sp, #0]
 80067a8:	3601      	adds	r6, #1
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7f9 feba 	bl	8000524 <__aeabi_i2d>
 80067b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067b4:	f7f9 ff20 	bl	80005f8 <__aeabi_dmul>
 80067b8:	4b76      	ldr	r3, [pc, #472]	@ (8006994 <_dtoa_r+0x5cc>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	f7f9 fd66 	bl	800028c <__adddf3>
 80067c0:	4605      	mov	r5, r0
 80067c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067c6:	2c00      	cmp	r4, #0
 80067c8:	f040 808d 	bne.w	80068e6 <_dtoa_r+0x51e>
 80067cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d0:	4b71      	ldr	r3, [pc, #452]	@ (8006998 <_dtoa_r+0x5d0>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	f7f9 fd58 	bl	8000288 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e0:	462a      	mov	r2, r5
 80067e2:	4633      	mov	r3, r6
 80067e4:	f7fa f998 	bl	8000b18 <__aeabi_dcmpgt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 828b 	bne.w	8006d04 <_dtoa_r+0x93c>
 80067ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f2:	462a      	mov	r2, r5
 80067f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067f8:	f7fa f970 	bl	8000adc <__aeabi_dcmplt>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f040 8128 	bne.w	8006a52 <_dtoa_r+0x68a>
 8006802:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006806:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800680a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800680c:	2b00      	cmp	r3, #0
 800680e:	f2c0 815a 	blt.w	8006ac6 <_dtoa_r+0x6fe>
 8006812:	2f0e      	cmp	r7, #14
 8006814:	f300 8157 	bgt.w	8006ac6 <_dtoa_r+0x6fe>
 8006818:	4b5a      	ldr	r3, [pc, #360]	@ (8006984 <_dtoa_r+0x5bc>)
 800681a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800681e:	ed93 7b00 	vldr	d7, [r3]
 8006822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	ed8d 7b00 	vstr	d7, [sp]
 800682a:	da03      	bge.n	8006834 <_dtoa_r+0x46c>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f340 8101 	ble.w	8006a36 <_dtoa_r+0x66e>
 8006834:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006838:	4656      	mov	r6, sl
 800683a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800683e:	4620      	mov	r0, r4
 8006840:	4629      	mov	r1, r5
 8006842:	f7fa f803 	bl	800084c <__aeabi_ddiv>
 8006846:	f7fa f987 	bl	8000b58 <__aeabi_d2iz>
 800684a:	4680      	mov	r8, r0
 800684c:	f7f9 fe6a 	bl	8000524 <__aeabi_i2d>
 8006850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006854:	f7f9 fed0 	bl	80005f8 <__aeabi_dmul>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4620      	mov	r0, r4
 800685e:	4629      	mov	r1, r5
 8006860:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006864:	f7f9 fd10 	bl	8000288 <__aeabi_dsub>
 8006868:	f806 4b01 	strb.w	r4, [r6], #1
 800686c:	9d07      	ldr	r5, [sp, #28]
 800686e:	eba6 040a 	sub.w	r4, r6, sl
 8006872:	42a5      	cmp	r5, r4
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	f040 8117 	bne.w	8006aaa <_dtoa_r+0x6e2>
 800687c:	f7f9 fd06 	bl	800028c <__adddf3>
 8006880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006884:	4604      	mov	r4, r0
 8006886:	460d      	mov	r5, r1
 8006888:	f7fa f946 	bl	8000b18 <__aeabi_dcmpgt>
 800688c:	2800      	cmp	r0, #0
 800688e:	f040 80f9 	bne.w	8006a84 <_dtoa_r+0x6bc>
 8006892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006896:	4620      	mov	r0, r4
 8006898:	4629      	mov	r1, r5
 800689a:	f7fa f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800689e:	b118      	cbz	r0, 80068a8 <_dtoa_r+0x4e0>
 80068a0:	f018 0f01 	tst.w	r8, #1
 80068a4:	f040 80ee 	bne.w	8006a84 <_dtoa_r+0x6bc>
 80068a8:	4649      	mov	r1, r9
 80068aa:	4658      	mov	r0, fp
 80068ac:	f000 fc90 	bl	80071d0 <_Bfree>
 80068b0:	2300      	movs	r3, #0
 80068b2:	7033      	strb	r3, [r6, #0]
 80068b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068b6:	3701      	adds	r7, #1
 80068b8:	601f      	str	r7, [r3, #0]
 80068ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 831d 	beq.w	8006efc <_dtoa_r+0xb34>
 80068c2:	601e      	str	r6, [r3, #0]
 80068c4:	e31a      	b.n	8006efc <_dtoa_r+0xb34>
 80068c6:	07e2      	lsls	r2, r4, #31
 80068c8:	d505      	bpl.n	80068d6 <_dtoa_r+0x50e>
 80068ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	3601      	adds	r6, #1
 80068d4:	2301      	movs	r3, #1
 80068d6:	1064      	asrs	r4, r4, #1
 80068d8:	3508      	adds	r5, #8
 80068da:	e73f      	b.n	800675c <_dtoa_r+0x394>
 80068dc:	2602      	movs	r6, #2
 80068de:	e742      	b.n	8006766 <_dtoa_r+0x39e>
 80068e0:	9c07      	ldr	r4, [sp, #28]
 80068e2:	9704      	str	r7, [sp, #16]
 80068e4:	e761      	b.n	80067aa <_dtoa_r+0x3e2>
 80068e6:	4b27      	ldr	r3, [pc, #156]	@ (8006984 <_dtoa_r+0x5bc>)
 80068e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068f2:	4454      	add	r4, sl
 80068f4:	2900      	cmp	r1, #0
 80068f6:	d053      	beq.n	80069a0 <_dtoa_r+0x5d8>
 80068f8:	4928      	ldr	r1, [pc, #160]	@ (800699c <_dtoa_r+0x5d4>)
 80068fa:	2000      	movs	r0, #0
 80068fc:	f7f9 ffa6 	bl	800084c <__aeabi_ddiv>
 8006900:	4633      	mov	r3, r6
 8006902:	462a      	mov	r2, r5
 8006904:	f7f9 fcc0 	bl	8000288 <__aeabi_dsub>
 8006908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800690c:	4656      	mov	r6, sl
 800690e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006912:	f7fa f921 	bl	8000b58 <__aeabi_d2iz>
 8006916:	4605      	mov	r5, r0
 8006918:	f7f9 fe04 	bl	8000524 <__aeabi_i2d>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006924:	f7f9 fcb0 	bl	8000288 <__aeabi_dsub>
 8006928:	3530      	adds	r5, #48	@ 0x30
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006932:	f806 5b01 	strb.w	r5, [r6], #1
 8006936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800693a:	f7fa f8cf 	bl	8000adc <__aeabi_dcmplt>
 800693e:	2800      	cmp	r0, #0
 8006940:	d171      	bne.n	8006a26 <_dtoa_r+0x65e>
 8006942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006946:	4911      	ldr	r1, [pc, #68]	@ (800698c <_dtoa_r+0x5c4>)
 8006948:	2000      	movs	r0, #0
 800694a:	f7f9 fc9d 	bl	8000288 <__aeabi_dsub>
 800694e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006952:	f7fa f8c3 	bl	8000adc <__aeabi_dcmplt>
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8095 	bne.w	8006a86 <_dtoa_r+0x6be>
 800695c:	42a6      	cmp	r6, r4
 800695e:	f43f af50 	beq.w	8006802 <_dtoa_r+0x43a>
 8006962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006966:	4b0a      	ldr	r3, [pc, #40]	@ (8006990 <_dtoa_r+0x5c8>)
 8006968:	2200      	movs	r2, #0
 800696a:	f7f9 fe45 	bl	80005f8 <__aeabi_dmul>
 800696e:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <_dtoa_r+0x5c8>)
 8006970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006974:	2200      	movs	r2, #0
 8006976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800697a:	f7f9 fe3d 	bl	80005f8 <__aeabi_dmul>
 800697e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006982:	e7c4      	b.n	800690e <_dtoa_r+0x546>
 8006984:	080081b8 	.word	0x080081b8
 8006988:	08008190 	.word	0x08008190
 800698c:	3ff00000 	.word	0x3ff00000
 8006990:	40240000 	.word	0x40240000
 8006994:	401c0000 	.word	0x401c0000
 8006998:	40140000 	.word	0x40140000
 800699c:	3fe00000 	.word	0x3fe00000
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7f9 fe28 	bl	80005f8 <__aeabi_dmul>
 80069a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80069ae:	4656      	mov	r6, sl
 80069b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b4:	f7fa f8d0 	bl	8000b58 <__aeabi_d2iz>
 80069b8:	4605      	mov	r5, r0
 80069ba:	f7f9 fdb3 	bl	8000524 <__aeabi_i2d>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069c6:	f7f9 fc5f 	bl	8000288 <__aeabi_dsub>
 80069ca:	3530      	adds	r5, #48	@ 0x30
 80069cc:	f806 5b01 	strb.w	r5, [r6], #1
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	42a6      	cmp	r6, r4
 80069d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	d124      	bne.n	8006a2a <_dtoa_r+0x662>
 80069e0:	4bac      	ldr	r3, [pc, #688]	@ (8006c94 <_dtoa_r+0x8cc>)
 80069e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069e6:	f7f9 fc51 	bl	800028c <__adddf3>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069f2:	f7fa f891 	bl	8000b18 <__aeabi_dcmpgt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d145      	bne.n	8006a86 <_dtoa_r+0x6be>
 80069fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069fe:	49a5      	ldr	r1, [pc, #660]	@ (8006c94 <_dtoa_r+0x8cc>)
 8006a00:	2000      	movs	r0, #0
 8006a02:	f7f9 fc41 	bl	8000288 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0e:	f7fa f865 	bl	8000adc <__aeabi_dcmplt>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	f43f aef5 	beq.w	8006802 <_dtoa_r+0x43a>
 8006a18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a1a:	1e73      	subs	r3, r6, #1
 8006a1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a22:	2b30      	cmp	r3, #48	@ 0x30
 8006a24:	d0f8      	beq.n	8006a18 <_dtoa_r+0x650>
 8006a26:	9f04      	ldr	r7, [sp, #16]
 8006a28:	e73e      	b.n	80068a8 <_dtoa_r+0x4e0>
 8006a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8006c98 <_dtoa_r+0x8d0>)
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a34:	e7bc      	b.n	80069b0 <_dtoa_r+0x5e8>
 8006a36:	d10c      	bne.n	8006a52 <_dtoa_r+0x68a>
 8006a38:	4b98      	ldr	r3, [pc, #608]	@ (8006c9c <_dtoa_r+0x8d4>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a40:	f7f9 fdda 	bl	80005f8 <__aeabi_dmul>
 8006a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a48:	f7fa f85c 	bl	8000b04 <__aeabi_dcmpge>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f000 8157 	beq.w	8006d00 <_dtoa_r+0x938>
 8006a52:	2400      	movs	r4, #0
 8006a54:	4625      	mov	r5, r4
 8006a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	4656      	mov	r6, sl
 8006a5e:	2700      	movs	r7, #0
 8006a60:	4621      	mov	r1, r4
 8006a62:	4658      	mov	r0, fp
 8006a64:	f000 fbb4 	bl	80071d0 <_Bfree>
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d0dc      	beq.n	8006a26 <_dtoa_r+0x65e>
 8006a6c:	b12f      	cbz	r7, 8006a7a <_dtoa_r+0x6b2>
 8006a6e:	42af      	cmp	r7, r5
 8006a70:	d003      	beq.n	8006a7a <_dtoa_r+0x6b2>
 8006a72:	4639      	mov	r1, r7
 8006a74:	4658      	mov	r0, fp
 8006a76:	f000 fbab 	bl	80071d0 <_Bfree>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f000 fba7 	bl	80071d0 <_Bfree>
 8006a82:	e7d0      	b.n	8006a26 <_dtoa_r+0x65e>
 8006a84:	9704      	str	r7, [sp, #16]
 8006a86:	4633      	mov	r3, r6
 8006a88:	461e      	mov	r6, r3
 8006a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a8e:	2a39      	cmp	r2, #57	@ 0x39
 8006a90:	d107      	bne.n	8006aa2 <_dtoa_r+0x6da>
 8006a92:	459a      	cmp	sl, r3
 8006a94:	d1f8      	bne.n	8006a88 <_dtoa_r+0x6c0>
 8006a96:	9a04      	ldr	r2, [sp, #16]
 8006a98:	3201      	adds	r2, #1
 8006a9a:	9204      	str	r2, [sp, #16]
 8006a9c:	2230      	movs	r2, #48	@ 0x30
 8006a9e:	f88a 2000 	strb.w	r2, [sl]
 8006aa2:	781a      	ldrb	r2, [r3, #0]
 8006aa4:	3201      	adds	r2, #1
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e7bd      	b.n	8006a26 <_dtoa_r+0x65e>
 8006aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8006c98 <_dtoa_r+0x8d0>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	f7f9 fda3 	bl	80005f8 <__aeabi_dmul>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	460d      	mov	r5, r1
 8006aba:	f7fa f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f aebb 	beq.w	800683a <_dtoa_r+0x472>
 8006ac4:	e6f0      	b.n	80068a8 <_dtoa_r+0x4e0>
 8006ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	f000 80db 	beq.w	8006c84 <_dtoa_r+0x8bc>
 8006ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad0:	2a01      	cmp	r2, #1
 8006ad2:	f300 80bf 	bgt.w	8006c54 <_dtoa_r+0x88c>
 8006ad6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ad8:	2a00      	cmp	r2, #0
 8006ada:	f000 80b7 	beq.w	8006c4c <_dtoa_r+0x884>
 8006ade:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ae2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ae4:	4646      	mov	r6, r8
 8006ae6:	9a08      	ldr	r2, [sp, #32]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	441a      	add	r2, r3
 8006aec:	4658      	mov	r0, fp
 8006aee:	4498      	add	r8, r3
 8006af0:	9208      	str	r2, [sp, #32]
 8006af2:	f000 fc21 	bl	8007338 <__i2b>
 8006af6:	4605      	mov	r5, r0
 8006af8:	b15e      	cbz	r6, 8006b12 <_dtoa_r+0x74a>
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd08      	ble.n	8006b12 <_dtoa_r+0x74a>
 8006b00:	42b3      	cmp	r3, r6
 8006b02:	9a08      	ldr	r2, [sp, #32]
 8006b04:	bfa8      	it	ge
 8006b06:	4633      	movge	r3, r6
 8006b08:	eba8 0803 	sub.w	r8, r8, r3
 8006b0c:	1af6      	subs	r6, r6, r3
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	9308      	str	r3, [sp, #32]
 8006b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b14:	b1f3      	cbz	r3, 8006b54 <_dtoa_r+0x78c>
 8006b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80b7 	beq.w	8006c8c <_dtoa_r+0x8c4>
 8006b1e:	b18c      	cbz	r4, 8006b44 <_dtoa_r+0x77c>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4622      	mov	r2, r4
 8006b24:	4658      	mov	r0, fp
 8006b26:	f000 fcc7 	bl	80074b8 <__pow5mult>
 8006b2a:	464a      	mov	r2, r9
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4658      	mov	r0, fp
 8006b32:	f000 fc17 	bl	8007364 <__multiply>
 8006b36:	4649      	mov	r1, r9
 8006b38:	9004      	str	r0, [sp, #16]
 8006b3a:	4658      	mov	r0, fp
 8006b3c:	f000 fb48 	bl	80071d0 <_Bfree>
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	4699      	mov	r9, r3
 8006b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b46:	1b1a      	subs	r2, r3, r4
 8006b48:	d004      	beq.n	8006b54 <_dtoa_r+0x78c>
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f000 fcb3 	bl	80074b8 <__pow5mult>
 8006b52:	4681      	mov	r9, r0
 8006b54:	2101      	movs	r1, #1
 8006b56:	4658      	mov	r0, fp
 8006b58:	f000 fbee 	bl	8007338 <__i2b>
 8006b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b5e:	4604      	mov	r4, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 81cf 	beq.w	8006f04 <_dtoa_r+0xb3c>
 8006b66:	461a      	mov	r2, r3
 8006b68:	4601      	mov	r1, r0
 8006b6a:	4658      	mov	r0, fp
 8006b6c:	f000 fca4 	bl	80074b8 <__pow5mult>
 8006b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	4604      	mov	r4, r0
 8006b76:	f300 8095 	bgt.w	8006ca4 <_dtoa_r+0x8dc>
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 8087 	bne.w	8006c90 <_dtoa_r+0x8c8>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 8089 	bne.w	8006ca0 <_dtoa_r+0x8d8>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b94:	0d1b      	lsrs	r3, r3, #20
 8006b96:	051b      	lsls	r3, r3, #20
 8006b98:	b12b      	cbz	r3, 8006ba6 <_dtoa_r+0x7de>
 8006b9a:	9b08      	ldr	r3, [sp, #32]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	9308      	str	r3, [sp, #32]
 8006ba0:	f108 0801 	add.w	r8, r8, #1
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 81b0 	beq.w	8006f10 <_dtoa_r+0xb48>
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bb6:	6918      	ldr	r0, [r3, #16]
 8006bb8:	f000 fb72 	bl	80072a0 <__hi0bits>
 8006bbc:	f1c0 0020 	rsb	r0, r0, #32
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	4418      	add	r0, r3
 8006bc4:	f010 001f 	ands.w	r0, r0, #31
 8006bc8:	d077      	beq.n	8006cba <_dtoa_r+0x8f2>
 8006bca:	f1c0 0320 	rsb	r3, r0, #32
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	dd6b      	ble.n	8006caa <_dtoa_r+0x8e2>
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	f1c0 001c 	rsb	r0, r0, #28
 8006bd8:	4403      	add	r3, r0
 8006bda:	4480      	add	r8, r0
 8006bdc:	4406      	add	r6, r0
 8006bde:	9308      	str	r3, [sp, #32]
 8006be0:	f1b8 0f00 	cmp.w	r8, #0
 8006be4:	dd05      	ble.n	8006bf2 <_dtoa_r+0x82a>
 8006be6:	4649      	mov	r1, r9
 8006be8:	4642      	mov	r2, r8
 8006bea:	4658      	mov	r0, fp
 8006bec:	f000 fcbe 	bl	800756c <__lshift>
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dd05      	ble.n	8006c04 <_dtoa_r+0x83c>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4658      	mov	r0, fp
 8006bfe:	f000 fcb5 	bl	800756c <__lshift>
 8006c02:	4604      	mov	r4, r0
 8006c04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d059      	beq.n	8006cbe <_dtoa_r+0x8f6>
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	f000 fd19 	bl	8007644 <__mcmp>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	da53      	bge.n	8006cbe <_dtoa_r+0x8f6>
 8006c16:	1e7b      	subs	r3, r7, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	220a      	movs	r2, #10
 8006c20:	4658      	mov	r0, fp
 8006c22:	f000 faf7 	bl	8007214 <__multadd>
 8006c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c28:	4681      	mov	r9, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8172 	beq.w	8006f14 <_dtoa_r+0xb4c>
 8006c30:	2300      	movs	r3, #0
 8006c32:	4629      	mov	r1, r5
 8006c34:	220a      	movs	r2, #10
 8006c36:	4658      	mov	r0, fp
 8006c38:	f000 faec 	bl	8007214 <__multadd>
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	4605      	mov	r5, r0
 8006c42:	dc67      	bgt.n	8006d14 <_dtoa_r+0x94c>
 8006c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	dc41      	bgt.n	8006cce <_dtoa_r+0x906>
 8006c4a:	e063      	b.n	8006d14 <_dtoa_r+0x94c>
 8006c4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c52:	e746      	b.n	8006ae2 <_dtoa_r+0x71a>
 8006c54:	9b07      	ldr	r3, [sp, #28]
 8006c56:	1e5c      	subs	r4, r3, #1
 8006c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	bfbf      	itttt	lt
 8006c5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c64:	1ae3      	sublt	r3, r4, r3
 8006c66:	bfb4      	ite	lt
 8006c68:	18d2      	addlt	r2, r2, r3
 8006c6a:	1b1c      	subge	r4, r3, r4
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	bfbc      	itt	lt
 8006c70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c72:	2400      	movlt	r4, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfb5      	itete	lt
 8006c78:	eba8 0603 	sublt.w	r6, r8, r3
 8006c7c:	9b07      	ldrge	r3, [sp, #28]
 8006c7e:	2300      	movlt	r3, #0
 8006c80:	4646      	movge	r6, r8
 8006c82:	e730      	b.n	8006ae6 <_dtoa_r+0x71e>
 8006c84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c88:	4646      	mov	r6, r8
 8006c8a:	e735      	b.n	8006af8 <_dtoa_r+0x730>
 8006c8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c8e:	e75c      	b.n	8006b4a <_dtoa_r+0x782>
 8006c90:	2300      	movs	r3, #0
 8006c92:	e788      	b.n	8006ba6 <_dtoa_r+0x7de>
 8006c94:	3fe00000 	.word	0x3fe00000
 8006c98:	40240000 	.word	0x40240000
 8006c9c:	40140000 	.word	0x40140000
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	e780      	b.n	8006ba6 <_dtoa_r+0x7de>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca8:	e782      	b.n	8006bb0 <_dtoa_r+0x7e8>
 8006caa:	d099      	beq.n	8006be0 <_dtoa_r+0x818>
 8006cac:	9a08      	ldr	r2, [sp, #32]
 8006cae:	331c      	adds	r3, #28
 8006cb0:	441a      	add	r2, r3
 8006cb2:	4498      	add	r8, r3
 8006cb4:	441e      	add	r6, r3
 8006cb6:	9208      	str	r2, [sp, #32]
 8006cb8:	e792      	b.n	8006be0 <_dtoa_r+0x818>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	e7f6      	b.n	8006cac <_dtoa_r+0x8e4>
 8006cbe:	9b07      	ldr	r3, [sp, #28]
 8006cc0:	9704      	str	r7, [sp, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dc20      	bgt.n	8006d08 <_dtoa_r+0x940>
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	dd1e      	ble.n	8006d0c <_dtoa_r+0x944>
 8006cce:	9b00      	ldr	r3, [sp, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f47f aec0 	bne.w	8006a56 <_dtoa_r+0x68e>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	2205      	movs	r2, #5
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f000 fa9a 	bl	8007214 <__multadd>
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4648      	mov	r0, r9
 8006ce6:	f000 fcad 	bl	8007644 <__mcmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f77f aeb3 	ble.w	8006a56 <_dtoa_r+0x68e>
 8006cf0:	4656      	mov	r6, sl
 8006cf2:	2331      	movs	r3, #49	@ 0x31
 8006cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8006cf8:	9b04      	ldr	r3, [sp, #16]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	e6ae      	b.n	8006a5e <_dtoa_r+0x696>
 8006d00:	9c07      	ldr	r4, [sp, #28]
 8006d02:	9704      	str	r7, [sp, #16]
 8006d04:	4625      	mov	r5, r4
 8006d06:	e7f3      	b.n	8006cf0 <_dtoa_r+0x928>
 8006d08:	9b07      	ldr	r3, [sp, #28]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8104 	beq.w	8006f1c <_dtoa_r+0xb54>
 8006d14:	2e00      	cmp	r6, #0
 8006d16:	dd05      	ble.n	8006d24 <_dtoa_r+0x95c>
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f000 fc25 	bl	800756c <__lshift>
 8006d22:	4605      	mov	r5, r0
 8006d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d05a      	beq.n	8006de0 <_dtoa_r+0xa18>
 8006d2a:	6869      	ldr	r1, [r5, #4]
 8006d2c:	4658      	mov	r0, fp
 8006d2e:	f000 fa0f 	bl	8007150 <_Balloc>
 8006d32:	4606      	mov	r6, r0
 8006d34:	b928      	cbnz	r0, 8006d42 <_dtoa_r+0x97a>
 8006d36:	4b84      	ldr	r3, [pc, #528]	@ (8006f48 <_dtoa_r+0xb80>)
 8006d38:	4602      	mov	r2, r0
 8006d3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d3e:	f7ff bb5a 	b.w	80063f6 <_dtoa_r+0x2e>
 8006d42:	692a      	ldr	r2, [r5, #16]
 8006d44:	3202      	adds	r2, #2
 8006d46:	0092      	lsls	r2, r2, #2
 8006d48:	f105 010c 	add.w	r1, r5, #12
 8006d4c:	300c      	adds	r0, #12
 8006d4e:	f000 fe3d 	bl	80079cc <memcpy>
 8006d52:	2201      	movs	r2, #1
 8006d54:	4631      	mov	r1, r6
 8006d56:	4658      	mov	r0, fp
 8006d58:	f000 fc08 	bl	800756c <__lshift>
 8006d5c:	f10a 0301 	add.w	r3, sl, #1
 8006d60:	9307      	str	r3, [sp, #28]
 8006d62:	9b00      	ldr	r3, [sp, #0]
 8006d64:	4453      	add	r3, sl
 8006d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d68:	9b02      	ldr	r3, [sp, #8]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	462f      	mov	r7, r5
 8006d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d72:	4605      	mov	r5, r0
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	4621      	mov	r1, r4
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	4648      	mov	r0, r9
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	f7ff fa9a 	bl	80062b6 <quorem>
 8006d82:	4639      	mov	r1, r7
 8006d84:	9002      	str	r0, [sp, #8]
 8006d86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f000 fc5a 	bl	8007644 <__mcmp>
 8006d90:	462a      	mov	r2, r5
 8006d92:	9008      	str	r0, [sp, #32]
 8006d94:	4621      	mov	r1, r4
 8006d96:	4658      	mov	r0, fp
 8006d98:	f000 fc70 	bl	800767c <__mdiff>
 8006d9c:	68c2      	ldr	r2, [r0, #12]
 8006d9e:	4606      	mov	r6, r0
 8006da0:	bb02      	cbnz	r2, 8006de4 <_dtoa_r+0xa1c>
 8006da2:	4601      	mov	r1, r0
 8006da4:	4648      	mov	r0, r9
 8006da6:	f000 fc4d 	bl	8007644 <__mcmp>
 8006daa:	4602      	mov	r2, r0
 8006dac:	4631      	mov	r1, r6
 8006dae:	4658      	mov	r0, fp
 8006db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006db2:	f000 fa0d 	bl	80071d0 <_Bfree>
 8006db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dba:	9e07      	ldr	r6, [sp, #28]
 8006dbc:	ea43 0102 	orr.w	r1, r3, r2
 8006dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dc2:	4319      	orrs	r1, r3
 8006dc4:	d110      	bne.n	8006de8 <_dtoa_r+0xa20>
 8006dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dca:	d029      	beq.n	8006e20 <_dtoa_r+0xa58>
 8006dcc:	9b08      	ldr	r3, [sp, #32]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd02      	ble.n	8006dd8 <_dtoa_r+0xa10>
 8006dd2:	9b02      	ldr	r3, [sp, #8]
 8006dd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006dd8:	9b00      	ldr	r3, [sp, #0]
 8006dda:	f883 8000 	strb.w	r8, [r3]
 8006dde:	e63f      	b.n	8006a60 <_dtoa_r+0x698>
 8006de0:	4628      	mov	r0, r5
 8006de2:	e7bb      	b.n	8006d5c <_dtoa_r+0x994>
 8006de4:	2201      	movs	r2, #1
 8006de6:	e7e1      	b.n	8006dac <_dtoa_r+0x9e4>
 8006de8:	9b08      	ldr	r3, [sp, #32]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	db04      	blt.n	8006df8 <_dtoa_r+0xa30>
 8006dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006df0:	430b      	orrs	r3, r1
 8006df2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006df4:	430b      	orrs	r3, r1
 8006df6:	d120      	bne.n	8006e3a <_dtoa_r+0xa72>
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	dded      	ble.n	8006dd8 <_dtoa_r+0xa10>
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4658      	mov	r0, fp
 8006e02:	f000 fbb3 	bl	800756c <__lshift>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4681      	mov	r9, r0
 8006e0a:	f000 fc1b 	bl	8007644 <__mcmp>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	dc03      	bgt.n	8006e1a <_dtoa_r+0xa52>
 8006e12:	d1e1      	bne.n	8006dd8 <_dtoa_r+0xa10>
 8006e14:	f018 0f01 	tst.w	r8, #1
 8006e18:	d0de      	beq.n	8006dd8 <_dtoa_r+0xa10>
 8006e1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e1e:	d1d8      	bne.n	8006dd2 <_dtoa_r+0xa0a>
 8006e20:	9a00      	ldr	r2, [sp, #0]
 8006e22:	2339      	movs	r3, #57	@ 0x39
 8006e24:	7013      	strb	r3, [r2, #0]
 8006e26:	4633      	mov	r3, r6
 8006e28:	461e      	mov	r6, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e30:	2a39      	cmp	r2, #57	@ 0x39
 8006e32:	d052      	beq.n	8006eda <_dtoa_r+0xb12>
 8006e34:	3201      	adds	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e612      	b.n	8006a60 <_dtoa_r+0x698>
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	dd07      	ble.n	8006e4e <_dtoa_r+0xa86>
 8006e3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e42:	d0ed      	beq.n	8006e20 <_dtoa_r+0xa58>
 8006e44:	9a00      	ldr	r2, [sp, #0]
 8006e46:	f108 0301 	add.w	r3, r8, #1
 8006e4a:	7013      	strb	r3, [r2, #0]
 8006e4c:	e608      	b.n	8006a60 <_dtoa_r+0x698>
 8006e4e:	9b07      	ldr	r3, [sp, #28]
 8006e50:	9a07      	ldr	r2, [sp, #28]
 8006e52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d028      	beq.n	8006eae <_dtoa_r+0xae6>
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	2300      	movs	r3, #0
 8006e60:	220a      	movs	r2, #10
 8006e62:	4658      	mov	r0, fp
 8006e64:	f000 f9d6 	bl	8007214 <__multadd>
 8006e68:	42af      	cmp	r7, r5
 8006e6a:	4681      	mov	r9, r0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	f04f 020a 	mov.w	r2, #10
 8006e74:	4639      	mov	r1, r7
 8006e76:	4658      	mov	r0, fp
 8006e78:	d107      	bne.n	8006e8a <_dtoa_r+0xac2>
 8006e7a:	f000 f9cb 	bl	8007214 <__multadd>
 8006e7e:	4607      	mov	r7, r0
 8006e80:	4605      	mov	r5, r0
 8006e82:	9b07      	ldr	r3, [sp, #28]
 8006e84:	3301      	adds	r3, #1
 8006e86:	9307      	str	r3, [sp, #28]
 8006e88:	e774      	b.n	8006d74 <_dtoa_r+0x9ac>
 8006e8a:	f000 f9c3 	bl	8007214 <__multadd>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4607      	mov	r7, r0
 8006e92:	2300      	movs	r3, #0
 8006e94:	220a      	movs	r2, #10
 8006e96:	4658      	mov	r0, fp
 8006e98:	f000 f9bc 	bl	8007214 <__multadd>
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	e7f0      	b.n	8006e82 <_dtoa_r+0xaba>
 8006ea0:	9b00      	ldr	r3, [sp, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bfcc      	ite	gt
 8006ea6:	461e      	movgt	r6, r3
 8006ea8:	2601      	movle	r6, #1
 8006eaa:	4456      	add	r6, sl
 8006eac:	2700      	movs	r7, #0
 8006eae:	4649      	mov	r1, r9
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	f000 fb5a 	bl	800756c <__lshift>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	4681      	mov	r9, r0
 8006ebc:	f000 fbc2 	bl	8007644 <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	dcb0      	bgt.n	8006e26 <_dtoa_r+0xa5e>
 8006ec4:	d102      	bne.n	8006ecc <_dtoa_r+0xb04>
 8006ec6:	f018 0f01 	tst.w	r8, #1
 8006eca:	d1ac      	bne.n	8006e26 <_dtoa_r+0xa5e>
 8006ecc:	4633      	mov	r3, r6
 8006ece:	461e      	mov	r6, r3
 8006ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ed4:	2a30      	cmp	r2, #48	@ 0x30
 8006ed6:	d0fa      	beq.n	8006ece <_dtoa_r+0xb06>
 8006ed8:	e5c2      	b.n	8006a60 <_dtoa_r+0x698>
 8006eda:	459a      	cmp	sl, r3
 8006edc:	d1a4      	bne.n	8006e28 <_dtoa_r+0xa60>
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	2331      	movs	r3, #49	@ 0x31
 8006ee6:	f88a 3000 	strb.w	r3, [sl]
 8006eea:	e5b9      	b.n	8006a60 <_dtoa_r+0x698>
 8006eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f4c <_dtoa_r+0xb84>
 8006ef2:	b11b      	cbz	r3, 8006efc <_dtoa_r+0xb34>
 8006ef4:	f10a 0308 	add.w	r3, sl, #8
 8006ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	4650      	mov	r0, sl
 8006efe:	b019      	add	sp, #100	@ 0x64
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	f77f ae37 	ble.w	8006b7a <_dtoa_r+0x7b2>
 8006f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f10:	2001      	movs	r0, #1
 8006f12:	e655      	b.n	8006bc0 <_dtoa_r+0x7f8>
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f77f aed6 	ble.w	8006cc8 <_dtoa_r+0x900>
 8006f1c:	4656      	mov	r6, sl
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4648      	mov	r0, r9
 8006f22:	f7ff f9c8 	bl	80062b6 <quorem>
 8006f26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f2a:	f806 8b01 	strb.w	r8, [r6], #1
 8006f2e:	9b00      	ldr	r3, [sp, #0]
 8006f30:	eba6 020a 	sub.w	r2, r6, sl
 8006f34:	4293      	cmp	r3, r2
 8006f36:	ddb3      	ble.n	8006ea0 <_dtoa_r+0xad8>
 8006f38:	4649      	mov	r1, r9
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	4658      	mov	r0, fp
 8006f40:	f000 f968 	bl	8007214 <__multadd>
 8006f44:	4681      	mov	r9, r0
 8006f46:	e7ea      	b.n	8006f1e <_dtoa_r+0xb56>
 8006f48:	08008114 	.word	0x08008114
 8006f4c:	08008098 	.word	0x08008098

08006f50 <_free_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4605      	mov	r5, r0
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d041      	beq.n	8006fdc <_free_r+0x8c>
 8006f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f5c:	1f0c      	subs	r4, r1, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfb8      	it	lt
 8006f62:	18e4      	addlt	r4, r4, r3
 8006f64:	f000 f8e8 	bl	8007138 <__malloc_lock>
 8006f68:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe0 <_free_r+0x90>)
 8006f6a:	6813      	ldr	r3, [r2, #0]
 8006f6c:	b933      	cbnz	r3, 8006f7c <_free_r+0x2c>
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	6014      	str	r4, [r2, #0]
 8006f72:	4628      	mov	r0, r5
 8006f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f78:	f000 b8e4 	b.w	8007144 <__malloc_unlock>
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	d908      	bls.n	8006f92 <_free_r+0x42>
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	1821      	adds	r1, r4, r0
 8006f84:	428b      	cmp	r3, r1
 8006f86:	bf01      	itttt	eq
 8006f88:	6819      	ldreq	r1, [r3, #0]
 8006f8a:	685b      	ldreq	r3, [r3, #4]
 8006f8c:	1809      	addeq	r1, r1, r0
 8006f8e:	6021      	streq	r1, [r4, #0]
 8006f90:	e7ed      	b.n	8006f6e <_free_r+0x1e>
 8006f92:	461a      	mov	r2, r3
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	b10b      	cbz	r3, 8006f9c <_free_r+0x4c>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d9fa      	bls.n	8006f92 <_free_r+0x42>
 8006f9c:	6811      	ldr	r1, [r2, #0]
 8006f9e:	1850      	adds	r0, r2, r1
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d10b      	bne.n	8006fbc <_free_r+0x6c>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	1850      	adds	r0, r2, r1
 8006faa:	4283      	cmp	r3, r0
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	d1e0      	bne.n	8006f72 <_free_r+0x22>
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	6053      	str	r3, [r2, #4]
 8006fb6:	4408      	add	r0, r1
 8006fb8:	6010      	str	r0, [r2, #0]
 8006fba:	e7da      	b.n	8006f72 <_free_r+0x22>
 8006fbc:	d902      	bls.n	8006fc4 <_free_r+0x74>
 8006fbe:	230c      	movs	r3, #12
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	e7d6      	b.n	8006f72 <_free_r+0x22>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	1821      	adds	r1, r4, r0
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf04      	itt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	bf04      	itt	eq
 8006fd4:	1809      	addeq	r1, r1, r0
 8006fd6:	6021      	streq	r1, [r4, #0]
 8006fd8:	6054      	str	r4, [r2, #4]
 8006fda:	e7ca      	b.n	8006f72 <_free_r+0x22>
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000414 	.word	0x20000414

08006fe4 <malloc>:
 8006fe4:	4b02      	ldr	r3, [pc, #8]	@ (8006ff0 <malloc+0xc>)
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f000 b825 	b.w	8007038 <_malloc_r>
 8006fee:	bf00      	nop
 8006ff0:	20000018 	.word	0x20000018

08006ff4 <sbrk_aligned>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8007034 <sbrk_aligned+0x40>)
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	b911      	cbnz	r1, 8007006 <sbrk_aligned+0x12>
 8007000:	f000 fcd4 	bl	80079ac <_sbrk_r>
 8007004:	6030      	str	r0, [r6, #0]
 8007006:	4621      	mov	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 fccf 	bl	80079ac <_sbrk_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d103      	bne.n	800701a <sbrk_aligned+0x26>
 8007012:	f04f 34ff 	mov.w	r4, #4294967295
 8007016:	4620      	mov	r0, r4
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d0f8      	beq.n	8007016 <sbrk_aligned+0x22>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fcc0 	bl	80079ac <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d1f2      	bne.n	8007016 <sbrk_aligned+0x22>
 8007030:	e7ef      	b.n	8007012 <sbrk_aligned+0x1e>
 8007032:	bf00      	nop
 8007034:	20000410 	.word	0x20000410

08007038 <_malloc_r>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	1ccd      	adds	r5, r1, #3
 800703e:	f025 0503 	bic.w	r5, r5, #3
 8007042:	3508      	adds	r5, #8
 8007044:	2d0c      	cmp	r5, #12
 8007046:	bf38      	it	cc
 8007048:	250c      	movcc	r5, #12
 800704a:	2d00      	cmp	r5, #0
 800704c:	4606      	mov	r6, r0
 800704e:	db01      	blt.n	8007054 <_malloc_r+0x1c>
 8007050:	42a9      	cmp	r1, r5
 8007052:	d904      	bls.n	800705e <_malloc_r+0x26>
 8007054:	230c      	movs	r3, #12
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007134 <_malloc_r+0xfc>
 8007062:	f000 f869 	bl	8007138 <__malloc_lock>
 8007066:	f8d8 3000 	ldr.w	r3, [r8]
 800706a:	461c      	mov	r4, r3
 800706c:	bb44      	cbnz	r4, 80070c0 <_malloc_r+0x88>
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ffbf 	bl	8006ff4 <sbrk_aligned>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	4604      	mov	r4, r0
 800707a:	d158      	bne.n	800712e <_malloc_r+0xf6>
 800707c:	f8d8 4000 	ldr.w	r4, [r8]
 8007080:	4627      	mov	r7, r4
 8007082:	2f00      	cmp	r7, #0
 8007084:	d143      	bne.n	800710e <_malloc_r+0xd6>
 8007086:	2c00      	cmp	r4, #0
 8007088:	d04b      	beq.n	8007122 <_malloc_r+0xea>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4639      	mov	r1, r7
 800708e:	4630      	mov	r0, r6
 8007090:	eb04 0903 	add.w	r9, r4, r3
 8007094:	f000 fc8a 	bl	80079ac <_sbrk_r>
 8007098:	4581      	cmp	r9, r0
 800709a:	d142      	bne.n	8007122 <_malloc_r+0xea>
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	1a6d      	subs	r5, r5, r1
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffa6 	bl	8006ff4 <sbrk_aligned>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d03a      	beq.n	8007122 <_malloc_r+0xea>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	442b      	add	r3, r5
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	bb62      	cbnz	r2, 8007114 <_malloc_r+0xdc>
 80070ba:	f8c8 7000 	str.w	r7, [r8]
 80070be:	e00f      	b.n	80070e0 <_malloc_r+0xa8>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	1b52      	subs	r2, r2, r5
 80070c4:	d420      	bmi.n	8007108 <_malloc_r+0xd0>
 80070c6:	2a0b      	cmp	r2, #11
 80070c8:	d917      	bls.n	80070fa <_malloc_r+0xc2>
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	6025      	str	r5, [r4, #0]
 80070d0:	bf18      	it	ne
 80070d2:	6059      	strne	r1, [r3, #4]
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	bf08      	it	eq
 80070d8:	f8c8 1000 	streq.w	r1, [r8]
 80070dc:	5162      	str	r2, [r4, r5]
 80070de:	604b      	str	r3, [r1, #4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f82f 	bl	8007144 <__malloc_unlock>
 80070e6:	f104 000b 	add.w	r0, r4, #11
 80070ea:	1d23      	adds	r3, r4, #4
 80070ec:	f020 0007 	bic.w	r0, r0, #7
 80070f0:	1ac2      	subs	r2, r0, r3
 80070f2:	bf1c      	itt	ne
 80070f4:	1a1b      	subne	r3, r3, r0
 80070f6:	50a3      	strne	r3, [r4, r2]
 80070f8:	e7af      	b.n	800705a <_malloc_r+0x22>
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	bf0c      	ite	eq
 8007100:	f8c8 2000 	streq.w	r2, [r8]
 8007104:	605a      	strne	r2, [r3, #4]
 8007106:	e7eb      	b.n	80070e0 <_malloc_r+0xa8>
 8007108:	4623      	mov	r3, r4
 800710a:	6864      	ldr	r4, [r4, #4]
 800710c:	e7ae      	b.n	800706c <_malloc_r+0x34>
 800710e:	463c      	mov	r4, r7
 8007110:	687f      	ldr	r7, [r7, #4]
 8007112:	e7b6      	b.n	8007082 <_malloc_r+0x4a>
 8007114:	461a      	mov	r2, r3
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	42a3      	cmp	r3, r4
 800711a:	d1fb      	bne.n	8007114 <_malloc_r+0xdc>
 800711c:	2300      	movs	r3, #0
 800711e:	6053      	str	r3, [r2, #4]
 8007120:	e7de      	b.n	80070e0 <_malloc_r+0xa8>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f80c 	bl	8007144 <__malloc_unlock>
 800712c:	e794      	b.n	8007058 <_malloc_r+0x20>
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	e7d6      	b.n	80070e0 <_malloc_r+0xa8>
 8007132:	bf00      	nop
 8007134:	20000414 	.word	0x20000414

08007138 <__malloc_lock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_lock+0x8>)
 800713a:	f7ff b8ba 	b.w	80062b2 <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	2000040c 	.word	0x2000040c

08007144 <__malloc_unlock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_unlock+0x8>)
 8007146:	f7ff b8b5 	b.w	80062b4 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	2000040c 	.word	0x2000040c

08007150 <_Balloc>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	69c6      	ldr	r6, [r0, #28]
 8007154:	4604      	mov	r4, r0
 8007156:	460d      	mov	r5, r1
 8007158:	b976      	cbnz	r6, 8007178 <_Balloc+0x28>
 800715a:	2010      	movs	r0, #16
 800715c:	f7ff ff42 	bl	8006fe4 <malloc>
 8007160:	4602      	mov	r2, r0
 8007162:	61e0      	str	r0, [r4, #28]
 8007164:	b920      	cbnz	r0, 8007170 <_Balloc+0x20>
 8007166:	4b18      	ldr	r3, [pc, #96]	@ (80071c8 <_Balloc+0x78>)
 8007168:	4818      	ldr	r0, [pc, #96]	@ (80071cc <_Balloc+0x7c>)
 800716a:	216b      	movs	r1, #107	@ 0x6b
 800716c:	f000 fc3c 	bl	80079e8 <__assert_func>
 8007170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007174:	6006      	str	r6, [r0, #0]
 8007176:	60c6      	str	r6, [r0, #12]
 8007178:	69e6      	ldr	r6, [r4, #28]
 800717a:	68f3      	ldr	r3, [r6, #12]
 800717c:	b183      	cbz	r3, 80071a0 <_Balloc+0x50>
 800717e:	69e3      	ldr	r3, [r4, #28]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007186:	b9b8      	cbnz	r0, 80071b8 <_Balloc+0x68>
 8007188:	2101      	movs	r1, #1
 800718a:	fa01 f605 	lsl.w	r6, r1, r5
 800718e:	1d72      	adds	r2, r6, #5
 8007190:	0092      	lsls	r2, r2, #2
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fc46 	bl	8007a24 <_calloc_r>
 8007198:	b160      	cbz	r0, 80071b4 <_Balloc+0x64>
 800719a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800719e:	e00e      	b.n	80071be <_Balloc+0x6e>
 80071a0:	2221      	movs	r2, #33	@ 0x21
 80071a2:	2104      	movs	r1, #4
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fc3d 	bl	8007a24 <_calloc_r>
 80071aa:	69e3      	ldr	r3, [r4, #28]
 80071ac:	60f0      	str	r0, [r6, #12]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e4      	bne.n	800717e <_Balloc+0x2e>
 80071b4:	2000      	movs	r0, #0
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	6802      	ldr	r2, [r0, #0]
 80071ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071be:	2300      	movs	r3, #0
 80071c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071c4:	e7f7      	b.n	80071b6 <_Balloc+0x66>
 80071c6:	bf00      	nop
 80071c8:	080080a5 	.word	0x080080a5
 80071cc:	08008125 	.word	0x08008125

080071d0 <_Bfree>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	69c6      	ldr	r6, [r0, #28]
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	b976      	cbnz	r6, 80071f8 <_Bfree+0x28>
 80071da:	2010      	movs	r0, #16
 80071dc:	f7ff ff02 	bl	8006fe4 <malloc>
 80071e0:	4602      	mov	r2, r0
 80071e2:	61e8      	str	r0, [r5, #28]
 80071e4:	b920      	cbnz	r0, 80071f0 <_Bfree+0x20>
 80071e6:	4b09      	ldr	r3, [pc, #36]	@ (800720c <_Bfree+0x3c>)
 80071e8:	4809      	ldr	r0, [pc, #36]	@ (8007210 <_Bfree+0x40>)
 80071ea:	218f      	movs	r1, #143	@ 0x8f
 80071ec:	f000 fbfc 	bl	80079e8 <__assert_func>
 80071f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f4:	6006      	str	r6, [r0, #0]
 80071f6:	60c6      	str	r6, [r0, #12]
 80071f8:	b13c      	cbz	r4, 800720a <_Bfree+0x3a>
 80071fa:	69eb      	ldr	r3, [r5, #28]
 80071fc:	6862      	ldr	r2, [r4, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007204:	6021      	str	r1, [r4, #0]
 8007206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	080080a5 	.word	0x080080a5
 8007210:	08008125 	.word	0x08008125

08007214 <__multadd>:
 8007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007218:	690d      	ldr	r5, [r1, #16]
 800721a:	4607      	mov	r7, r0
 800721c:	460c      	mov	r4, r1
 800721e:	461e      	mov	r6, r3
 8007220:	f101 0c14 	add.w	ip, r1, #20
 8007224:	2000      	movs	r0, #0
 8007226:	f8dc 3000 	ldr.w	r3, [ip]
 800722a:	b299      	uxth	r1, r3
 800722c:	fb02 6101 	mla	r1, r2, r1, r6
 8007230:	0c1e      	lsrs	r6, r3, #16
 8007232:	0c0b      	lsrs	r3, r1, #16
 8007234:	fb02 3306 	mla	r3, r2, r6, r3
 8007238:	b289      	uxth	r1, r1
 800723a:	3001      	adds	r0, #1
 800723c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007240:	4285      	cmp	r5, r0
 8007242:	f84c 1b04 	str.w	r1, [ip], #4
 8007246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800724a:	dcec      	bgt.n	8007226 <__multadd+0x12>
 800724c:	b30e      	cbz	r6, 8007292 <__multadd+0x7e>
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	42ab      	cmp	r3, r5
 8007252:	dc19      	bgt.n	8007288 <__multadd+0x74>
 8007254:	6861      	ldr	r1, [r4, #4]
 8007256:	4638      	mov	r0, r7
 8007258:	3101      	adds	r1, #1
 800725a:	f7ff ff79 	bl	8007150 <_Balloc>
 800725e:	4680      	mov	r8, r0
 8007260:	b928      	cbnz	r0, 800726e <__multadd+0x5a>
 8007262:	4602      	mov	r2, r0
 8007264:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <__multadd+0x84>)
 8007266:	480d      	ldr	r0, [pc, #52]	@ (800729c <__multadd+0x88>)
 8007268:	21ba      	movs	r1, #186	@ 0xba
 800726a:	f000 fbbd 	bl	80079e8 <__assert_func>
 800726e:	6922      	ldr	r2, [r4, #16]
 8007270:	3202      	adds	r2, #2
 8007272:	f104 010c 	add.w	r1, r4, #12
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	300c      	adds	r0, #12
 800727a:	f000 fba7 	bl	80079cc <memcpy>
 800727e:	4621      	mov	r1, r4
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff ffa5 	bl	80071d0 <_Bfree>
 8007286:	4644      	mov	r4, r8
 8007288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800728c:	3501      	adds	r5, #1
 800728e:	615e      	str	r6, [r3, #20]
 8007290:	6125      	str	r5, [r4, #16]
 8007292:	4620      	mov	r0, r4
 8007294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007298:	08008114 	.word	0x08008114
 800729c:	08008125 	.word	0x08008125

080072a0 <__hi0bits>:
 80072a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072a4:	4603      	mov	r3, r0
 80072a6:	bf36      	itet	cc
 80072a8:	0403      	lslcc	r3, r0, #16
 80072aa:	2000      	movcs	r0, #0
 80072ac:	2010      	movcc	r0, #16
 80072ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072b2:	bf3c      	itt	cc
 80072b4:	021b      	lslcc	r3, r3, #8
 80072b6:	3008      	addcc	r0, #8
 80072b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072bc:	bf3c      	itt	cc
 80072be:	011b      	lslcc	r3, r3, #4
 80072c0:	3004      	addcc	r0, #4
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c6:	bf3c      	itt	cc
 80072c8:	009b      	lslcc	r3, r3, #2
 80072ca:	3002      	addcc	r0, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	db05      	blt.n	80072dc <__hi0bits+0x3c>
 80072d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072d4:	f100 0001 	add.w	r0, r0, #1
 80072d8:	bf08      	it	eq
 80072da:	2020      	moveq	r0, #32
 80072dc:	4770      	bx	lr

080072de <__lo0bits>:
 80072de:	6803      	ldr	r3, [r0, #0]
 80072e0:	4602      	mov	r2, r0
 80072e2:	f013 0007 	ands.w	r0, r3, #7
 80072e6:	d00b      	beq.n	8007300 <__lo0bits+0x22>
 80072e8:	07d9      	lsls	r1, r3, #31
 80072ea:	d421      	bmi.n	8007330 <__lo0bits+0x52>
 80072ec:	0798      	lsls	r0, r3, #30
 80072ee:	bf49      	itett	mi
 80072f0:	085b      	lsrmi	r3, r3, #1
 80072f2:	089b      	lsrpl	r3, r3, #2
 80072f4:	2001      	movmi	r0, #1
 80072f6:	6013      	strmi	r3, [r2, #0]
 80072f8:	bf5c      	itt	pl
 80072fa:	6013      	strpl	r3, [r2, #0]
 80072fc:	2002      	movpl	r0, #2
 80072fe:	4770      	bx	lr
 8007300:	b299      	uxth	r1, r3
 8007302:	b909      	cbnz	r1, 8007308 <__lo0bits+0x2a>
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	2010      	movs	r0, #16
 8007308:	b2d9      	uxtb	r1, r3
 800730a:	b909      	cbnz	r1, 8007310 <__lo0bits+0x32>
 800730c:	3008      	adds	r0, #8
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	0719      	lsls	r1, r3, #28
 8007312:	bf04      	itt	eq
 8007314:	091b      	lsreq	r3, r3, #4
 8007316:	3004      	addeq	r0, #4
 8007318:	0799      	lsls	r1, r3, #30
 800731a:	bf04      	itt	eq
 800731c:	089b      	lsreq	r3, r3, #2
 800731e:	3002      	addeq	r0, #2
 8007320:	07d9      	lsls	r1, r3, #31
 8007322:	d403      	bmi.n	800732c <__lo0bits+0x4e>
 8007324:	085b      	lsrs	r3, r3, #1
 8007326:	f100 0001 	add.w	r0, r0, #1
 800732a:	d003      	beq.n	8007334 <__lo0bits+0x56>
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	4770      	bx	lr
 8007330:	2000      	movs	r0, #0
 8007332:	4770      	bx	lr
 8007334:	2020      	movs	r0, #32
 8007336:	4770      	bx	lr

08007338 <__i2b>:
 8007338:	b510      	push	{r4, lr}
 800733a:	460c      	mov	r4, r1
 800733c:	2101      	movs	r1, #1
 800733e:	f7ff ff07 	bl	8007150 <_Balloc>
 8007342:	4602      	mov	r2, r0
 8007344:	b928      	cbnz	r0, 8007352 <__i2b+0x1a>
 8007346:	4b05      	ldr	r3, [pc, #20]	@ (800735c <__i2b+0x24>)
 8007348:	4805      	ldr	r0, [pc, #20]	@ (8007360 <__i2b+0x28>)
 800734a:	f240 1145 	movw	r1, #325	@ 0x145
 800734e:	f000 fb4b 	bl	80079e8 <__assert_func>
 8007352:	2301      	movs	r3, #1
 8007354:	6144      	str	r4, [r0, #20]
 8007356:	6103      	str	r3, [r0, #16]
 8007358:	bd10      	pop	{r4, pc}
 800735a:	bf00      	nop
 800735c:	08008114 	.word	0x08008114
 8007360:	08008125 	.word	0x08008125

08007364 <__multiply>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4614      	mov	r4, r2
 800736a:	690a      	ldr	r2, [r1, #16]
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	bfa8      	it	ge
 8007372:	4623      	movge	r3, r4
 8007374:	460f      	mov	r7, r1
 8007376:	bfa4      	itt	ge
 8007378:	460c      	movge	r4, r1
 800737a:	461f      	movge	r7, r3
 800737c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007380:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	6861      	ldr	r1, [r4, #4]
 8007388:	eb0a 0609 	add.w	r6, sl, r9
 800738c:	42b3      	cmp	r3, r6
 800738e:	b085      	sub	sp, #20
 8007390:	bfb8      	it	lt
 8007392:	3101      	addlt	r1, #1
 8007394:	f7ff fedc 	bl	8007150 <_Balloc>
 8007398:	b930      	cbnz	r0, 80073a8 <__multiply+0x44>
 800739a:	4602      	mov	r2, r0
 800739c:	4b44      	ldr	r3, [pc, #272]	@ (80074b0 <__multiply+0x14c>)
 800739e:	4845      	ldr	r0, [pc, #276]	@ (80074b4 <__multiply+0x150>)
 80073a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073a4:	f000 fb20 	bl	80079e8 <__assert_func>
 80073a8:	f100 0514 	add.w	r5, r0, #20
 80073ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073b0:	462b      	mov	r3, r5
 80073b2:	2200      	movs	r2, #0
 80073b4:	4543      	cmp	r3, r8
 80073b6:	d321      	bcc.n	80073fc <__multiply+0x98>
 80073b8:	f107 0114 	add.w	r1, r7, #20
 80073bc:	f104 0214 	add.w	r2, r4, #20
 80073c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073c8:	9302      	str	r3, [sp, #8]
 80073ca:	1b13      	subs	r3, r2, r4
 80073cc:	3b15      	subs	r3, #21
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	3304      	adds	r3, #4
 80073d4:	f104 0715 	add.w	r7, r4, #21
 80073d8:	42ba      	cmp	r2, r7
 80073da:	bf38      	it	cc
 80073dc:	2304      	movcc	r3, #4
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	9b02      	ldr	r3, [sp, #8]
 80073e2:	9103      	str	r1, [sp, #12]
 80073e4:	428b      	cmp	r3, r1
 80073e6:	d80c      	bhi.n	8007402 <__multiply+0x9e>
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	dd03      	ble.n	80073f4 <__multiply+0x90>
 80073ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d05b      	beq.n	80074ac <__multiply+0x148>
 80073f4:	6106      	str	r6, [r0, #16]
 80073f6:	b005      	add	sp, #20
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	f843 2b04 	str.w	r2, [r3], #4
 8007400:	e7d8      	b.n	80073b4 <__multiply+0x50>
 8007402:	f8b1 a000 	ldrh.w	sl, [r1]
 8007406:	f1ba 0f00 	cmp.w	sl, #0
 800740a:	d024      	beq.n	8007456 <__multiply+0xf2>
 800740c:	f104 0e14 	add.w	lr, r4, #20
 8007410:	46a9      	mov	r9, r5
 8007412:	f04f 0c00 	mov.w	ip, #0
 8007416:	f85e 7b04 	ldr.w	r7, [lr], #4
 800741a:	f8d9 3000 	ldr.w	r3, [r9]
 800741e:	fa1f fb87 	uxth.w	fp, r7
 8007422:	b29b      	uxth	r3, r3
 8007424:	fb0a 330b 	mla	r3, sl, fp, r3
 8007428:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800742c:	f8d9 7000 	ldr.w	r7, [r9]
 8007430:	4463      	add	r3, ip
 8007432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007436:	fb0a c70b 	mla	r7, sl, fp, ip
 800743a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007444:	4572      	cmp	r2, lr
 8007446:	f849 3b04 	str.w	r3, [r9], #4
 800744a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800744e:	d8e2      	bhi.n	8007416 <__multiply+0xb2>
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	f845 c003 	str.w	ip, [r5, r3]
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800745c:	3104      	adds	r1, #4
 800745e:	f1b9 0f00 	cmp.w	r9, #0
 8007462:	d021      	beq.n	80074a8 <__multiply+0x144>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	f104 0c14 	add.w	ip, r4, #20
 800746a:	46ae      	mov	lr, r5
 800746c:	f04f 0a00 	mov.w	sl, #0
 8007470:	f8bc b000 	ldrh.w	fp, [ip]
 8007474:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007478:	fb09 770b 	mla	r7, r9, fp, r7
 800747c:	4457      	add	r7, sl
 800747e:	b29b      	uxth	r3, r3
 8007480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007484:	f84e 3b04 	str.w	r3, [lr], #4
 8007488:	f85c 3b04 	ldr.w	r3, [ip], #4
 800748c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007490:	f8be 3000 	ldrh.w	r3, [lr]
 8007494:	fb09 330a 	mla	r3, r9, sl, r3
 8007498:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800749c:	4562      	cmp	r2, ip
 800749e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074a2:	d8e5      	bhi.n	8007470 <__multiply+0x10c>
 80074a4:	9f01      	ldr	r7, [sp, #4]
 80074a6:	51eb      	str	r3, [r5, r7]
 80074a8:	3504      	adds	r5, #4
 80074aa:	e799      	b.n	80073e0 <__multiply+0x7c>
 80074ac:	3e01      	subs	r6, #1
 80074ae:	e79b      	b.n	80073e8 <__multiply+0x84>
 80074b0:	08008114 	.word	0x08008114
 80074b4:	08008125 	.word	0x08008125

080074b8 <__pow5mult>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4615      	mov	r5, r2
 80074be:	f012 0203 	ands.w	r2, r2, #3
 80074c2:	4607      	mov	r7, r0
 80074c4:	460e      	mov	r6, r1
 80074c6:	d007      	beq.n	80074d8 <__pow5mult+0x20>
 80074c8:	4c25      	ldr	r4, [pc, #148]	@ (8007560 <__pow5mult+0xa8>)
 80074ca:	3a01      	subs	r2, #1
 80074cc:	2300      	movs	r3, #0
 80074ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074d2:	f7ff fe9f 	bl	8007214 <__multadd>
 80074d6:	4606      	mov	r6, r0
 80074d8:	10ad      	asrs	r5, r5, #2
 80074da:	d03d      	beq.n	8007558 <__pow5mult+0xa0>
 80074dc:	69fc      	ldr	r4, [r7, #28]
 80074de:	b97c      	cbnz	r4, 8007500 <__pow5mult+0x48>
 80074e0:	2010      	movs	r0, #16
 80074e2:	f7ff fd7f 	bl	8006fe4 <malloc>
 80074e6:	4602      	mov	r2, r0
 80074e8:	61f8      	str	r0, [r7, #28]
 80074ea:	b928      	cbnz	r0, 80074f8 <__pow5mult+0x40>
 80074ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007564 <__pow5mult+0xac>)
 80074ee:	481e      	ldr	r0, [pc, #120]	@ (8007568 <__pow5mult+0xb0>)
 80074f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074f4:	f000 fa78 	bl	80079e8 <__assert_func>
 80074f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074fc:	6004      	str	r4, [r0, #0]
 80074fe:	60c4      	str	r4, [r0, #12]
 8007500:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007508:	b94c      	cbnz	r4, 800751e <__pow5mult+0x66>
 800750a:	f240 2171 	movw	r1, #625	@ 0x271
 800750e:	4638      	mov	r0, r7
 8007510:	f7ff ff12 	bl	8007338 <__i2b>
 8007514:	2300      	movs	r3, #0
 8007516:	f8c8 0008 	str.w	r0, [r8, #8]
 800751a:	4604      	mov	r4, r0
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	f04f 0900 	mov.w	r9, #0
 8007522:	07eb      	lsls	r3, r5, #31
 8007524:	d50a      	bpl.n	800753c <__pow5mult+0x84>
 8007526:	4631      	mov	r1, r6
 8007528:	4622      	mov	r2, r4
 800752a:	4638      	mov	r0, r7
 800752c:	f7ff ff1a 	bl	8007364 <__multiply>
 8007530:	4631      	mov	r1, r6
 8007532:	4680      	mov	r8, r0
 8007534:	4638      	mov	r0, r7
 8007536:	f7ff fe4b 	bl	80071d0 <_Bfree>
 800753a:	4646      	mov	r6, r8
 800753c:	106d      	asrs	r5, r5, #1
 800753e:	d00b      	beq.n	8007558 <__pow5mult+0xa0>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	b938      	cbnz	r0, 8007554 <__pow5mult+0x9c>
 8007544:	4622      	mov	r2, r4
 8007546:	4621      	mov	r1, r4
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff ff0b 	bl	8007364 <__multiply>
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	f8c0 9000 	str.w	r9, [r0]
 8007554:	4604      	mov	r4, r0
 8007556:	e7e4      	b.n	8007522 <__pow5mult+0x6a>
 8007558:	4630      	mov	r0, r6
 800755a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755e:	bf00      	nop
 8007560:	08008180 	.word	0x08008180
 8007564:	080080a5 	.word	0x080080a5
 8007568:	08008125 	.word	0x08008125

0800756c <__lshift>:
 800756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	460c      	mov	r4, r1
 8007572:	6849      	ldr	r1, [r1, #4]
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	4607      	mov	r7, r0
 800757e:	4691      	mov	r9, r2
 8007580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007584:	f108 0601 	add.w	r6, r8, #1
 8007588:	42b3      	cmp	r3, r6
 800758a:	db0b      	blt.n	80075a4 <__lshift+0x38>
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff fddf 	bl	8007150 <_Balloc>
 8007592:	4605      	mov	r5, r0
 8007594:	b948      	cbnz	r0, 80075aa <__lshift+0x3e>
 8007596:	4602      	mov	r2, r0
 8007598:	4b28      	ldr	r3, [pc, #160]	@ (800763c <__lshift+0xd0>)
 800759a:	4829      	ldr	r0, [pc, #164]	@ (8007640 <__lshift+0xd4>)
 800759c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075a0:	f000 fa22 	bl	80079e8 <__assert_func>
 80075a4:	3101      	adds	r1, #1
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	e7ee      	b.n	8007588 <__lshift+0x1c>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f100 0114 	add.w	r1, r0, #20
 80075b0:	f100 0210 	add.w	r2, r0, #16
 80075b4:	4618      	mov	r0, r3
 80075b6:	4553      	cmp	r3, sl
 80075b8:	db33      	blt.n	8007622 <__lshift+0xb6>
 80075ba:	6920      	ldr	r0, [r4, #16]
 80075bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075c0:	f104 0314 	add.w	r3, r4, #20
 80075c4:	f019 091f 	ands.w	r9, r9, #31
 80075c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075d0:	d02b      	beq.n	800762a <__lshift+0xbe>
 80075d2:	f1c9 0e20 	rsb	lr, r9, #32
 80075d6:	468a      	mov	sl, r1
 80075d8:	2200      	movs	r2, #0
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	fa00 f009 	lsl.w	r0, r0, r9
 80075e0:	4310      	orrs	r0, r2
 80075e2:	f84a 0b04 	str.w	r0, [sl], #4
 80075e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ea:	459c      	cmp	ip, r3
 80075ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80075f0:	d8f3      	bhi.n	80075da <__lshift+0x6e>
 80075f2:	ebac 0304 	sub.w	r3, ip, r4
 80075f6:	3b15      	subs	r3, #21
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	3304      	adds	r3, #4
 80075fe:	f104 0015 	add.w	r0, r4, #21
 8007602:	4584      	cmp	ip, r0
 8007604:	bf38      	it	cc
 8007606:	2304      	movcc	r3, #4
 8007608:	50ca      	str	r2, [r1, r3]
 800760a:	b10a      	cbz	r2, 8007610 <__lshift+0xa4>
 800760c:	f108 0602 	add.w	r6, r8, #2
 8007610:	3e01      	subs	r6, #1
 8007612:	4638      	mov	r0, r7
 8007614:	612e      	str	r6, [r5, #16]
 8007616:	4621      	mov	r1, r4
 8007618:	f7ff fdda 	bl	80071d0 <_Bfree>
 800761c:	4628      	mov	r0, r5
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	f842 0f04 	str.w	r0, [r2, #4]!
 8007626:	3301      	adds	r3, #1
 8007628:	e7c5      	b.n	80075b6 <__lshift+0x4a>
 800762a:	3904      	subs	r1, #4
 800762c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007630:	f841 2f04 	str.w	r2, [r1, #4]!
 8007634:	459c      	cmp	ip, r3
 8007636:	d8f9      	bhi.n	800762c <__lshift+0xc0>
 8007638:	e7ea      	b.n	8007610 <__lshift+0xa4>
 800763a:	bf00      	nop
 800763c:	08008114 	.word	0x08008114
 8007640:	08008125 	.word	0x08008125

08007644 <__mcmp>:
 8007644:	690a      	ldr	r2, [r1, #16]
 8007646:	4603      	mov	r3, r0
 8007648:	6900      	ldr	r0, [r0, #16]
 800764a:	1a80      	subs	r0, r0, r2
 800764c:	b530      	push	{r4, r5, lr}
 800764e:	d10e      	bne.n	800766e <__mcmp+0x2a>
 8007650:	3314      	adds	r3, #20
 8007652:	3114      	adds	r1, #20
 8007654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800765c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007664:	4295      	cmp	r5, r2
 8007666:	d003      	beq.n	8007670 <__mcmp+0x2c>
 8007668:	d205      	bcs.n	8007676 <__mcmp+0x32>
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	bd30      	pop	{r4, r5, pc}
 8007670:	42a3      	cmp	r3, r4
 8007672:	d3f3      	bcc.n	800765c <__mcmp+0x18>
 8007674:	e7fb      	b.n	800766e <__mcmp+0x2a>
 8007676:	2001      	movs	r0, #1
 8007678:	e7f9      	b.n	800766e <__mcmp+0x2a>
	...

0800767c <__mdiff>:
 800767c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	4689      	mov	r9, r1
 8007682:	4606      	mov	r6, r0
 8007684:	4611      	mov	r1, r2
 8007686:	4648      	mov	r0, r9
 8007688:	4614      	mov	r4, r2
 800768a:	f7ff ffdb 	bl	8007644 <__mcmp>
 800768e:	1e05      	subs	r5, r0, #0
 8007690:	d112      	bne.n	80076b8 <__mdiff+0x3c>
 8007692:	4629      	mov	r1, r5
 8007694:	4630      	mov	r0, r6
 8007696:	f7ff fd5b 	bl	8007150 <_Balloc>
 800769a:	4602      	mov	r2, r0
 800769c:	b928      	cbnz	r0, 80076aa <__mdiff+0x2e>
 800769e:	4b3f      	ldr	r3, [pc, #252]	@ (800779c <__mdiff+0x120>)
 80076a0:	f240 2137 	movw	r1, #567	@ 0x237
 80076a4:	483e      	ldr	r0, [pc, #248]	@ (80077a0 <__mdiff+0x124>)
 80076a6:	f000 f99f 	bl	80079e8 <__assert_func>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076b0:	4610      	mov	r0, r2
 80076b2:	b003      	add	sp, #12
 80076b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b8:	bfbc      	itt	lt
 80076ba:	464b      	movlt	r3, r9
 80076bc:	46a1      	movlt	r9, r4
 80076be:	4630      	mov	r0, r6
 80076c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076c4:	bfba      	itte	lt
 80076c6:	461c      	movlt	r4, r3
 80076c8:	2501      	movlt	r5, #1
 80076ca:	2500      	movge	r5, #0
 80076cc:	f7ff fd40 	bl	8007150 <_Balloc>
 80076d0:	4602      	mov	r2, r0
 80076d2:	b918      	cbnz	r0, 80076dc <__mdiff+0x60>
 80076d4:	4b31      	ldr	r3, [pc, #196]	@ (800779c <__mdiff+0x120>)
 80076d6:	f240 2145 	movw	r1, #581	@ 0x245
 80076da:	e7e3      	b.n	80076a4 <__mdiff+0x28>
 80076dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076e0:	6926      	ldr	r6, [r4, #16]
 80076e2:	60c5      	str	r5, [r0, #12]
 80076e4:	f109 0310 	add.w	r3, r9, #16
 80076e8:	f109 0514 	add.w	r5, r9, #20
 80076ec:	f104 0e14 	add.w	lr, r4, #20
 80076f0:	f100 0b14 	add.w	fp, r0, #20
 80076f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	46d9      	mov	r9, fp
 8007700:	f04f 0c00 	mov.w	ip, #0
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	f85e 0b04 	ldr.w	r0, [lr], #4
 800770a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	fa1f f38a 	uxth.w	r3, sl
 8007714:	4619      	mov	r1, r3
 8007716:	b283      	uxth	r3, r0
 8007718:	1acb      	subs	r3, r1, r3
 800771a:	0c00      	lsrs	r0, r0, #16
 800771c:	4463      	add	r3, ip
 800771e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007722:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800772c:	4576      	cmp	r6, lr
 800772e:	f849 3b04 	str.w	r3, [r9], #4
 8007732:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007736:	d8e5      	bhi.n	8007704 <__mdiff+0x88>
 8007738:	1b33      	subs	r3, r6, r4
 800773a:	3b15      	subs	r3, #21
 800773c:	f023 0303 	bic.w	r3, r3, #3
 8007740:	3415      	adds	r4, #21
 8007742:	3304      	adds	r3, #4
 8007744:	42a6      	cmp	r6, r4
 8007746:	bf38      	it	cc
 8007748:	2304      	movcc	r3, #4
 800774a:	441d      	add	r5, r3
 800774c:	445b      	add	r3, fp
 800774e:	461e      	mov	r6, r3
 8007750:	462c      	mov	r4, r5
 8007752:	4544      	cmp	r4, r8
 8007754:	d30e      	bcc.n	8007774 <__mdiff+0xf8>
 8007756:	f108 0103 	add.w	r1, r8, #3
 800775a:	1b49      	subs	r1, r1, r5
 800775c:	f021 0103 	bic.w	r1, r1, #3
 8007760:	3d03      	subs	r5, #3
 8007762:	45a8      	cmp	r8, r5
 8007764:	bf38      	it	cc
 8007766:	2100      	movcc	r1, #0
 8007768:	440b      	add	r3, r1
 800776a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800776e:	b191      	cbz	r1, 8007796 <__mdiff+0x11a>
 8007770:	6117      	str	r7, [r2, #16]
 8007772:	e79d      	b.n	80076b0 <__mdiff+0x34>
 8007774:	f854 1b04 	ldr.w	r1, [r4], #4
 8007778:	46e6      	mov	lr, ip
 800777a:	0c08      	lsrs	r0, r1, #16
 800777c:	fa1c fc81 	uxtah	ip, ip, r1
 8007780:	4471      	add	r1, lr
 8007782:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007786:	b289      	uxth	r1, r1
 8007788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800778c:	f846 1b04 	str.w	r1, [r6], #4
 8007790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007794:	e7dd      	b.n	8007752 <__mdiff+0xd6>
 8007796:	3f01      	subs	r7, #1
 8007798:	e7e7      	b.n	800776a <__mdiff+0xee>
 800779a:	bf00      	nop
 800779c:	08008114 	.word	0x08008114
 80077a0:	08008125 	.word	0x08008125

080077a4 <__d2b>:
 80077a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077a8:	460f      	mov	r7, r1
 80077aa:	2101      	movs	r1, #1
 80077ac:	ec59 8b10 	vmov	r8, r9, d0
 80077b0:	4616      	mov	r6, r2
 80077b2:	f7ff fccd 	bl	8007150 <_Balloc>
 80077b6:	4604      	mov	r4, r0
 80077b8:	b930      	cbnz	r0, 80077c8 <__d2b+0x24>
 80077ba:	4602      	mov	r2, r0
 80077bc:	4b23      	ldr	r3, [pc, #140]	@ (800784c <__d2b+0xa8>)
 80077be:	4824      	ldr	r0, [pc, #144]	@ (8007850 <__d2b+0xac>)
 80077c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80077c4:	f000 f910 	bl	80079e8 <__assert_func>
 80077c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077d0:	b10d      	cbz	r5, 80077d6 <__d2b+0x32>
 80077d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f1b8 0300 	subs.w	r3, r8, #0
 80077dc:	d023      	beq.n	8007826 <__d2b+0x82>
 80077de:	4668      	mov	r0, sp
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	f7ff fd7c 	bl	80072de <__lo0bits>
 80077e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077ea:	b1d0      	cbz	r0, 8007822 <__d2b+0x7e>
 80077ec:	f1c0 0320 	rsb	r3, r0, #32
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	430b      	orrs	r3, r1
 80077f6:	40c2      	lsrs	r2, r0
 80077f8:	6163      	str	r3, [r4, #20]
 80077fa:	9201      	str	r2, [sp, #4]
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	61a3      	str	r3, [r4, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf0c      	ite	eq
 8007804:	2201      	moveq	r2, #1
 8007806:	2202      	movne	r2, #2
 8007808:	6122      	str	r2, [r4, #16]
 800780a:	b1a5      	cbz	r5, 8007836 <__d2b+0x92>
 800780c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007810:	4405      	add	r5, r0
 8007812:	603d      	str	r5, [r7, #0]
 8007814:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007818:	6030      	str	r0, [r6, #0]
 800781a:	4620      	mov	r0, r4
 800781c:	b003      	add	sp, #12
 800781e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007822:	6161      	str	r1, [r4, #20]
 8007824:	e7ea      	b.n	80077fc <__d2b+0x58>
 8007826:	a801      	add	r0, sp, #4
 8007828:	f7ff fd59 	bl	80072de <__lo0bits>
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	6163      	str	r3, [r4, #20]
 8007830:	3020      	adds	r0, #32
 8007832:	2201      	movs	r2, #1
 8007834:	e7e8      	b.n	8007808 <__d2b+0x64>
 8007836:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800783a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800783e:	6038      	str	r0, [r7, #0]
 8007840:	6918      	ldr	r0, [r3, #16]
 8007842:	f7ff fd2d 	bl	80072a0 <__hi0bits>
 8007846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800784a:	e7e5      	b.n	8007818 <__d2b+0x74>
 800784c:	08008114 	.word	0x08008114
 8007850:	08008125 	.word	0x08008125

08007854 <__sflush_r>:
 8007854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785c:	0716      	lsls	r6, r2, #28
 800785e:	4605      	mov	r5, r0
 8007860:	460c      	mov	r4, r1
 8007862:	d454      	bmi.n	800790e <__sflush_r+0xba>
 8007864:	684b      	ldr	r3, [r1, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	dc02      	bgt.n	8007870 <__sflush_r+0x1c>
 800786a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd48      	ble.n	8007902 <__sflush_r+0xae>
 8007870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007872:	2e00      	cmp	r6, #0
 8007874:	d045      	beq.n	8007902 <__sflush_r+0xae>
 8007876:	2300      	movs	r3, #0
 8007878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800787c:	682f      	ldr	r7, [r5, #0]
 800787e:	6a21      	ldr	r1, [r4, #32]
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	d030      	beq.n	80078e6 <__sflush_r+0x92>
 8007884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	0759      	lsls	r1, r3, #29
 800788a:	d505      	bpl.n	8007898 <__sflush_r+0x44>
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007892:	b10b      	cbz	r3, 8007898 <__sflush_r+0x44>
 8007894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007896:	1ad2      	subs	r2, r2, r3
 8007898:	2300      	movs	r3, #0
 800789a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800789c:	6a21      	ldr	r1, [r4, #32]
 800789e:	4628      	mov	r0, r5
 80078a0:	47b0      	blx	r6
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	d106      	bne.n	80078b6 <__sflush_r+0x62>
 80078a8:	6829      	ldr	r1, [r5, #0]
 80078aa:	291d      	cmp	r1, #29
 80078ac:	d82b      	bhi.n	8007906 <__sflush_r+0xb2>
 80078ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007958 <__sflush_r+0x104>)
 80078b0:	410a      	asrs	r2, r1
 80078b2:	07d6      	lsls	r6, r2, #31
 80078b4:	d427      	bmi.n	8007906 <__sflush_r+0xb2>
 80078b6:	2200      	movs	r2, #0
 80078b8:	6062      	str	r2, [r4, #4]
 80078ba:	04d9      	lsls	r1, r3, #19
 80078bc:	6922      	ldr	r2, [r4, #16]
 80078be:	6022      	str	r2, [r4, #0]
 80078c0:	d504      	bpl.n	80078cc <__sflush_r+0x78>
 80078c2:	1c42      	adds	r2, r0, #1
 80078c4:	d101      	bne.n	80078ca <__sflush_r+0x76>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	b903      	cbnz	r3, 80078cc <__sflush_r+0x78>
 80078ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80078cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ce:	602f      	str	r7, [r5, #0]
 80078d0:	b1b9      	cbz	r1, 8007902 <__sflush_r+0xae>
 80078d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078d6:	4299      	cmp	r1, r3
 80078d8:	d002      	beq.n	80078e0 <__sflush_r+0x8c>
 80078da:	4628      	mov	r0, r5
 80078dc:	f7ff fb38 	bl	8006f50 <_free_r>
 80078e0:	2300      	movs	r3, #0
 80078e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80078e4:	e00d      	b.n	8007902 <__sflush_r+0xae>
 80078e6:	2301      	movs	r3, #1
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b0      	blx	r6
 80078ec:	4602      	mov	r2, r0
 80078ee:	1c50      	adds	r0, r2, #1
 80078f0:	d1c9      	bne.n	8007886 <__sflush_r+0x32>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0c6      	beq.n	8007886 <__sflush_r+0x32>
 80078f8:	2b1d      	cmp	r3, #29
 80078fa:	d001      	beq.n	8007900 <__sflush_r+0xac>
 80078fc:	2b16      	cmp	r3, #22
 80078fe:	d11e      	bne.n	800793e <__sflush_r+0xea>
 8007900:	602f      	str	r7, [r5, #0]
 8007902:	2000      	movs	r0, #0
 8007904:	e022      	b.n	800794c <__sflush_r+0xf8>
 8007906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790a:	b21b      	sxth	r3, r3
 800790c:	e01b      	b.n	8007946 <__sflush_r+0xf2>
 800790e:	690f      	ldr	r7, [r1, #16]
 8007910:	2f00      	cmp	r7, #0
 8007912:	d0f6      	beq.n	8007902 <__sflush_r+0xae>
 8007914:	0793      	lsls	r3, r2, #30
 8007916:	680e      	ldr	r6, [r1, #0]
 8007918:	bf08      	it	eq
 800791a:	694b      	ldreq	r3, [r1, #20]
 800791c:	600f      	str	r7, [r1, #0]
 800791e:	bf18      	it	ne
 8007920:	2300      	movne	r3, #0
 8007922:	eba6 0807 	sub.w	r8, r6, r7
 8007926:	608b      	str	r3, [r1, #8]
 8007928:	f1b8 0f00 	cmp.w	r8, #0
 800792c:	dde9      	ble.n	8007902 <__sflush_r+0xae>
 800792e:	6a21      	ldr	r1, [r4, #32]
 8007930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007932:	4643      	mov	r3, r8
 8007934:	463a      	mov	r2, r7
 8007936:	4628      	mov	r0, r5
 8007938:	47b0      	blx	r6
 800793a:	2800      	cmp	r0, #0
 800793c:	dc08      	bgt.n	8007950 <__sflush_r+0xfc>
 800793e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	4407      	add	r7, r0
 8007952:	eba8 0800 	sub.w	r8, r8, r0
 8007956:	e7e7      	b.n	8007928 <__sflush_r+0xd4>
 8007958:	dfbffffe 	.word	0xdfbffffe

0800795c <_fflush_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	690b      	ldr	r3, [r1, #16]
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b913      	cbnz	r3, 800796c <_fflush_r+0x10>
 8007966:	2500      	movs	r5, #0
 8007968:	4628      	mov	r0, r5
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	b118      	cbz	r0, 8007976 <_fflush_r+0x1a>
 800796e:	6a03      	ldr	r3, [r0, #32]
 8007970:	b90b      	cbnz	r3, 8007976 <_fflush_r+0x1a>
 8007972:	f7fe fba7 	bl	80060c4 <__sinit>
 8007976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f3      	beq.n	8007966 <_fflush_r+0xa>
 800797e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d404      	bmi.n	800798e <_fflush_r+0x32>
 8007984:	0599      	lsls	r1, r3, #22
 8007986:	d402      	bmi.n	800798e <_fflush_r+0x32>
 8007988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800798a:	f7fe fc92 	bl	80062b2 <__retarget_lock_acquire_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7ff ff5f 	bl	8007854 <__sflush_r>
 8007996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007998:	07da      	lsls	r2, r3, #31
 800799a:	4605      	mov	r5, r0
 800799c:	d4e4      	bmi.n	8007968 <_fflush_r+0xc>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	059b      	lsls	r3, r3, #22
 80079a2:	d4e1      	bmi.n	8007968 <_fflush_r+0xc>
 80079a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a6:	f7fe fc85 	bl	80062b4 <__retarget_lock_release_recursive>
 80079aa:	e7dd      	b.n	8007968 <_fflush_r+0xc>

080079ac <_sbrk_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	@ (80079c8 <_sbrk_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7f9 fcda 	bl	8001370 <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_sbrk_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_sbrk_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20000408 	.word	0x20000408

080079cc <memcpy>:
 80079cc:	440a      	add	r2, r1
 80079ce:	4291      	cmp	r1, r2
 80079d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079d4:	d100      	bne.n	80079d8 <memcpy+0xc>
 80079d6:	4770      	bx	lr
 80079d8:	b510      	push	{r4, lr}
 80079da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079e2:	4291      	cmp	r1, r2
 80079e4:	d1f9      	bne.n	80079da <memcpy+0xe>
 80079e6:	bd10      	pop	{r4, pc}

080079e8 <__assert_func>:
 80079e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ea:	4614      	mov	r4, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <__assert_func+0x2c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4605      	mov	r5, r0
 80079f4:	68d8      	ldr	r0, [r3, #12]
 80079f6:	b954      	cbnz	r4, 8007a0e <__assert_func+0x26>
 80079f8:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <__assert_func+0x30>)
 80079fa:	461c      	mov	r4, r3
 80079fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a00:	9100      	str	r1, [sp, #0]
 8007a02:	462b      	mov	r3, r5
 8007a04:	4905      	ldr	r1, [pc, #20]	@ (8007a1c <__assert_func+0x34>)
 8007a06:	f000 f841 	bl	8007a8c <fiprintf>
 8007a0a:	f000 f851 	bl	8007ab0 <abort>
 8007a0e:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <__assert_func+0x38>)
 8007a10:	e7f4      	b.n	80079fc <__assert_func+0x14>
 8007a12:	bf00      	nop
 8007a14:	20000018 	.word	0x20000018
 8007a18:	080082c5 	.word	0x080082c5
 8007a1c:	08008297 	.word	0x08008297
 8007a20:	0800828a 	.word	0x0800828a

08007a24 <_calloc_r>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	fba1 5402 	umull	r5, r4, r1, r2
 8007a2a:	b93c      	cbnz	r4, 8007a3c <_calloc_r+0x18>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7ff fb03 	bl	8007038 <_malloc_r>
 8007a32:	4606      	mov	r6, r0
 8007a34:	b928      	cbnz	r0, 8007a42 <_calloc_r+0x1e>
 8007a36:	2600      	movs	r6, #0
 8007a38:	4630      	mov	r0, r6
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	220c      	movs	r2, #12
 8007a3e:	6002      	str	r2, [r0, #0]
 8007a40:	e7f9      	b.n	8007a36 <_calloc_r+0x12>
 8007a42:	462a      	mov	r2, r5
 8007a44:	4621      	mov	r1, r4
 8007a46:	f7fe fbb6 	bl	80061b6 <memset>
 8007a4a:	e7f5      	b.n	8007a38 <_calloc_r+0x14>

08007a4c <__ascii_mbtowc>:
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	b901      	cbnz	r1, 8007a52 <__ascii_mbtowc+0x6>
 8007a50:	a901      	add	r1, sp, #4
 8007a52:	b142      	cbz	r2, 8007a66 <__ascii_mbtowc+0x1a>
 8007a54:	b14b      	cbz	r3, 8007a6a <__ascii_mbtowc+0x1e>
 8007a56:	7813      	ldrb	r3, [r2, #0]
 8007a58:	600b      	str	r3, [r1, #0]
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	1e10      	subs	r0, r2, #0
 8007a5e:	bf18      	it	ne
 8007a60:	2001      	movne	r0, #1
 8007a62:	b002      	add	sp, #8
 8007a64:	4770      	bx	lr
 8007a66:	4610      	mov	r0, r2
 8007a68:	e7fb      	b.n	8007a62 <__ascii_mbtowc+0x16>
 8007a6a:	f06f 0001 	mvn.w	r0, #1
 8007a6e:	e7f8      	b.n	8007a62 <__ascii_mbtowc+0x16>

08007a70 <__ascii_wctomb>:
 8007a70:	4603      	mov	r3, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	b141      	cbz	r1, 8007a88 <__ascii_wctomb+0x18>
 8007a76:	2aff      	cmp	r2, #255	@ 0xff
 8007a78:	d904      	bls.n	8007a84 <__ascii_wctomb+0x14>
 8007a7a:	228a      	movs	r2, #138	@ 0x8a
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	4770      	bx	lr
 8007a84:	700a      	strb	r2, [r1, #0]
 8007a86:	2001      	movs	r0, #1
 8007a88:	4770      	bx	lr
	...

08007a8c <fiprintf>:
 8007a8c:	b40e      	push	{r1, r2, r3}
 8007a8e:	b503      	push	{r0, r1, lr}
 8007a90:	4601      	mov	r1, r0
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	4805      	ldr	r0, [pc, #20]	@ (8007aac <fiprintf+0x20>)
 8007a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	f000 f837 	bl	8007b10 <_vfiprintf_r>
 8007aa2:	b002      	add	sp, #8
 8007aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa8:	b003      	add	sp, #12
 8007aaa:	4770      	bx	lr
 8007aac:	20000018 	.word	0x20000018

08007ab0 <abort>:
 8007ab0:	b508      	push	{r3, lr}
 8007ab2:	2006      	movs	r0, #6
 8007ab4:	f000 fa00 	bl	8007eb8 <raise>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	f7f9 fbe0 	bl	800127e <_exit>

08007abe <__sfputc_r>:
 8007abe:	6893      	ldr	r3, [r2, #8]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	b410      	push	{r4}
 8007ac6:	6093      	str	r3, [r2, #8]
 8007ac8:	da08      	bge.n	8007adc <__sfputc_r+0x1e>
 8007aca:	6994      	ldr	r4, [r2, #24]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	db01      	blt.n	8007ad4 <__sfputc_r+0x16>
 8007ad0:	290a      	cmp	r1, #10
 8007ad2:	d103      	bne.n	8007adc <__sfputc_r+0x1e>
 8007ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad8:	f000 b932 	b.w	8007d40 <__swbuf_r>
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	1c58      	adds	r0, r3, #1
 8007ae0:	6010      	str	r0, [r2, #0]
 8007ae2:	7019      	strb	r1, [r3, #0]
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <__sfputs_r>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	4606      	mov	r6, r0
 8007af0:	460f      	mov	r7, r1
 8007af2:	4614      	mov	r4, r2
 8007af4:	18d5      	adds	r5, r2, r3
 8007af6:	42ac      	cmp	r4, r5
 8007af8:	d101      	bne.n	8007afe <__sfputs_r+0x12>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e007      	b.n	8007b0e <__sfputs_r+0x22>
 8007afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b02:	463a      	mov	r2, r7
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7ff ffda 	bl	8007abe <__sfputc_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	d1f3      	bne.n	8007af6 <__sfputs_r+0xa>
 8007b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b10 <_vfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	460d      	mov	r5, r1
 8007b16:	b09d      	sub	sp, #116	@ 0x74
 8007b18:	4614      	mov	r4, r2
 8007b1a:	4698      	mov	r8, r3
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	b118      	cbz	r0, 8007b28 <_vfiprintf_r+0x18>
 8007b20:	6a03      	ldr	r3, [r0, #32]
 8007b22:	b90b      	cbnz	r3, 8007b28 <_vfiprintf_r+0x18>
 8007b24:	f7fe face 	bl	80060c4 <__sinit>
 8007b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b2a:	07d9      	lsls	r1, r3, #31
 8007b2c:	d405      	bmi.n	8007b3a <_vfiprintf_r+0x2a>
 8007b2e:	89ab      	ldrh	r3, [r5, #12]
 8007b30:	059a      	lsls	r2, r3, #22
 8007b32:	d402      	bmi.n	8007b3a <_vfiprintf_r+0x2a>
 8007b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b36:	f7fe fbbc 	bl	80062b2 <__retarget_lock_acquire_recursive>
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	071b      	lsls	r3, r3, #28
 8007b3e:	d501      	bpl.n	8007b44 <_vfiprintf_r+0x34>
 8007b40:	692b      	ldr	r3, [r5, #16]
 8007b42:	b99b      	cbnz	r3, 8007b6c <_vfiprintf_r+0x5c>
 8007b44:	4629      	mov	r1, r5
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 f938 	bl	8007dbc <__swsetup_r>
 8007b4c:	b170      	cbz	r0, 8007b6c <_vfiprintf_r+0x5c>
 8007b4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b50:	07dc      	lsls	r4, r3, #31
 8007b52:	d504      	bpl.n	8007b5e <_vfiprintf_r+0x4e>
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	b01d      	add	sp, #116	@ 0x74
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	89ab      	ldrh	r3, [r5, #12]
 8007b60:	0598      	lsls	r0, r3, #22
 8007b62:	d4f7      	bmi.n	8007b54 <_vfiprintf_r+0x44>
 8007b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b66:	f7fe fba5 	bl	80062b4 <__retarget_lock_release_recursive>
 8007b6a:	e7f3      	b.n	8007b54 <_vfiprintf_r+0x44>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b70:	2320      	movs	r3, #32
 8007b72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b7a:	2330      	movs	r3, #48	@ 0x30
 8007b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d2c <_vfiprintf_r+0x21c>
 8007b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b84:	f04f 0901 	mov.w	r9, #1
 8007b88:	4623      	mov	r3, r4
 8007b8a:	469a      	mov	sl, r3
 8007b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b90:	b10a      	cbz	r2, 8007b96 <_vfiprintf_r+0x86>
 8007b92:	2a25      	cmp	r2, #37	@ 0x25
 8007b94:	d1f9      	bne.n	8007b8a <_vfiprintf_r+0x7a>
 8007b96:	ebba 0b04 	subs.w	fp, sl, r4
 8007b9a:	d00b      	beq.n	8007bb4 <_vfiprintf_r+0xa4>
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ffa2 	bl	8007aec <__sfputs_r>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f000 80a7 	beq.w	8007cfc <_vfiprintf_r+0x1ec>
 8007bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bb0:	445a      	add	r2, fp
 8007bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 809f 	beq.w	8007cfc <_vfiprintf_r+0x1ec>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc8:	f10a 0a01 	add.w	sl, sl, #1
 8007bcc:	9304      	str	r3, [sp, #16]
 8007bce:	9307      	str	r3, [sp, #28]
 8007bd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bd6:	4654      	mov	r4, sl
 8007bd8:	2205      	movs	r2, #5
 8007bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bde:	4853      	ldr	r0, [pc, #332]	@ (8007d2c <_vfiprintf_r+0x21c>)
 8007be0:	f7f8 faf6 	bl	80001d0 <memchr>
 8007be4:	9a04      	ldr	r2, [sp, #16]
 8007be6:	b9d8      	cbnz	r0, 8007c20 <_vfiprintf_r+0x110>
 8007be8:	06d1      	lsls	r1, r2, #27
 8007bea:	bf44      	itt	mi
 8007bec:	2320      	movmi	r3, #32
 8007bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf2:	0713      	lsls	r3, r2, #28
 8007bf4:	bf44      	itt	mi
 8007bf6:	232b      	movmi	r3, #43	@ 0x2b
 8007bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c02:	d015      	beq.n	8007c30 <_vfiprintf_r+0x120>
 8007c04:	9a07      	ldr	r2, [sp, #28]
 8007c06:	4654      	mov	r4, sl
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f04f 0c0a 	mov.w	ip, #10
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c14:	3b30      	subs	r3, #48	@ 0x30
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d94b      	bls.n	8007cb2 <_vfiprintf_r+0x1a2>
 8007c1a:	b1b0      	cbz	r0, 8007c4a <_vfiprintf_r+0x13a>
 8007c1c:	9207      	str	r2, [sp, #28]
 8007c1e:	e014      	b.n	8007c4a <_vfiprintf_r+0x13a>
 8007c20:	eba0 0308 	sub.w	r3, r0, r8
 8007c24:	fa09 f303 	lsl.w	r3, r9, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	46a2      	mov	sl, r4
 8007c2e:	e7d2      	b.n	8007bd6 <_vfiprintf_r+0xc6>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	1d19      	adds	r1, r3, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	9103      	str	r1, [sp, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bfbb      	ittet	lt
 8007c3c:	425b      	neglt	r3, r3
 8007c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007c42:	9307      	strge	r3, [sp, #28]
 8007c44:	9307      	strlt	r3, [sp, #28]
 8007c46:	bfb8      	it	lt
 8007c48:	9204      	strlt	r2, [sp, #16]
 8007c4a:	7823      	ldrb	r3, [r4, #0]
 8007c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c4e:	d10a      	bne.n	8007c66 <_vfiprintf_r+0x156>
 8007c50:	7863      	ldrb	r3, [r4, #1]
 8007c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c54:	d132      	bne.n	8007cbc <_vfiprintf_r+0x1ac>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	1d1a      	adds	r2, r3, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	9203      	str	r2, [sp, #12]
 8007c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c62:	3402      	adds	r4, #2
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d3c <_vfiprintf_r+0x22c>
 8007c6a:	7821      	ldrb	r1, [r4, #0]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f7f8 faae 	bl	80001d0 <memchr>
 8007c74:	b138      	cbz	r0, 8007c86 <_vfiprintf_r+0x176>
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	eba0 000a 	sub.w	r0, r0, sl
 8007c7c:	2240      	movs	r2, #64	@ 0x40
 8007c7e:	4082      	lsls	r2, r0
 8007c80:	4313      	orrs	r3, r2
 8007c82:	3401      	adds	r4, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4829      	ldr	r0, [pc, #164]	@ (8007d30 <_vfiprintf_r+0x220>)
 8007c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c90:	2206      	movs	r2, #6
 8007c92:	f7f8 fa9d 	bl	80001d0 <memchr>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d03f      	beq.n	8007d1a <_vfiprintf_r+0x20a>
 8007c9a:	4b26      	ldr	r3, [pc, #152]	@ (8007d34 <_vfiprintf_r+0x224>)
 8007c9c:	bb1b      	cbnz	r3, 8007ce6 <_vfiprintf_r+0x1d6>
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cac:	443b      	add	r3, r7
 8007cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb0:	e76a      	b.n	8007b88 <_vfiprintf_r+0x78>
 8007cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e7a8      	b.n	8007c0e <_vfiprintf_r+0xfe>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f04f 0c0a 	mov.w	ip, #10
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cce:	3a30      	subs	r2, #48	@ 0x30
 8007cd0:	2a09      	cmp	r2, #9
 8007cd2:	d903      	bls.n	8007cdc <_vfiprintf_r+0x1cc>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0c6      	beq.n	8007c66 <_vfiprintf_r+0x156>
 8007cd8:	9105      	str	r1, [sp, #20]
 8007cda:	e7c4      	b.n	8007c66 <_vfiprintf_r+0x156>
 8007cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e7f0      	b.n	8007cc8 <_vfiprintf_r+0x1b8>
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	462a      	mov	r2, r5
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <_vfiprintf_r+0x228>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7fd fda3 	bl	800583c <_printf_float>
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	1c78      	adds	r0, r7, #1
 8007cfa:	d1d6      	bne.n	8007caa <_vfiprintf_r+0x19a>
 8007cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_vfiprintf_r+0x1fe>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_vfiprintf_r+0x1fe>
 8007d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d0a:	f7fe fad3 	bl	80062b4 <__retarget_lock_release_recursive>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	065b      	lsls	r3, r3, #25
 8007d12:	f53f af1f 	bmi.w	8007b54 <_vfiprintf_r+0x44>
 8007d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d18:	e71e      	b.n	8007b58 <_vfiprintf_r+0x48>
 8007d1a:	ab03      	add	r3, sp, #12
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <_vfiprintf_r+0x228>)
 8007d22:	a904      	add	r1, sp, #16
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7fe f821 	bl	8005d6c <_printf_i>
 8007d2a:	e7e4      	b.n	8007cf6 <_vfiprintf_r+0x1e6>
 8007d2c:	080083c7 	.word	0x080083c7
 8007d30:	080083d1 	.word	0x080083d1
 8007d34:	0800583d 	.word	0x0800583d
 8007d38:	08007aed 	.word	0x08007aed
 8007d3c:	080083cd 	.word	0x080083cd

08007d40 <__swbuf_r>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	460e      	mov	r6, r1
 8007d44:	4614      	mov	r4, r2
 8007d46:	4605      	mov	r5, r0
 8007d48:	b118      	cbz	r0, 8007d52 <__swbuf_r+0x12>
 8007d4a:	6a03      	ldr	r3, [r0, #32]
 8007d4c:	b90b      	cbnz	r3, 8007d52 <__swbuf_r+0x12>
 8007d4e:	f7fe f9b9 	bl	80060c4 <__sinit>
 8007d52:	69a3      	ldr	r3, [r4, #24]
 8007d54:	60a3      	str	r3, [r4, #8]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	071a      	lsls	r2, r3, #28
 8007d5a:	d501      	bpl.n	8007d60 <__swbuf_r+0x20>
 8007d5c:	6923      	ldr	r3, [r4, #16]
 8007d5e:	b943      	cbnz	r3, 8007d72 <__swbuf_r+0x32>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f82a 	bl	8007dbc <__swsetup_r>
 8007d68:	b118      	cbz	r0, 8007d72 <__swbuf_r+0x32>
 8007d6a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d6e:	4638      	mov	r0, r7
 8007d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	6922      	ldr	r2, [r4, #16]
 8007d76:	1a98      	subs	r0, r3, r2
 8007d78:	6963      	ldr	r3, [r4, #20]
 8007d7a:	b2f6      	uxtb	r6, r6
 8007d7c:	4283      	cmp	r3, r0
 8007d7e:	4637      	mov	r7, r6
 8007d80:	dc05      	bgt.n	8007d8e <__swbuf_r+0x4e>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f7ff fde9 	bl	800795c <_fflush_r>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1ed      	bne.n	8007d6a <__swbuf_r+0x2a>
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	6022      	str	r2, [r4, #0]
 8007d9a:	701e      	strb	r6, [r3, #0]
 8007d9c:	6962      	ldr	r2, [r4, #20]
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d004      	beq.n	8007dae <__swbuf_r+0x6e>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	07db      	lsls	r3, r3, #31
 8007da8:	d5e1      	bpl.n	8007d6e <__swbuf_r+0x2e>
 8007daa:	2e0a      	cmp	r6, #10
 8007dac:	d1df      	bne.n	8007d6e <__swbuf_r+0x2e>
 8007dae:	4621      	mov	r1, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f7ff fdd3 	bl	800795c <_fflush_r>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d0d9      	beq.n	8007d6e <__swbuf_r+0x2e>
 8007dba:	e7d6      	b.n	8007d6a <__swbuf_r+0x2a>

08007dbc <__swsetup_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4b29      	ldr	r3, [pc, #164]	@ (8007e64 <__swsetup_r+0xa8>)
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	b118      	cbz	r0, 8007dd0 <__swsetup_r+0x14>
 8007dc8:	6a03      	ldr	r3, [r0, #32]
 8007dca:	b90b      	cbnz	r3, 8007dd0 <__swsetup_r+0x14>
 8007dcc:	f7fe f97a 	bl	80060c4 <__sinit>
 8007dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd4:	0719      	lsls	r1, r3, #28
 8007dd6:	d422      	bmi.n	8007e1e <__swsetup_r+0x62>
 8007dd8:	06da      	lsls	r2, r3, #27
 8007dda:	d407      	bmi.n	8007dec <__swsetup_r+0x30>
 8007ddc:	2209      	movs	r2, #9
 8007dde:	602a      	str	r2, [r5, #0]
 8007de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	e033      	b.n	8007e54 <__swsetup_r+0x98>
 8007dec:	0758      	lsls	r0, r3, #29
 8007dee:	d512      	bpl.n	8007e16 <__swsetup_r+0x5a>
 8007df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007df2:	b141      	cbz	r1, 8007e06 <__swsetup_r+0x4a>
 8007df4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	d002      	beq.n	8007e02 <__swsetup_r+0x46>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7ff f8a7 	bl	8006f50 <_free_r>
 8007e02:	2300      	movs	r3, #0
 8007e04:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e0c:	81a3      	strh	r3, [r4, #12]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6063      	str	r3, [r4, #4]
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	f043 0308 	orr.w	r3, r3, #8
 8007e1c:	81a3      	strh	r3, [r4, #12]
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	b94b      	cbnz	r3, 8007e36 <__swsetup_r+0x7a>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e2c:	d003      	beq.n	8007e36 <__swsetup_r+0x7a>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 f883 	bl	8007f3c <__smakebuf_r>
 8007e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3a:	f013 0201 	ands.w	r2, r3, #1
 8007e3e:	d00a      	beq.n	8007e56 <__swsetup_r+0x9a>
 8007e40:	2200      	movs	r2, #0
 8007e42:	60a2      	str	r2, [r4, #8]
 8007e44:	6962      	ldr	r2, [r4, #20]
 8007e46:	4252      	negs	r2, r2
 8007e48:	61a2      	str	r2, [r4, #24]
 8007e4a:	6922      	ldr	r2, [r4, #16]
 8007e4c:	b942      	cbnz	r2, 8007e60 <__swsetup_r+0xa4>
 8007e4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e52:	d1c5      	bne.n	8007de0 <__swsetup_r+0x24>
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	0799      	lsls	r1, r3, #30
 8007e58:	bf58      	it	pl
 8007e5a:	6962      	ldrpl	r2, [r4, #20]
 8007e5c:	60a2      	str	r2, [r4, #8]
 8007e5e:	e7f4      	b.n	8007e4a <__swsetup_r+0x8e>
 8007e60:	2000      	movs	r0, #0
 8007e62:	e7f7      	b.n	8007e54 <__swsetup_r+0x98>
 8007e64:	20000018 	.word	0x20000018

08007e68 <_raise_r>:
 8007e68:	291f      	cmp	r1, #31
 8007e6a:	b538      	push	{r3, r4, r5, lr}
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	d904      	bls.n	8007e7c <_raise_r+0x14>
 8007e72:	2316      	movs	r3, #22
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007e7e:	b112      	cbz	r2, 8007e86 <_raise_r+0x1e>
 8007e80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e84:	b94b      	cbnz	r3, 8007e9a <_raise_r+0x32>
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f830 	bl	8007eec <_getpid_r>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4601      	mov	r1, r0
 8007e90:	4628      	mov	r0, r5
 8007e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e96:	f000 b817 	b.w	8007ec8 <_kill_r>
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d00a      	beq.n	8007eb4 <_raise_r+0x4c>
 8007e9e:	1c59      	adds	r1, r3, #1
 8007ea0:	d103      	bne.n	8007eaa <_raise_r+0x42>
 8007ea2:	2316      	movs	r3, #22
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	e7e7      	b.n	8007e7a <_raise_r+0x12>
 8007eaa:	2100      	movs	r1, #0
 8007eac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	4798      	blx	r3
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e7e0      	b.n	8007e7a <_raise_r+0x12>

08007eb8 <raise>:
 8007eb8:	4b02      	ldr	r3, [pc, #8]	@ (8007ec4 <raise+0xc>)
 8007eba:	4601      	mov	r1, r0
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	f7ff bfd3 	b.w	8007e68 <_raise_r>
 8007ec2:	bf00      	nop
 8007ec4:	20000018 	.word	0x20000018

08007ec8 <_kill_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4d07      	ldr	r5, [pc, #28]	@ (8007ee8 <_kill_r+0x20>)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	f7f9 f9c2 	bl	800125e <_kill>
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	d102      	bne.n	8007ee4 <_kill_r+0x1c>
 8007ede:	682b      	ldr	r3, [r5, #0]
 8007ee0:	b103      	cbz	r3, 8007ee4 <_kill_r+0x1c>
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000408 	.word	0x20000408

08007eec <_getpid_r>:
 8007eec:	f7f9 b9af 	b.w	800124e <_getpid>

08007ef0 <__swhatbuf_r>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	b096      	sub	sp, #88	@ 0x58
 8007efc:	4615      	mov	r5, r2
 8007efe:	461e      	mov	r6, r3
 8007f00:	da0d      	bge.n	8007f1e <__swhatbuf_r+0x2e>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f08:	f04f 0100 	mov.w	r1, #0
 8007f0c:	bf14      	ite	ne
 8007f0e:	2340      	movne	r3, #64	@ 0x40
 8007f10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f14:	2000      	movs	r0, #0
 8007f16:	6031      	str	r1, [r6, #0]
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	b016      	add	sp, #88	@ 0x58
 8007f1c:	bd70      	pop	{r4, r5, r6, pc}
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f000 f848 	bl	8007fb4 <_fstat_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	dbec      	blt.n	8007f02 <__swhatbuf_r+0x12>
 8007f28:	9901      	ldr	r1, [sp, #4]
 8007f2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f32:	4259      	negs	r1, r3
 8007f34:	4159      	adcs	r1, r3
 8007f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f3a:	e7eb      	b.n	8007f14 <__swhatbuf_r+0x24>

08007f3c <__smakebuf_r>:
 8007f3c:	898b      	ldrh	r3, [r1, #12]
 8007f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f40:	079d      	lsls	r5, r3, #30
 8007f42:	4606      	mov	r6, r0
 8007f44:	460c      	mov	r4, r1
 8007f46:	d507      	bpl.n	8007f58 <__smakebuf_r+0x1c>
 8007f48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	2301      	movs	r3, #1
 8007f52:	6163      	str	r3, [r4, #20]
 8007f54:	b003      	add	sp, #12
 8007f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f58:	ab01      	add	r3, sp, #4
 8007f5a:	466a      	mov	r2, sp
 8007f5c:	f7ff ffc8 	bl	8007ef0 <__swhatbuf_r>
 8007f60:	9f00      	ldr	r7, [sp, #0]
 8007f62:	4605      	mov	r5, r0
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	f7ff f866 	bl	8007038 <_malloc_r>
 8007f6c:	b948      	cbnz	r0, 8007f82 <__smakebuf_r+0x46>
 8007f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f72:	059a      	lsls	r2, r3, #22
 8007f74:	d4ee      	bmi.n	8007f54 <__smakebuf_r+0x18>
 8007f76:	f023 0303 	bic.w	r3, r3, #3
 8007f7a:	f043 0302 	orr.w	r3, r3, #2
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	e7e2      	b.n	8007f48 <__smakebuf_r+0xc>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	6020      	str	r0, [r4, #0]
 8007f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f8a:	81a3      	strh	r3, [r4, #12]
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f92:	b15b      	cbz	r3, 8007fac <__smakebuf_r+0x70>
 8007f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 f81d 	bl	8007fd8 <_isatty_r>
 8007f9e:	b128      	cbz	r0, 8007fac <__smakebuf_r+0x70>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	431d      	orrs	r5, r3
 8007fb0:	81a5      	strh	r5, [r4, #12]
 8007fb2:	e7cf      	b.n	8007f54 <__smakebuf_r+0x18>

08007fb4 <_fstat_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	@ (8007fd4 <_fstat_r+0x20>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	f7f9 f9ac 	bl	800131e <_fstat>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d102      	bne.n	8007fd0 <_fstat_r+0x1c>
 8007fca:	682b      	ldr	r3, [r5, #0]
 8007fcc:	b103      	cbz	r3, 8007fd0 <_fstat_r+0x1c>
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000408 	.word	0x20000408

08007fd8 <_isatty_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d06      	ldr	r5, [pc, #24]	@ (8007ff4 <_isatty_r+0x1c>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	f7f9 f9ab 	bl	800133e <_isatty>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_isatty_r+0x1a>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_isatty_r+0x1a>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000408 	.word	0x20000408

08007ff8 <_init>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

08008004 <_fini>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr
