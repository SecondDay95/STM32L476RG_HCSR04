
12_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a148  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800a2d8  0800a2d8  0000b2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6a0  0800a6a0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6a0  0800a6a0  0000b6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6a8  0800a6a8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6a8  0800a6a8  0000b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6ac  0800a6ac  0000b6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a6b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001d4  0800a884  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a884  0000c504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016eab  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b7  00000000  00000000  000230af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00026368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100e  00000000  00000000  00027830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a91c  00000000  00000000  0002883e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a4e  00000000  00000000  0005315a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010868f  00000000  00000000  0006cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  0017527c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017b934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2c0 	.word	0x0800a2c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a2c0 	.word	0x0800a2c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eba:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ebc:	4a30      	ldr	r2, [pc, #192]	@ (8000f80 <MX_ADC1_Init+0xe8>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ede:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1c:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f1e:	f001 f997 	bl	8002250 <HAL_ADC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f28:	f000 fa52 	bl	80013d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f38:	f002 f92c 	bl	8003194 <HAL_ADCEx_MultiModeConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f42:	f000 fa45 	bl	80013d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_ADC1_Init+0xec>)
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f52:	237f      	movs	r3, #127	@ 0x7f
 8000f54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f56:	2304      	movs	r3, #4
 8000f58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <MX_ADC1_Init+0xe4>)
 8000f64:	f001 fb8c 	bl	8002680 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f6e:	f000 fa2f 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	@ 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001f0 	.word	0x200001f0
 8000f80:	50040000 	.word	0x50040000
 8000f84:	3ef08000 	.word	0x3ef08000

08000f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2288      	movs	r2, #136	@ 0x88
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 fa66 	bl	800847a <memset>
  if(adcHandle->Instance==ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a27      	ldr	r2, [pc, #156]	@ (8001050 <HAL_ADC_MspInit+0xc8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d146      	bne.n	8001046 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fbc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fbe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fce:	2310      	movs	r3, #16
 8000fd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fcf1 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ff4:	f000 f9ec 	bl	80013d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_ADC_MspInit+0xcc>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <HAL_ADC_MspInit+0xcc>)
 8000ffe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <HAL_ADC_MspInit+0xcc>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_ADC_MspInit+0xcc>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <HAL_ADC_MspInit+0xcc>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_ADC_MspInit+0xcc>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001028:	2301      	movs	r3, #1
 800102a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800102e:	230b      	movs	r3, #11
 8001030:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <HAL_ADC_MspInit+0xd0>)
 8001042:	f002 fa69 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	37b0      	adds	r7, #176	@ 0xb0
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	50040000 	.word	0x50040000
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400

0800105c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <MX_GPIO_Init+0x110>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a3d      	ldr	r2, [pc, #244]	@ (800116c <MX_GPIO_Init+0x110>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <MX_GPIO_Init+0x110>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b38      	ldr	r3, [pc, #224]	@ (800116c <MX_GPIO_Init+0x110>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a37      	ldr	r2, [pc, #220]	@ (800116c <MX_GPIO_Init+0x110>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b35      	ldr	r3, [pc, #212]	@ (800116c <MX_GPIO_Init+0x110>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b32      	ldr	r3, [pc, #200]	@ (800116c <MX_GPIO_Init+0x110>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a31      	ldr	r2, [pc, #196]	@ (800116c <MX_GPIO_Init+0x110>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <MX_GPIO_Init+0x110>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	482c      	ldr	r0, [pc, #176]	@ (8001170 <MX_GPIO_Init+0x114>)
 80010c0:	f002 fbd4 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 80010c4:	2200      	movs	r2, #0
 80010c6:	f64e 0106 	movw	r1, #59398	@ 0xe806
 80010ca:	482a      	ldr	r0, [pc, #168]	@ (8001174 <MX_GPIO_Init+0x118>)
 80010cc:	f002 fbce 	bl	800386c <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010d6:	4827      	ldr	r0, [pc, #156]	@ (8001174 <MX_GPIO_Init+0x118>)
 80010d8:	f002 fbc8 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e6:	f002 fbc1 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_G_Pin;
 80010ea:	2310      	movs	r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_G_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <MX_GPIO_Init+0x114>)
 8001102:	f002 fa09 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SEG_C_Pin|SEG_E_Pin|SEG_D_Pin|SEG_A_Pin
 8001106:	f64e 0306 	movw	r3, #59398	@ 0xe806
 800110a:	60fb      	str	r3, [r7, #12]
                          |SEG_F_Pin|SEG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	4815      	ldr	r0, [pc, #84]	@ (8001174 <MX_GPIO_Init+0x118>)
 8001120:	f002 f9fa 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_1_Pin;
 8001124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800112a:	2311      	movs	r3, #17
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_1_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4619      	mov	r1, r3
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_GPIO_Init+0x118>)
 800113e:	f002 f9eb 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_2_Pin;
 8001142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001148:	2311      	movs	r3, #17
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SEG_2_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115e:	f002 f9db 	bl	8003518 <HAL_GPIO_Init>

}
 8001162:	bf00      	nop
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	48000800 	.word	0x48000800
 8001174:	48000400 	.word	0x48000400

08001178 <calc_sound_speed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float static calc_sound_speed(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

	  //Pomiar z przetwornika ADC1:
	  uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 800117e:	4815      	ldr	r0, [pc, #84]	@ (80011d4 <calc_sound_speed+0x5c>)
 8001180:	f001 fa70 	bl	8002664 <HAL_ADC_GetValue>
 8001184:	60f8      	str	r0, [r7, #12]
	  //Obliczenie wartosci cyfrowej na napiecie, a nastepnie na temperature:
	  float temp = adc_value * 330.0f / 4096.0f/ 4.0f;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80011d8 <calc_sound_speed+0x60>
 8001194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001198:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80011dc <calc_sound_speed+0x64>
 800119c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011a0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80011a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a8:	edc7 7a02 	vstr	s15, [r7, #8]
	  //Obliczenie prędkości dzwieku w danej temperaturze:
	  float speed = 331.8f + 0.6f * temp;
 80011ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80011e0 <calc_sound_speed+0x68>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80011e4 <calc_sound_speed+0x6c>
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc7 7a01 	vstr	s15, [r7, #4]

	  return speed;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	ee07 3a90 	vmov	s15, r3

}
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001f0 	.word	0x200001f0
 80011d8:	43a50000 	.word	0x43a50000
 80011dc:	45800000 	.word	0x45800000
 80011e0:	3f19999a 	.word	0x3f19999a
 80011e4:	43a5e666 	.word	0x43a5e666

080011e8 <__io_putchar>:

int __io_putchar(int ch)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	d102      	bne.n	80011fc <__io_putchar+0x14>
    __io_putchar('\r');
 80011f6:	200d      	movs	r0, #13
 80011f8:	f7ff fff6 	bl	80011e8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80011fc:	1d39      	adds	r1, r7, #4
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	2201      	movs	r2, #1
 8001204:	4803      	ldr	r0, [pc, #12]	@ (8001214 <__io_putchar+0x2c>)
 8001206:	f005 fe7f 	bl	8006f08 <HAL_UART_Transmit>

  return 1;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000032c 	.word	0x2000032c

08001218 <HAL_TIM_PeriodElapsedCallback>:

//Procedura obsługi przerwania wywolywanego przez timer TIM6:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001218:	b580      	push	{r7, lr}
 800121a:	ed2d 8b02 	vpush	{d8}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d102      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x1a>

		seg7_update();
 800122c:	f000 f9dc 	bl	80015e8 <seg7_update>
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
		seg7_show((stop-start) * calc_sound_speed() / 20000.0f);

	}

}
 8001230:	e024      	b.n	800127c <HAL_TIM_PeriodElapsedCallback+0x64>
	else if (htim == &htim2) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a15      	ldr	r2, [pc, #84]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d120      	bne.n	800127c <HAL_TIM_PeriodElapsedCallback+0x64>
		uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800123a:	2100      	movs	r1, #0
 800123c:	4813      	ldr	r0, [pc, #76]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800123e:	f004 ffa3 	bl	8006188 <HAL_TIM_ReadCapturedValue>
 8001242:	60f8      	str	r0, [r7, #12]
		uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001244:	2104      	movs	r1, #4
 8001246:	4811      	ldr	r0, [pc, #68]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001248:	f004 ff9e 	bl	8006188 <HAL_TIM_ReadCapturedValue>
 800124c:	60b8      	str	r0, [r7, #8]
		seg7_show((stop-start) * calc_sound_speed() / 20000.0f);
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800125c:	f7ff ff8c 	bl	8001178 <calc_sound_speed>
 8001260:	eef0 7a40 	vmov.f32	s15, s0
 8001264:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001268:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001290 <HAL_TIM_PeriodElapsedCallback+0x78>
 800126c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001274:	ee17 0a90 	vmov	r0, s15
 8001278:	f000 f9a6 	bl	80015c8 <seg7_show>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	ecbd 8b02 	vpop	{d8}
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002e0 	.word	0x200002e0
 800128c:	20000294 	.word	0x20000294
 8001290:	469c4000 	.word	0x469c4000

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f000 fd59 	bl	8001d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f000 f836 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a0:	f7ff fedc 	bl	800105c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012a4:	f000 fb24 	bl	80018f0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012a8:	f000 fc9c 	bl	8001be4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012ac:	f000 fbca 	bl	8001a44 <MX_TIM6_Init>
  MX_ADC1_Init();
 80012b0:	f7ff fdf2 	bl	8000e98 <MX_ADC1_Init>
  MX_OPAMP2_Init();
 80012b4:	f000 f892 	bl	80013dc <MX_OPAMP2_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie pomiaru dlugosci impulsu zbocza narastajacego na kanale 1 licznika TIM2
  //(czasu od impulsu wyzwalajacego pomiar do rozpoczecia pomiaru):
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 80012b8:	2100      	movs	r1, #0
 80012ba:	4810      	ldr	r0, [pc, #64]	@ (80012fc <main+0x68>)
 80012bc:	f004 fae6 	bl	800588c <HAL_TIM_IC_Start>
  //Uruchomienie pomiaru dlugosci impulsu zbocza opadajacego na kanale 2 licznika TIM2:
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80012c0:	2104      	movs	r1, #4
 80012c2:	480e      	ldr	r0, [pc, #56]	@ (80012fc <main+0x68>)
 80012c4:	f004 fae2 	bl	800588c <HAL_TIM_IC_Start>
  //Uruchomienie sygnalu PWM na kanale 3 licznika TIM2:
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012c8:	2108      	movs	r1, #8
 80012ca:	480c      	ldr	r0, [pc, #48]	@ (80012fc <main+0x68>)
 80012cc:	f004 f976 	bl	80055bc <HAL_TIM_PWM_Start>
  //Uruchomienie timera TIM2 w trybie przerwań (przerwanie od przepelnienia licznika tim2):
  HAL_TIM_Base_Start_IT(&htim2);
 80012d0:	480a      	ldr	r0, [pc, #40]	@ (80012fc <main+0x68>)
 80012d2:	f004 f8a1 	bl	8005418 <HAL_TIM_Base_Start_IT>

  //Uruchomienie timera TIM6 w trybie przerwan
  HAL_TIM_Base_Start_IT(&htim6);
 80012d6:	480a      	ldr	r0, [pc, #40]	@ (8001300 <main+0x6c>)
 80012d8:	f004 f89e 	bl	8005418 <HAL_TIM_Base_Start_IT>
  //int value = 0;

  //HAL_Delay(1000);

  //Kalibracja przetwornika ADC1:
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012dc:	217f      	movs	r1, #127	@ 0x7f
 80012de:	4809      	ldr	r0, [pc, #36]	@ (8001304 <main+0x70>)
 80012e0:	f001 fef8 	bl	80030d4 <HAL_ADCEx_Calibration_Start>
  //Rozpoczecie pomiaru napiecia w trybie ciaglym:
  HAL_ADC_Start(&hadc1);
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <main+0x70>)
 80012e6:	f001 f903 	bl	80024f0 <HAL_ADC_Start>

  //Kalibracja wzmacniacza operacyjnego OPAMP2:
  HAL_OPAMP_SelfCalibrate(&hopamp2);
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <main+0x74>)
 80012ec:	f002 fbdd 	bl	8003aaa <HAL_OPAMP_SelfCalibrate>
  //Rozpoczecie pomiaru napiecia przez wzmacniacz operacyjny:
  HAL_OPAMP_Start(&hopamp2);
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <main+0x74>)
 80012f2:	f002 fba9 	bl	8003a48 <HAL_OPAMP_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f6:	bf00      	nop
 80012f8:	e7fd      	b.n	80012f6 <main+0x62>
 80012fa:	bf00      	nop
 80012fc:	20000294 	.word	0x20000294
 8001300:	200002e0 	.word	0x200002e0
 8001304:	200001f0 	.word	0x200001f0
 8001308:	20000254 	.word	0x20000254

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b096      	sub	sp, #88	@ 0x58
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	2244      	movs	r2, #68	@ 0x44
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f007 f8ad 	bl	800847a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800132e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001332:	f002 fcf7 	bl	8003d24 <HAL_PWREx_ControlVoltageScaling>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800133c:	f000 f848 	bl	80013d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001340:	f002 fcd2 	bl	8003ce8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001344:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <SystemClock_Config+0xc0>)
 8001346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134a:	4a20      	ldr	r2, [pc, #128]	@ (80013cc <SystemClock_Config+0xc0>)
 800134c:	f023 0318 	bic.w	r3, r3, #24
 8001350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001354:	2314      	movs	r3, #20
 8001356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001364:	2360      	movs	r3, #96	@ 0x60
 8001366:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800136c:	2301      	movs	r3, #1
 800136e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001374:	2328      	movs	r3, #40	@ 0x28
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001378:	2307      	movs	r3, #7
 800137a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fd21 	bl	8003dd0 <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001394:	f000 f81c 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001398:	230f      	movs	r3, #15
 800139a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	2303      	movs	r3, #3
 800139e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 f8e9 	bl	8004588 <HAL_RCC_ClockConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013bc:	f000 f808 	bl	80013d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013c0:	f003 fdf0 	bl	8004fa4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013c4:	bf00      	nop
 80013c6:	3758      	adds	r7, #88	@ 0x58
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <Error_Handler+0x8>

080013dc <MX_OPAMP2_Init>:

OPAMP_HandleTypeDef hopamp2;

/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <MX_OPAMP2_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 80013e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013ec:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_CONNECT_NO;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 80013fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001400:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_4;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 8001404:	2210      	movs	r2, #16
 8001406:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_OPAMP2_Init+0x4c>)
 8001416:	f002 fa41 	bl	800389c <HAL_OPAMP_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_OPAMP2_Init+0x48>
  {
    Error_Handler();
 8001420:	f7ff ffd6 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000254 	.word	0x20000254
 800142c:	40007810 	.word	0x40007810

08001430 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <HAL_OPAMP_MspInit+0xa4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d13c      	bne.n	80014cc <HAL_OPAMP_MspInit+0x9c>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
    /* OPAMP2 clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a14      	ldr	r2, [pc, #80]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_OPAMP_MspInit+0xa8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VINP
    PB0     ------> OPAMP2_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800149a:	2340      	movs	r3, #64	@ 0x40
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149e:	2303      	movs	r3, #3
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b0:	f002 f832 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014b8:	230b      	movs	r3, #11
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <HAL_OPAMP_MspInit+0xac>)
 80014c8:	f002 f826 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40007810 	.word	0x40007810
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000400 	.word	0x48000400

080014e0 <set_output>:

static uint32_t actual_value;
static uint32_t active_digit;

static void set_output(uint8_t mask)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, mask & 0x01);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014f8:	481f      	ldr	r0, [pc, #124]	@ (8001578 <set_output+0x98>)
 80014fa:	f002 f9b7 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, mask & 0x02);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800150c:	481a      	ldr	r0, [pc, #104]	@ (8001578 <set_output+0x98>)
 800150e:	f002 f9ad 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, mask & 0x04);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	2102      	movs	r1, #2
 800151e:	4816      	ldr	r0, [pc, #88]	@ (8001578 <set_output+0x98>)
 8001520:	f002 f9a4 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, mask & 0x08);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <set_output+0x98>)
 8001534:	f002 f99a 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, mask & 0x10);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	2104      	movs	r1, #4
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <set_output+0x98>)
 8001546:	f002 f991 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, mask & 0x20);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <set_output+0x98>)
 800155a:	f002 f987 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, mask & 0x40);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	2110      	movs	r1, #16
 800156a:	4804      	ldr	r0, [pc, #16]	@ (800157c <set_output+0x9c>)
 800156c:	f002 f97e 	bl	800386c <HAL_GPIO_WritePin>

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800

08001580 <seg7_show_digit>:

void seg7_show_digit(uint32_t value) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	const uint8_t digit[] = {
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <seg7_show_digit+0x40>)
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001590:	c303      	stmia	r3!, {r0, r1}
 8001592:	801a      	strh	r2, [r3, #0]
			0b0000111,
			0b1111111,
			0b1101111,
	};

	set_output(digit[value % 10]);
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <seg7_show_digit+0x44>)
 8001598:	fba3 2301 	umull	r2, r3, r3, r1
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	1aca      	subs	r2, r1, r3
 80015a8:	f102 0318 	add.w	r3, r2, #24
 80015ac:	443b      	add	r3, r7
 80015ae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff94 	bl	80014e0 <set_output>

}
 80015b8:	bf00      	nop
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800a2d8 	.word	0x0800a2d8
 80015c4:	cccccccd 	.word	0xcccccccd

080015c8 <seg7_show>:

void seg7_show(uint32_t value) {
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

	actual_value = value;
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <seg7_show+0x1c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]

}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000288 	.word	0x20000288

080015e8 <seg7_update>:

void seg7_update(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	//WYlaczenie 2 wyswietlaczy:
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f2:	481b      	ldr	r0, [pc, #108]	@ (8001660 <seg7_update+0x78>)
 80015f4:	f002 f93a 	bl	800386c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001602:	f002 f933 	bl	800386c <HAL_GPIO_WritePin>

	switch(active_digit) {
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <seg7_update+0x7c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <seg7_update+0x2c>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d00f      	beq.n	8001632 <seg7_update+0x4a>
		active_digit = 0;
		break;

	}

}
 8001612:	e022      	b.n	800165a <seg7_update+0x72>
		seg7_show_digit(actual_value);
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <seg7_update+0x80>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffb1 	bl	8001580 <seg7_show_digit>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001624:	480e      	ldr	r0, [pc, #56]	@ (8001660 <seg7_update+0x78>)
 8001626:	f002 f921 	bl	800386c <HAL_GPIO_WritePin>
		active_digit = 1;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <seg7_update+0x7c>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
		break;
 8001630:	e013      	b.n	800165a <seg7_update+0x72>
		seg7_show_digit(actual_value / 10);
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <seg7_update+0x80>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <seg7_update+0x84>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff9e 	bl	8001580 <seg7_show_digit>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800164a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164e:	f002 f90d 	bl	800386c <HAL_GPIO_WritePin>
		active_digit = 0;
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <seg7_update+0x7c>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
		break;
 8001658:	bf00      	nop
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	48000400 	.word	0x48000400
 8001664:	2000028c 	.word	0x2000028c
 8001668:	20000288 	.word	0x20000288
 800166c:	cccccccd 	.word	0xcccccccd

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_MspInit+0x44>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167a:	4a0e      	ldr	r2, [pc, #56]	@ (80016b4 <HAL_MspInit+0x44>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6613      	str	r3, [r2, #96]	@ 0x60
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_MspInit+0x44>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x44>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MspInit+0x44>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6593      	str	r3, [r2, #88]	@ 0x58
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_MspInit+0x44>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170e:	f000 fb73 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <TIM2_IRQHandler+0x10>)
 800171e:	f004 f9b1 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000294 	.word	0x20000294

0800172c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM6_DAC_IRQHandler+0x10>)
 8001732:	f004 f9a7 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002e0 	.word	0x200002e0

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175a:	f006 fee1 	bl	8008520 <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001782:	bf00      	nop
 8001784:	e7fd      	b.n	8001782 <_exit+0x12>

08001786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e00a      	b.n	80017ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001798:	f3af 8000 	nop.w
 800179c:	4601      	mov	r1, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf0      	blt.n	8001798 <_read+0x12>
  }

  return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e009      	b.n	80017e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	60ba      	str	r2, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fd04 	bl	80011e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf1      	blt.n	80017d2 <_write+0x12>
  }
  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_close>:

int _close(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001820:	605a      	str	r2, [r3, #4]
  return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_isatty>:

int _isatty(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f006 fe46 	bl	8008520 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20018000 	.word	0x20018000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000290 	.word	0x20000290
 80018c8:	20000508 	.word	0x20000508

080018cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b092      	sub	sp, #72	@ 0x48
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001930:	4b42      	ldr	r3, [pc, #264]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001938:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 800193a:	224f      	movs	r2, #79	@ 0x4f
 800193c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001944:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001946:	4a3e      	ldr	r2, [pc, #248]	@ (8001a40 <MX_TIM2_Init+0x150>)
 8001948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001956:	4839      	ldr	r0, [pc, #228]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001958:	f003 fd06 	bl	8005368 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001962:	f7ff fd35 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800196a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001970:	4619      	mov	r1, r3
 8001972:	4832      	ldr	r0, [pc, #200]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001974:	f004 fb3e 	bl	8005ff4 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800197e:	f7ff fd27 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001982:	482e      	ldr	r0, [pc, #184]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001984:	f003 ff20 	bl	80057c8 <HAL_TIM_IC_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800198e:	f7ff fd1f 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001992:	482a      	ldr	r0, [pc, #168]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001994:	f003 fdb0 	bl	80054f8 <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800199e:	f7ff fd17 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	4822      	ldr	r0, [pc, #136]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 80019b2:	f005 f9b5 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80019bc:	f7ff fd08 	bl	80013d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019c4:	2301      	movs	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICFilter = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	2200      	movs	r2, #0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 80019da:	f004 f95a 	bl	8005c92 <HAL_TIM_IC_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80019e4:	f7ff fcf4 	bl	80013d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019ec:	2302      	movs	r3, #2
 80019ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4810      	ldr	r0, [pc, #64]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 80019fa:	f004 f94a 	bl	8005c92 <HAL_TIM_IC_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001a04:	f7ff fce4 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a08:	2360      	movs	r3, #96	@ 0x60
 8001a0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001a20:	f004 f9d4 	bl	8005dcc <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8001a2a:	f7ff fcd1 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a2e:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <MX_TIM2_Init+0x14c>)
 8001a30:	f000 f8a2 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3748      	adds	r7, #72	@ 0x48
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000294 	.word	0x20000294
 8001a40:	0001869f 	.word	0x0001869f

08001a44 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a56:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a5c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001a60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a6a:	2263      	movs	r2, #99	@ 0x63
 8001a6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a76:	f003 fc77 	bl	8005368 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a80:	f7ff fca6 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_TIM6_Init+0x64>)
 8001a92:	f005 f945 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f7ff fc98 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002e0 	.word	0x200002e0
 8001aac:	40001000 	.word	0x40001000

08001ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad0:	d131      	bne.n	8001b36 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	4a26      	ldr	r2, [pc, #152]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a20      	ldr	r2, [pc, #128]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f001 fcfa 	bl	8003518 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 9, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2109      	movs	r1, #9
 8001b28:	201c      	movs	r0, #28
 8001b2a:	f001 fcbe 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b2e:	201c      	movs	r0, #28
 8001b30:	f001 fcd7 	bl	80034e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b34:	e018      	b.n	8001b68 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b74 <HAL_TIM_Base_MspInit+0xc4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d113      	bne.n	8001b68 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001b46:	f043 0310 	orr.w	r3, r3, #16
 8001b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_TIM_Base_MspInit+0xc0>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	2036      	movs	r0, #54	@ 0x36
 8001b5e:	f001 fca4 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b62:	2036      	movs	r0, #54	@ 0x36
 8001b64:	f001 fcbd 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	@ 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40001000 	.word	0x40001000

08001b78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b98:	d11c      	bne.n	8001bd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <HAL_TIM_MspPostInit+0x64>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bdc <HAL_TIM_MspPostInit+0x64>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <HAL_TIM_MspPostInit+0x64>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4804      	ldr	r0, [pc, #16]	@ (8001be0 <HAL_TIM_MspPostInit+0x68>)
 8001bd0:	f001 fca2 	bl	8003518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	48000400 	.word	0x48000400

08001be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <MX_USART2_UART_Init+0x5c>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c28:	f005 f920 	bl	8006e6c <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c32:	f7ff fbcd 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000032c 	.word	0x2000032c
 8001c40:	40004400 	.word	0x40004400

08001c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ac      	sub	sp, #176	@ 0xb0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2288      	movs	r2, #136	@ 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 fc08 	bl	800847a <memset>
  if(uartHandle->Instance==USART2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a21      	ldr	r2, [pc, #132]	@ (8001cf4 <HAL_UART_MspInit+0xb0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d13b      	bne.n	8001cec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 fea5 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f7ff fba0 	bl	80013d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb4:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce8:	f001 fc16 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	37b0      	adds	r7, #176	@ 0xb0
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40004400 	.word	0x40004400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d00:	f7ff fde4 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	@ (8001d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <LoopForever+0xe>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d48 <LoopForever+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f006 fbff 	bl	800852c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2e:	f7ff fab1 	bl	8001294 <main>

08001d32 <LoopForever>:

LoopForever:
    b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d40:	0800a6b0 	.word	0x0800a6b0
  ldr r2, =_sbss
 8001d44:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d48:	20000504 	.word	0x20000504

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>

08001d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f001 fb9b 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5e:	200f      	movs	r0, #15
 8001d60:	f000 f80e 	bl	8001d80 <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e001      	b.n	8001d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d70:	f7ff fc7e 	bl	8001670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d8c:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <HAL_InitTick+0x6c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d023      	beq.n	8001ddc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <HAL_InitTick+0x70>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <HAL_InitTick+0x6c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 fba7 	bl	80034fe <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d809      	bhi.n	8001dd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f001 fb71 	bl	80034aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_InitTick+0x74>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e004      	b.n	8001de0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e001      	b.n	8001de0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	200003b4 	.word	0x200003b4

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200003b4 	.word	0x200003b4

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3360      	adds	r3, #96	@ 0x60
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <LL_ADC_SetOffset+0x44>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	03fff000 	.word	0x03fff000

08001f30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3360      	adds	r3, #96	@ 0x60
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3360      	adds	r3, #96	@ 0x60
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3330      	adds	r3, #48	@ 0x30
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	4413      	add	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	211f      	movs	r1, #31
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 011f 	and.w	r1, r3, #31
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b087      	sub	sp, #28
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3314      	adds	r3, #20
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0e5b      	lsrs	r3, r3, #25
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2107      	movs	r1, #7
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0d1b      	lsrs	r3, r3, #20
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0318 	and.w	r3, r3, #24
 8002062:	4908      	ldr	r1, [pc, #32]	@ (8002084 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002064:	40d9      	lsrs	r1, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	400b      	ands	r3, r1
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	431a      	orrs	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	0007ffff 	.word	0x0007ffff

08002088 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 031f 	and.w	r3, r3, #31
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80020b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6093      	str	r3, [r2, #8]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002104:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800212c:	d101      	bne.n	8002132 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <LL_ADC_IsEnabled+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_ADC_IsEnabled+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsDisableOngoing+0x18>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsDisableOngoing+0x1a>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d101      	bne.n	800221c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b08      	cmp	r3, #8
 800223c:	d101      	bne.n	8002242 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b089      	sub	sp, #36	@ 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e130      	b.n	80024cc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7fe fe85 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff19 	bl	80020c8 <LL_ADC_IsDeepPowerDownEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff feff 	bl	80020a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff34 	bl	8002118 <LL_ADC_IsInternalRegulatorEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff18 	bl	80020f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c0:	4b84      	ldr	r3, [pc, #528]	@ (80024d4 <HAL_ADC_Init+0x284>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	4a84      	ldr	r2, [pc, #528]	@ (80024d8 <HAL_ADC_Init+0x288>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022d4:	e002      	b.n	80022dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff16 	bl	8002118 <LL_ADC_IsInternalRegulatorEnabled>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	f043 0210 	orr.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff76 	bl	8002204 <LL_ADC_REG_IsConversionOngoing>
 8002318:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80c9 	bne.w	80024ba <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80c5 	bne.w	80024ba <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff23 	bl	8002190 <LL_ADC_IsEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d115      	bne.n	800237c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002350:	4862      	ldr	r0, [pc, #392]	@ (80024dc <HAL_ADC_Init+0x28c>)
 8002352:	f7ff ff1d 	bl	8002190 <LL_ADC_IsEnabled>
 8002356:	4604      	mov	r4, r0
 8002358:	4861      	ldr	r0, [pc, #388]	@ (80024e0 <HAL_ADC_Init+0x290>)
 800235a:	f7ff ff19 	bl	8002190 <LL_ADC_IsEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	431c      	orrs	r4, r3
 8002362:	4860      	ldr	r0, [pc, #384]	@ (80024e4 <HAL_ADC_Init+0x294>)
 8002364:	f7ff ff14 	bl	8002190 <LL_ADC_IsEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	4323      	orrs	r3, r4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4619      	mov	r1, r3
 8002376:	485c      	ldr	r0, [pc, #368]	@ (80024e8 <HAL_ADC_Init+0x298>)
 8002378:	f7ff fd82 	bl	8001e80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e5b      	ldrb	r3, [r3, #25]
 8002380:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002386:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800238c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002392:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	3b01      	subs	r3, #1
 80023b0:	045b      	lsls	r3, r3, #17
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b44      	ldr	r3, [pc, #272]	@ (80024ec <HAL_ADC_Init+0x29c>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff1c 	bl	800222a <LL_ADC_INJ_IsConversionOngoing>
 80023f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d13d      	bne.n	8002476 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d13a      	bne.n	8002476 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002404:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800240c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800241c:	f023 0302 	bic.w	r3, r3, #2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	69b9      	ldr	r1, [r7, #24]
 8002426:	430b      	orrs	r3, r1
 8002428:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002430:	2b01      	cmp	r3, #1
 8002432:	d118      	bne.n	8002466 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002456:	430a      	orrs	r2, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	e007      	b.n	8002476 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10c      	bne.n	8002498 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	f023 010f 	bic.w	r1, r3, #15
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30
 8002496:	e007      	b.n	80024a8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 020f 	bic.w	r2, r2, #15
 80024a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	f023 0303 	bic.w	r3, r3, #3
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80024b8:	e007      	b.n	80024ca <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3724      	adds	r7, #36	@ 0x24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd90      	pop	{r4, r7, pc}
 80024d4:	20000000 	.word	0x20000000
 80024d8:	053e2d63 	.word	0x053e2d63
 80024dc:	50040000 	.word	0x50040000
 80024e0:	50040100 	.word	0x50040100
 80024e4:	50040200 	.word	0x50040200
 80024e8:	50040300 	.word	0x50040300
 80024ec:	fff0c007 	.word	0xfff0c007

080024f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f8:	4857      	ldr	r0, [pc, #348]	@ (8002658 <HAL_ADC_Start+0x168>)
 80024fa:	f7ff fdc5 	bl	8002088 <LL_ADC_GetMultimode>
 80024fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fe7d 	bl	8002204 <LL_ADC_REG_IsConversionOngoing>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 809c 	bne.w	800264a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_ADC_Start+0x30>
 800251c:	2302      	movs	r3, #2
 800251e:	e097      	b.n	8002650 <HAL_ADC_Start+0x160>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fc9b 	bl	8002e64 <ADC_Enable>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 8083 	bne.w	8002640 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_ADC_Start+0x16c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d002      	beq.n	800255e <HAL_ADC_Start+0x6e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_ADC_Start+0x70>
 800255e:	4b40      	ldr	r3, [pc, #256]	@ (8002660 <HAL_ADC_Start+0x170>)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4293      	cmp	r3, r2
 8002566:	d002      	beq.n	800256e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d105      	bne.n	800257a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002586:	d106      	bne.n	8002596 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f023 0206 	bic.w	r2, r3, #6
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	659a      	str	r2, [r3, #88]	@ 0x58
 8002594:	e002      	b.n	800259c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	221c      	movs	r2, #28
 80025a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2a      	ldr	r2, [pc, #168]	@ (800265c <HAL_ADC_Start+0x16c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d002      	beq.n	80025bc <HAL_ADC_Start+0xcc>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	e000      	b.n	80025be <HAL_ADC_Start+0xce>
 80025bc:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <HAL_ADC_Start+0x170>)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d008      	beq.n	80025d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d002      	beq.n	80025d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d114      	bne.n	8002602 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fdee 	bl	80021dc <LL_ADC_REG_StartConversion>
 8002600:	e025      	b.n	800264e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <HAL_ADC_Start+0x16c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d002      	beq.n	800261e <HAL_ADC_Start+0x12e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e000      	b.n	8002620 <HAL_ADC_Start+0x130>
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HAL_ADC_Start+0x170>)
 8002620:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00f      	beq.n	800264e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002632:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002636:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54
 800263e:	e006      	b.n	800264e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002648:	e001      	b.n	800264e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	50040300 	.word	0x50040300
 800265c:	50040100 	.word	0x50040100
 8002660:	50040000 	.word	0x50040000

08002664 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b0b6      	sub	sp, #216	@ 0xd8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x22>
 800269e:	2302      	movs	r3, #2
 80026a0:	e3c9      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x7b6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fda8 	bl	8002204 <LL_ADC_REG_IsConversionOngoing>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 83aa 	bne.w	8002e10 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d824      	bhi.n	8002716 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	3b02      	subs	r3, #2
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d81b      	bhi.n	800270e <HAL_ADC_ConfigChannel+0x8e>
 80026d6:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <HAL_ADC_ConfigChannel+0x5c>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026f5 	.word	0x080026f5
 80026e4:	080026fd 	.word	0x080026fd
 80026e8:	08002705 	.word	0x08002705
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80026ec:	230c      	movs	r3, #12
 80026ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80026f2:	e010      	b.n	8002716 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80026f4:	2312      	movs	r3, #18
 80026f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80026fa:	e00c      	b.n	8002716 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80026fc:	2318      	movs	r3, #24
 80026fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002702:	e008      	b.n	8002716 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800270c:	e003      	b.n	8002716 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800270e:	2306      	movs	r3, #6
 8002710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002714:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002724:	f7ff fc35 	bl	8001f92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fd69 	bl	8002204 <LL_ADC_REG_IsConversionOngoing>
 8002732:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fd75 	bl	800222a <LL_ADC_INJ_IsConversionOngoing>
 8002740:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 81a4 	bne.w	8002a96 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 819f 	bne.w	8002a96 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	461a      	mov	r2, r3
 8002766:	f7ff fc40 	bl	8001fea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	08db      	lsrs	r3, r3, #3
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d00a      	beq.n	80027a2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6919      	ldr	r1, [r3, #16]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800279c:	f7ff fba4 	bl	8001ee8 <LL_ADC_SetOffset>
 80027a0:	e179      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fbc1 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x14e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fbb6 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	0e9b      	lsrs	r3, r3, #26
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	e01e      	b.n	800280c <HAL_ADC_ConfigChannel+0x18c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fbab 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e004      	b.n	800280a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002800:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1a4>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	e018      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1d6>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800283c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e004      	b.n	8002856 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800284c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002856:	429a      	cmp	r2, r3
 8002858:	d106      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fb7a 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fb5e 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x214>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fb53 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	e01e      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x252>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fb48 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80028b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80028ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e004      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80028c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x26a>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	e018      	b.n	800291c <HAL_ADC_ConfigChannel+0x29c>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80028fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002902:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002906:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e004      	b.n	800291c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002912:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2200      	movs	r2, #0
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fb17 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2102      	movs	r1, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fafb 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <HAL_ADC_ConfigChannel+0x2da>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff faf0 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	e01e      	b.n	8002998 <HAL_ADC_ConfigChannel+0x318>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fae5 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002978:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800297c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e004      	b.n	8002996 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800298c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x330>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	e014      	b.n	80029da <HAL_ADC_ConfigChannel+0x35a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80029be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80029c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e004      	b.n	80029da <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80029d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029da:	429a      	cmp	r2, r3
 80029dc:	d106      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2102      	movs	r1, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fab8 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2103      	movs	r1, #3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fa9c 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2103      	movs	r1, #3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fa91 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	e017      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x3c8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fa86 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x3e0>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	e011      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x404>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002a72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e003      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2103      	movs	r1, #3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fa63 	bl	8001f5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fb78 	bl	8002190 <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8140 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f7ff fac3 	bl	8002040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a8f      	ldr	r2, [pc, #572]	@ (8002cfc <HAL_ADC_ConfigChannel+0x67c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	f040 8131 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x46e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	bf94      	ite	ls
 8002ae6:	2301      	movls	r3, #1
 8002ae8:	2300      	movhi	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e019      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x4a2>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d079      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x4c2>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	0e9b      	lsrs	r3, r3, #26
 8002b38:	3301      	adds	r3, #1
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b40:	e015      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x4ee>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b52:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e003      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	069b      	lsls	r3, r3, #26
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x50e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	e017      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x53e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x564>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 021f 	and.w	r2, r3, #31
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	051b      	lsls	r3, r3, #20
 8002be2:	e018      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x596>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e003      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f003 021f 	and.w	r2, r3, #31
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c16:	430b      	orrs	r3, r1
 8002c18:	e081      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x5b6>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c34:	e015      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x5e2>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e003      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x602>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	e017      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x632>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	ea42 0103 	orr.w	r1, r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x65e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b1e      	subs	r3, #30
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cdc:	e01e      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x69c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	60fb      	str	r3, [r7, #12]
  return result;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e006      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x688>
 8002cfa:	bf00      	nop
 8002cfc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	051b      	lsls	r3, r3, #20
 8002d18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7ff f961 	bl	8001fea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d07a      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d34:	4843      	ldr	r0, [pc, #268]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d36:	f7ff f8c9 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 8002d3a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a41      	ldr	r2, [pc, #260]	@ (8002e48 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d12c      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d126      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3c      	ldr	r2, [pc, #240]	@ (8002e4c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x6e8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	@ (8002e50 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d15d      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d70:	4619      	mov	r1, r3
 8002d72:	4834      	ldr	r0, [pc, #208]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d74:	f7ff f897 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	4a36      	ldr	r2, [pc, #216]	@ (8002e58 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	e040      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7dc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d118      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d112      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <HAL_ADC_ConfigChannel+0x7cc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x74c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d12d      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	481b      	ldr	r0, [pc, #108]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dd8:	f7ff f865 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ddc:	e024      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e60 <HAL_ADC_ConfigChannel+0x7e0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d120      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <HAL_ADC_ConfigChannel+0x7cc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d115      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e06:	4619      	mov	r1, r3
 8002e08:	480e      	ldr	r0, [pc, #56]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e0a:	f7ff f84c 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
 8002e0e:	e00c      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e22:	e002      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e24:	bf00      	nop
 8002e26:	e000      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e32:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	37d8      	adds	r7, #216	@ 0xd8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	80080000 	.word	0x80080000
 8002e44:	50040300 	.word	0x50040300
 8002e48:	c7520000 	.word	0xc7520000
 8002e4c:	50040000 	.word	0x50040000
 8002e50:	50040200 	.word	0x50040200
 8002e54:	20000000 	.word	0x20000000
 8002e58:	053e2d63 	.word	0x053e2d63
 8002e5c:	cb840000 	.word	0xcb840000
 8002e60:	80000001 	.word	0x80000001

08002e64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff f98b 	bl	8002190 <LL_ADC_IsEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d169      	bne.n	8002f54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <ADC_Enable+0xfc>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	f043 0210 	orr.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e055      	b.n	8002f56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f946 	bl	8002140 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002eb4:	482b      	ldr	r0, [pc, #172]	@ (8002f64 <ADC_Enable+0x100>)
 8002eb6:	f7ff f809 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 8002eba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec4:	4b28      	ldr	r3, [pc, #160]	@ (8002f68 <ADC_Enable+0x104>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	4a28      	ldr	r2, [pc, #160]	@ (8002f6c <ADC_Enable+0x108>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ede:	e002      	b.n	8002ee6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eec:	f7fe ff98 	bl	8001e20 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef2:	e028      	b.n	8002f46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff f949 	bl	8002190 <LL_ADC_IsEnabled>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f919 	bl	8002140 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0e:	f7fe ff87 	bl	8001e20 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d914      	bls.n	8002f46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d00d      	beq.n	8002f46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d1cf      	bne.n	8002ef4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	8000003f 	.word	0x8000003f
 8002f64:	50040300 	.word	0x50040300
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	053e2d63 	.word	0x053e2d63

08002f70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f91a 	bl	80021b6 <LL_ADC_IsDisableOngoing>
 8002f82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f901 	bl	8002190 <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d047      	beq.n	8003024 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d144      	bne.n	8003024 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030d 	and.w	r3, r3, #13
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10c      	bne.n	8002fc2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f8db 	bl	8002168 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fba:	f7fe ff31 	bl	8001e20 <HAL_GetTick>
 8002fbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fc0:	e029      	b.n	8003016 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	f043 0210 	orr.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e023      	b.n	8003026 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fde:	f7fe ff1f 	bl	8001e20 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d914      	bls.n	8003016 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1dc      	bne.n	8002fde <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <LL_ADC_IsEnabled>:
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <LL_ADC_IsEnabled+0x18>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_ADC_IsEnabled+0x1a>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_StartCalibration>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003066:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003070:	4313      	orrs	r3, r2
 8003072:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_IsCalibrationOnGoing>:
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_REG_IsConversionOngoing>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e04d      	b.n	800318c <HAL_ADCEx_Calibration_Start+0xb8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff39 	bl	8002f70 <ADC_Disable>
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d136      	bne.n	8003176 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003110:	f023 0302 	bic.w	r3, r3, #2
 8003114:	f043 0202 	orr.w	r2, r3, #2
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff96 	bl	8003054 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003128:	e014      	b.n	8003154 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3301      	adds	r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003136:	d30d      	bcc.n	8003154 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f023 0312 	bic.w	r3, r3, #18
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e01b      	b.n	800318c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff94 	bl	8003086 <LL_ADC_IsCalibrationOnGoing>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e2      	bne.n	800312a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f023 0303 	bic.w	r3, r3, #3
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
 8003174:	e005      	b.n	8003182 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b09f      	sub	sp, #124	@ 0x7c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e093      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031ba:	2300      	movs	r3, #0
 80031bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031be:	2300      	movs	r3, #0
 80031c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a47      	ldr	r2, [pc, #284]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031cc:	4b46      	ldr	r3, [pc, #280]	@ (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e001      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e072      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff59 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 80031fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff53 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d154      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800320e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003210:	2b00      	cmp	r3, #0
 8003212:	d151      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003216:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02c      	beq.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003232:	035b      	lsls	r3, r3, #13
 8003234:	430b      	orrs	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800323a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800323c:	4829      	ldr	r0, [pc, #164]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800323e:	f7ff fef6 	bl	800302e <LL_ADC_IsEnabled>
 8003242:	4604      	mov	r4, r0
 8003244:	4828      	ldr	r0, [pc, #160]	@ (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003246:	f7ff fef2 	bl	800302e <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	431c      	orrs	r4, r3
 800324e:	4828      	ldr	r0, [pc, #160]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003250:	f7ff feed 	bl	800302e <LL_ADC_IsEnabled>
 8003254:	4603      	mov	r3, r0
 8003256:	4323      	orrs	r3, r4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d137      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800325c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6811      	ldr	r1, [r2, #0]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	430a      	orrs	r2, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003276:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	e028      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800327a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003284:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003286:	4817      	ldr	r0, [pc, #92]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003288:	f7ff fed1 	bl	800302e <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4816      	ldr	r0, [pc, #88]	@ (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003290:	f7ff fecd 	bl	800302e <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	431c      	orrs	r4, r3
 8003298:	4815      	ldr	r0, [pc, #84]	@ (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800329a:	f7ff fec8 	bl	800302e <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	4323      	orrs	r3, r4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d112      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b6:	e009      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80032ca:	e000      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80032d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80032da:	4618      	mov	r0, r3
 80032dc:	377c      	adds	r7, #124	@ 0x7c
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	50040000 	.word	0x50040000
 80032e8:	50040100 	.word	0x50040100
 80032ec:	50040300 	.word	0x50040300
 80032f0:	50040200 	.word	0x50040200

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	@ (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	@ (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4907      	ldr	r1, [pc, #28]	@ (8003390 <__NVIC_EnableIRQ+0x38>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100

08003394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db0a      	blt.n	80033be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	490c      	ldr	r1, [pc, #48]	@ (80033e0 <__NVIC_SetPriority+0x4c>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033bc:	e00a      	b.n	80033d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4908      	ldr	r1, [pc, #32]	@ (80033e4 <__NVIC_SetPriority+0x50>)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3b04      	subs	r3, #4
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	761a      	strb	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	@ 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf28      	it	cs
 8003406:	2304      	movcs	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3304      	adds	r3, #4
 800340e:	2b06      	cmp	r3, #6
 8003410:	d902      	bls.n	8003418 <NVIC_EncodePriority+0x30>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3b03      	subs	r3, #3
 8003416:	e000      	b.n	800341a <NVIC_EncodePriority+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	f04f 32ff 	mov.w	r2, #4294967295
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43d9      	mvns	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	4313      	orrs	r3, r2
         );
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	@ 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff8e 	bl	8003394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff29 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff3e 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff8e 	bl	80033e8 <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5d 	bl	8003394 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff31 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003526:	e17f      	b.n	8003828 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	4013      	ands	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8171 	beq.w	8003822 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d005      	beq.n	8003558 <HAL_GPIO_Init+0x40>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d130      	bne.n	80035ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358e:	2201      	movs	r2, #1
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0201 	and.w	r2, r3, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d118      	bne.n	80035f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035cc:	2201      	movs	r2, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	f003 0201 	and.w	r2, r3, #1
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d017      	beq.n	8003634 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d123      	bne.n	8003688 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	08da      	lsrs	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3208      	adds	r2, #8
 8003682:	6939      	ldr	r1, [r7, #16]
 8003684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80ac 	beq.w	8003822 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003848 <HAL_GPIO_Init+0x330>)
 80036cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003848 <HAL_GPIO_Init+0x330>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80036d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003848 <HAL_GPIO_Init+0x330>)
 80036d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e2:	4a5a      	ldr	r2, [pc, #360]	@ (800384c <HAL_GPIO_Init+0x334>)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800370c:	d025      	beq.n	800375a <HAL_GPIO_Init+0x242>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4f      	ldr	r2, [pc, #316]	@ (8003850 <HAL_GPIO_Init+0x338>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01f      	beq.n	8003756 <HAL_GPIO_Init+0x23e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4e      	ldr	r2, [pc, #312]	@ (8003854 <HAL_GPIO_Init+0x33c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d019      	beq.n	8003752 <HAL_GPIO_Init+0x23a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4d      	ldr	r2, [pc, #308]	@ (8003858 <HAL_GPIO_Init+0x340>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0x236>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4c      	ldr	r2, [pc, #304]	@ (800385c <HAL_GPIO_Init+0x344>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00d      	beq.n	800374a <HAL_GPIO_Init+0x232>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4b      	ldr	r2, [pc, #300]	@ (8003860 <HAL_GPIO_Init+0x348>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <HAL_GPIO_Init+0x22e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4a      	ldr	r2, [pc, #296]	@ (8003864 <HAL_GPIO_Init+0x34c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_GPIO_Init+0x22a>
 800373e:	2306      	movs	r3, #6
 8003740:	e00c      	b.n	800375c <HAL_GPIO_Init+0x244>
 8003742:	2307      	movs	r3, #7
 8003744:	e00a      	b.n	800375c <HAL_GPIO_Init+0x244>
 8003746:	2305      	movs	r3, #5
 8003748:	e008      	b.n	800375c <HAL_GPIO_Init+0x244>
 800374a:	2304      	movs	r3, #4
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x244>
 800374e:	2303      	movs	r3, #3
 8003750:	e004      	b.n	800375c <HAL_GPIO_Init+0x244>
 8003752:	2302      	movs	r3, #2
 8003754:	e002      	b.n	800375c <HAL_GPIO_Init+0x244>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_GPIO_Init+0x244>
 800375a:	2300      	movs	r3, #0
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	f002 0203 	and.w	r2, r2, #3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4093      	lsls	r3, r2
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800376c:	4937      	ldr	r1, [pc, #220]	@ (800384c <HAL_GPIO_Init+0x334>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377a:	4b3b      	ldr	r3, [pc, #236]	@ (8003868 <HAL_GPIO_Init+0x350>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800379e:	4a32      	ldr	r2, [pc, #200]	@ (8003868 <HAL_GPIO_Init+0x350>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a4:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <HAL_GPIO_Init+0x350>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c8:	4a27      	ldr	r2, [pc, #156]	@ (8003868 <HAL_GPIO_Init+0x350>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037ce:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <HAL_GPIO_Init+0x350>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003868 <HAL_GPIO_Init+0x350>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <HAL_GPIO_Init+0x350>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800381c:	4a12      	ldr	r2, [pc, #72]	@ (8003868 <HAL_GPIO_Init+0x350>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	3301      	adds	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa22 f303 	lsr.w	r3, r2, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	f47f ae78 	bne.w	8003528 <HAL_GPIO_Init+0x10>
  }
}
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	48001400 	.word	0x48001400
 8003864:	48001800 	.word	0x48001800
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0c3      	b.n	8003a3a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d101      	bne.n	80038c2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0bb      	b.n	8003a3a <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d101      	bne.n	80038d2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0b3      	b.n	8003a3a <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fd9e 	bl	8001430 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003902:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d11b      	bne.n	8003944 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 8003916:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6891      	ldr	r1, [r2, #8]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6992      	ldr	r2, [r2, #24]
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6912      	ldr	r2, [r2, #16]
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6952      	ldr	r2, [r2, #20]
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	69d2      	ldr	r2, [r2, #28]
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	430b      	orrs	r3, r1
 8003942:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	d115      	bne.n	8003978 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8003956:	f023 030e 	bic.w	r3, r3, #14
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6891      	ldr	r1, [r2, #8]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6952      	ldr	r2, [r2, #20]
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	69d2      	ldr	r2, [r2, #28]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d118      	bne.n	80039b2 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 800398a:	f023 030e 	bic.w	r3, r3, #14
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6891      	ldr	r1, [r2, #8]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68d2      	ldr	r2, [r2, #12]
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6912      	ldr	r2, [r2, #16]
 800399c:	4311      	orrs	r1, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6952      	ldr	r2, [r2, #20]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	69d2      	ldr	r2, [r2, #28]
 80039a8:	4311      	orrs	r1, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ba:	d12a      	bne.n	8003a12 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d013      	beq.n	80039ec <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80039dc:	f023 031f 	bic.w	r3, r3, #31
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6053      	str	r3, [r2, #4]
 80039ea:	e012      	b.n	8003a12 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003a04:	f023 031f 	bic.w	r3, r3, #31
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <HAL_OPAMP_Init+0x1a8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4909      	ldr	r1, [pc, #36]	@ (8003a44 <HAL_OPAMP_Init+0x1a8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40007800 	.word	0x40007800

08003a48 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e01d      	b.n	8003a9c <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d102      	bne.n	8003a72 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e014      	b.n	8003a9c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10c      	bne.n	8003a98 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2204      	movs	r2, #4
 8003a92:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8003a96:	e001      	b.n	8003a9c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status

  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b088      	sub	sp, #32
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	77fb      	strb	r3, [r7, #31]

  __IO uint32_t* tmp_opamp_reg_trimming;   /* Selection of register of trimming depending on power mode: OTR or LPOTR */

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_OPAMP_SelfCalibrate+0x18>
  {
    status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e10d      	b.n	8003cde <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d102      	bne.n	8003ad4 <HAL_OPAMP_SelfCalibrate+0x2a>
  {
    status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e104      	b.n	8003cde <HAL_OPAMP_SelfCalibrate+0x234>
  }
  else
  {
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 80fc 	bne.w	8003cda <HAL_OPAMP_SelfCalibrate+0x230>
      assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));

      /* Save OPAMP mode as in                                       */
      /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx */
      /* the calibration is not working in PGA mode                  */
      opampmode = READ_BIT(hopamp->Instance->CSR,OPAMP_CSR_OPAMODE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	60bb      	str	r3, [r7, #8]

      /* Use of standalone mode */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, OPAMP_STANDALONE_MODE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 020c 	bic.w	r2, r2, #12
 8003afc:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Select trimming settings depending on power mode */
      if (hopamp->Init.PowerMode == OPAMP_POWERMODE_NORMALPOWER)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <HAL_OPAMP_SelfCalibrate+0x76>
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->OTR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e003      	b.n	8003b28 <HAL_OPAMP_SelfCalibrate+0x7e>
      }
      else
      {
        tmp_opamp_reg_trimming = &hopamp->Instance->LPOTR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	60fb      	str	r3, [r7, #12]
      }

      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b36:	601a      	str	r2, [r3, #0]

      /* 1st calibration - N */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b46:	601a      	str	r2, [r3, #0]

      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluen = 16U;
 8003b58:	2310      	movs	r3, #16
 8003b5a:	61bb      	str	r3, [r7, #24]
      delta = 8U;
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003b60:	e01d      	b.n	8003b9e <HAL_OPAMP_SelfCalibrate+0xf4>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 021f 	bic.w	r2, r3, #31
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fe f960 	bl	8001e38 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_OPAMP_SelfCalibrate+0xe6>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluen -= delta;
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e003      	b.n	8003b98 <HAL_OPAMP_SelfCalibrate+0xee>
        }
        else
        {
          /* OPAMP_CSR_CALOUT is LOW try lower trimming */
          trimmingvaluen += delta;
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        }
        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1de      	bne.n	8003b62 <HAL_OPAMP_SelfCalibrate+0xb8>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 0 to 1  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 021f 	bic.w	r2, r3, #31
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f7fe f93f 	bl	8001e38 <HAL_Delay>

      if ((READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT)) == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_OPAMP_SelfCalibrate+0x134>
      {
        /* Trimming value is actually one value more */
        trimmingvaluen++;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
        /* Set right trimming */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETN, trimmingvaluen);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 021f 	bic.w	r2, r3, #31
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]
      }

      /* 2nd calibration - P */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALSEL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bec:	601a      	str	r2, [r3, #0]

      /* Init trimming counter */
      /* Medium value */
      trimmingvaluep = 16U;
 8003bee:	2310      	movs	r3, #16
 8003bf0:	617b      	str	r3, [r7, #20]
      delta = 8U;
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	613b      	str	r3, [r7, #16]

      while (delta != 0U)
 8003bf6:	e01e      	b.n	8003c36 <HAL_OPAMP_SelfCalibrate+0x18c>
      {
        /* Set candidate trimming */
        /* OPAMP_POWERMODE_NORMALPOWER */
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]

        /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7fe f914 	bl	8001e38 <HAL_Delay>

        if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_OPAMP_SelfCalibrate+0x17e>
        {
          /* OPAMP_CSR_CALOUT is HIGH try higher trimming */
          trimmingvaluep += delta;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e003      	b.n	8003c30 <HAL_OPAMP_SelfCalibrate+0x186>
        }
        else
        {
          /* OPAMP_CSR_CALOUT  is LOW try lower trimming */
          trimmingvaluep -= delta;
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
        }

        /* Divide range by 2 to continue dichotomy sweep */
        delta >>= 1U;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
      while (delta != 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1dd      	bne.n	8003bf8 <HAL_OPAMP_SelfCalibrate+0x14e>
      }

      /* Still need to check if right calibration is current value or one step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      /* Set candidate trimming */
      MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

      /* OFFTRIMmax delay 1 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(OPAMP_TRIMMING_DELAY);
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f7fe f8f2 	bl	8001e38 <HAL_Delay>

      if (READ_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALOUT) != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_OPAMP_SelfCalibrate+0x1d0>
      {
        /* Trimming value is actually one value more */
        trimmingvaluep++;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	3301      	adds	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
        MODIFY_REG(*tmp_opamp_reg_trimming, OPAMP_OTR_TRIMOFFSETP, (trimmingvaluep<<OPAMP_INPUT_NONINVERTING));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]
      }

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

      /* Disable calibration & set normal mode (operating mode) */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c98:	601a      	str	r2, [r3, #0]

      /* Self calibration is successful  */
      /* Store calibration(user trimming) results in init structure. */

      /* Set user trimming mode */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ca0:	61da      	str	r2, [r3, #28]

      /* Affect calibration parameters depending on mode normal/low power */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d006      	beq.n	8003cb8 <HAL_OPAMP_SelfCalibrate+0x20e>
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueN = trimmingvaluen;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Write calibration result P */
        hopamp->Init.TrimmingValueP = trimmingvaluep;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	621a      	str	r2, [r3, #32]
 8003cb6:	e005      	b.n	8003cc4 <HAL_OPAMP_SelfCalibrate+0x21a>
      }
      else
      {
        /* Write calibration result N */
        hopamp->Init.TrimmingValueNLowPower = trimmingvaluen;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
        /* Write calibration result P */
        hopamp->Init.TrimmingValuePLowPower = trimmingvaluep;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	629a      	str	r2, [r3, #40]	@ 0x28
      }

    /* Restore OPAMP mode after calibration */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_OPAMODE, opampmode);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 010c 	bic.w	r1, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e001      	b.n	8003cde <HAL_OPAMP_SelfCalibrate+0x234>
    }
    else
    {
      /* OPAMP can not be calibrated from this mode */
      status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	@ (8003d04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40007000 	.word	0x40007000

08003d08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d0c:	4b04      	ldr	r3, [pc, #16]	@ (8003d20 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40007000 	.word	0x40007000

08003d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d32:	d130      	bne.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d34:	4b23      	ldr	r3, [pc, #140]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d40:	d038      	beq.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d42:	4b20      	ldr	r3, [pc, #128]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d52:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2232      	movs	r2, #50	@ 0x32
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	3301      	adds	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d68:	e002      	b.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7c:	d102      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f2      	bne.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d84:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d90:	d110      	bne.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e00f      	b.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d96:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d007      	beq.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003da4:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dac:	4a05      	ldr	r2, [pc, #20]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003db2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	431bde83 	.word	0x431bde83

08003dd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e3ca      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de2:	4b97      	ldr	r3, [pc, #604]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dec:	4b94      	ldr	r3, [pc, #592]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80e4 	beq.w	8003fcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4a>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	f040 808b 	bne.w	8003f28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f040 8087 	bne.w	8003f28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e1a:	4b89      	ldr	r3, [pc, #548]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e3a2      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	4b82      	ldr	r3, [pc, #520]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_RCC_OscConfig+0x7c>
 8003e42:	4b7f      	ldr	r3, [pc, #508]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e4a:	e005      	b.n	8003e58 <HAL_RCC_OscConfig+0x88>
 8003e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d223      	bcs.n	8003ea4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fd55 	bl	8004910 <RCC_SetFlashLatencyFromMSIRange>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e383      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e70:	4b73      	ldr	r3, [pc, #460]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a72      	ldr	r2, [pc, #456]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b70      	ldr	r3, [pc, #448]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	496d      	ldr	r1, [pc, #436]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	4968      	ldr	r1, [pc, #416]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
 8003ea2:	e025      	b.n	8003ef0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea4:	4b66      	ldr	r3, [pc, #408]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	f043 0308 	orr.w	r3, r3, #8
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b63      	ldr	r3, [pc, #396]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4960      	ldr	r1, [pc, #384]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	495b      	ldr	r1, [pc, #364]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd15 	bl	8004910 <RCC_SetFlashLatencyFromMSIRange>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e343      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef0:	f000 fc4a 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b52      	ldr	r3, [pc, #328]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	4950      	ldr	r1, [pc, #320]	@ (8004044 <HAL_RCC_OscConfig+0x274>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8004048 <HAL_RCC_OscConfig+0x278>)
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f10:	4b4e      	ldr	r3, [pc, #312]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd ff33 	bl	8001d80 <HAL_InitTick>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d052      	beq.n	8003fca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	e327      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d032      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f30:	4b43      	ldr	r3, [pc, #268]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a42      	ldr	r2, [pc, #264]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd ff70 	bl	8001e20 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f44:	f7fd ff6c 	bl	8001e20 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e310      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f56:	4b3a      	ldr	r3, [pc, #232]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f62:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a36      	ldr	r2, [pc, #216]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b34      	ldr	r3, [pc, #208]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4931      	ldr	r1, [pc, #196]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f80:	4b2f      	ldr	r3, [pc, #188]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	492c      	ldr	r1, [pc, #176]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	e01a      	b.n	8003fcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f96:	4b2a      	ldr	r3, [pc, #168]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a29      	ldr	r2, [pc, #164]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd ff3d 	bl	8001e20 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003faa:	f7fd ff39 	bl	8001e20 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e2dd      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fbc:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x1da>
 8003fc8:	e000      	b.n	8003fcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d074      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x21a>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d10e      	bne.n	8004002 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fea:	4b15      	ldr	r3, [pc, #84]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d064      	beq.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d160      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e2ba      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x24a>
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e026      	b.n	8004068 <HAL_RCC_OscConfig+0x298>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004022:	d115      	bne.n	8004050 <HAL_RCC_OscConfig+0x280>
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a05      	ldr	r2, [pc, #20]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 800402a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a02      	ldr	r2, [pc, #8]	@ (8004040 <HAL_RCC_OscConfig+0x270>)
 8004036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e014      	b.n	8004068 <HAL_RCC_OscConfig+0x298>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	0800a2e4 	.word	0x0800a2e4
 8004048:	20000000 	.word	0x20000000
 800404c:	20000004 	.word	0x20000004
 8004050:	4ba0      	ldr	r3, [pc, #640]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a9f      	ldr	r2, [pc, #636]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b9d      	ldr	r3, [pc, #628]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a9c      	ldr	r2, [pc, #624]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fed6 	bl	8001e20 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004078:	f7fd fed2 	bl	8001e20 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	@ 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e276      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408a:	4b92      	ldr	r3, [pc, #584]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x2a8>
 8004096:	e014      	b.n	80040c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd fec2 	bl	8001e20 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fd febe 	bl	8001e20 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	@ 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e262      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b2:	4b88      	ldr	r3, [pc, #544]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2d0>
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d060      	beq.n	8004190 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_OscConfig+0x310>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d119      	bne.n	800410e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d116      	bne.n	800410e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e0:	4b7c      	ldr	r3, [pc, #496]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x328>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e23f      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f8:	4b76      	ldr	r3, [pc, #472]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	4973      	ldr	r1, [pc, #460]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800410c:	e040      	b.n	8004190 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d023      	beq.n	800415e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004116:	4b6f      	ldr	r3, [pc, #444]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6e      	ldr	r2, [pc, #440]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fd fe7d 	bl	8001e20 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412a:	f7fd fe79 	bl	8001e20 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e21d      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800413c:	4b65      	ldr	r3, [pc, #404]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b62      	ldr	r3, [pc, #392]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	495f      	ldr	r1, [pc, #380]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
 800415c:	e018      	b.n	8004190 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415e:	4b5d      	ldr	r3, [pc, #372]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a5c      	ldr	r2, [pc, #368]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fd fe59 	bl	8001e20 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7fd fe55 	bl	8001e20 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1f9      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004184:	4b53      	ldr	r3, [pc, #332]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03c      	beq.n	8004216 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01c      	beq.n	80041de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a4:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041aa:	4a4a      	ldr	r2, [pc, #296]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fe34 	bl	8001e20 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fd fe30 	bl	8001e20 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1d4      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ce:	4b41      	ldr	r3, [pc, #260]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ef      	beq.n	80041bc <HAL_RCC_OscConfig+0x3ec>
 80041dc:	e01b      	b.n	8004216 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041de:	4b3d      	ldr	r3, [pc, #244]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e4:	4a3b      	ldr	r2, [pc, #236]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fd fe17 	bl	8001e20 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fd fe13 	bl	8001e20 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1b7      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004208:	4b32      	ldr	r3, [pc, #200]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ef      	bne.n	80041f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80a6 	beq.w	8004370 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004228:	4b2a      	ldr	r3, [pc, #168]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004234:	4b27      	ldr	r3, [pc, #156]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004240:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424c:	2301      	movs	r3, #1
 800424e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b21      	ldr	r3, [pc, #132]	@ (80042d8 <HAL_RCC_OscConfig+0x508>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d118      	bne.n	800428e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425c:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <HAL_RCC_OscConfig+0x508>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <HAL_RCC_OscConfig+0x508>)
 8004262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004268:	f7fd fdda 	bl	8001e20 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004270:	f7fd fdd6 	bl	8001e20 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e17a      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004282:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <HAL_RCC_OscConfig+0x508>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4d8>
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042a6:	e029      	b.n	80042fc <HAL_RCC_OscConfig+0x52c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d115      	bne.n	80042dc <HAL_RCC_OscConfig+0x50c>
 80042b0:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	4a07      	ldr	r2, [pc, #28]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c0:	4b04      	ldr	r3, [pc, #16]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	4a03      	ldr	r2, [pc, #12]	@ (80042d4 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042d0:	e014      	b.n	80042fc <HAL_RCC_OscConfig+0x52c>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
 80042dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e2:	4a9b      	ldr	r2, [pc, #620]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042ec:	4b98      	ldr	r3, [pc, #608]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f2:	4a97      	ldr	r2, [pc, #604]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004304:	f7fd fd8c 	bl	8001e20 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fd fd88 	bl	8001e20 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e12a      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004322:	4b8b      	ldr	r3, [pc, #556]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ed      	beq.n	800430c <HAL_RCC_OscConfig+0x53c>
 8004330:	e015      	b.n	800435e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fd fd75 	bl	8001e20 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fd fd71 	bl	8001e20 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e113      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004350:	4b7f      	ldr	r3, [pc, #508]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ed      	bne.n	800433a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435e:	7ffb      	ldrb	r3, [r7, #31]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b7a      	ldr	r3, [pc, #488]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004368:	4a79      	ldr	r2, [pc, #484]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80fe 	beq.w	8004576 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	2b02      	cmp	r3, #2
 8004380:	f040 80d0 	bne.w	8004524 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004384:	4b72      	ldr	r3, [pc, #456]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 0203 	and.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d130      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d127      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d11f      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043c4:	2a07      	cmp	r2, #7
 80043c6:	bf14      	ite	ne
 80043c8:	2201      	movne	r2, #1
 80043ca:	2200      	moveq	r2, #0
 80043cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d113      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	3b01      	subs	r3, #1
 80043e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d109      	bne.n	80043fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	3b01      	subs	r3, #1
 80043f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d06e      	beq.n	80044d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d069      	beq.n	80044d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004400:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800440c:	4b50      	ldr	r3, [pc, #320]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0ad      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800441c:	4b4c      	ldr	r3, [pc, #304]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a4b      	ldr	r2, [pc, #300]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004428:	f7fd fcfa 	bl	8001e20 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd fcf6 	bl	8001e20 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e09a      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004442:	4b43      	ldr	r3, [pc, #268]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444e:	4b40      	ldr	r3, [pc, #256]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	4b40      	ldr	r3, [pc, #256]	@ (8004554 <HAL_RCC_OscConfig+0x784>)
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800445e:	3a01      	subs	r2, #1
 8004460:	0112      	lsls	r2, r2, #4
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004468:	0212      	lsls	r2, r2, #8
 800446a:	4311      	orrs	r1, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004470:	0852      	lsrs	r2, r2, #1
 8004472:	3a01      	subs	r2, #1
 8004474:	0552      	lsls	r2, r2, #21
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800447c:	0852      	lsrs	r2, r2, #1
 800447e:	3a01      	subs	r2, #1
 8004480:	0652      	lsls	r2, r2, #25
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004488:	0912      	lsrs	r2, r2, #4
 800448a:	0452      	lsls	r2, r2, #17
 800448c:	430a      	orrs	r2, r1
 800448e:	4930      	ldr	r1, [pc, #192]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004490:	4313      	orrs	r3, r2
 8004492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004494:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2d      	ldr	r2, [pc, #180]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ac:	f7fd fcb8 	bl	8001e20 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fcb4 	bl	8001e20 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e058      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	4b22      	ldr	r3, [pc, #136]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d2:	e050      	b.n	8004576 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e04f      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d148      	bne.n	8004576 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f0:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044fc:	f7fd fc90 	bl	8001e20 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fd fc8c 	bl	8001e20 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e030      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x734>
 8004522:	e028      	b.n	8004576 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d023      	beq.n	8004572 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <HAL_RCC_OscConfig+0x780>)
 8004530:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fd fc73 	bl	8001e20 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453c:	e00c      	b.n	8004558 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fd fc6f 	bl	8001e20 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d905      	bls.n	8004558 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e013      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
 8004550:	40021000 	.word	0x40021000
 8004554:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <HAL_RCC_OscConfig+0x7b0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ec      	bne.n	800453e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004564:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_OscConfig+0x7b0>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4905      	ldr	r1, [pc, #20]	@ (8004580 <HAL_RCC_OscConfig+0x7b0>)
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_RCC_OscConfig+0x7b4>)
 800456c:	4013      	ands	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
 8004570:	e001      	b.n	8004576 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	feeefffc 	.word	0xfeeefffc

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0e7      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b75      	ldr	r3, [pc, #468]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d910      	bls.n	80045cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b72      	ldr	r3, [pc, #456]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 0207 	bic.w	r2, r3, #7
 80045b2:	4970      	ldr	r1, [pc, #448]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0cf      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b66      	ldr	r3, [pc, #408]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d908      	bls.n	80045fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b63      	ldr	r3, [pc, #396]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4960      	ldr	r1, [pc, #384]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04c      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460e:	4b5a      	ldr	r3, [pc, #360]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d121      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0a6      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	4b54      	ldr	r3, [pc, #336]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e09a      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800463e:	4b4e      	ldr	r3, [pc, #312]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e08e      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464e:	4b4a      	ldr	r3, [pc, #296]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e086      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b46      	ldr	r3, [pc, #280]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4943      	ldr	r1, [pc, #268]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004670:	f7fd fbd6 	bl	8001e20 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fbd2 	bl	8001e20 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e06e      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b3a      	ldr	r3, [pc, #232]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b31      	ldr	r3, [pc, #196]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d208      	bcs.n	80046ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	492b      	ldr	r1, [pc, #172]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ce:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d210      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f023 0207 	bic.w	r2, r3, #7
 80046e4:	4923      	ldr	r1, [pc, #140]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <HAL_RCC_ClockConfig+0x1ec>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e036      	b.n	800476c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470a:	4b1b      	ldr	r3, [pc, #108]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4918      	ldr	r1, [pc, #96]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004728:	4b13      	ldr	r3, [pc, #76]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4910      	ldr	r1, [pc, #64]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800473c:	f000 f824 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	490b      	ldr	r1, [pc, #44]	@ (800477c <HAL_RCC_ClockConfig+0x1f4>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <HAL_RCC_ClockConfig+0x1f8>)
 800475a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_ClockConfig+0x1fc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fb0d 	bl	8001d80 <HAL_InitTick>
 8004766:	4603      	mov	r3, r0
 8004768:	72fb      	strb	r3, [r7, #11]

  return status;
 800476a:	7afb      	ldrb	r3, [r7, #11]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40022000 	.word	0x40022000
 8004778:	40021000 	.word	0x40021000
 800477c:	0800a2e4 	.word	0x0800a2e4
 8004780:	20000000 	.word	0x20000000
 8004784:	20000004 	.word	0x20000004

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	@ 0x24
 800478c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004796:	4b3e      	ldr	r3, [pc, #248]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x34>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d121      	bne.n	80047fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d11e      	bne.n	80047fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047bc:	4b34      	ldr	r3, [pc, #208]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047c8:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e005      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f8:	e00a      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d102      	bne.n	8004806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004800:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x110>)
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e004      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d101      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800480c:	4b23      	ldr	r3, [pc, #140]	@ (800489c <HAL_RCC_GetSysClockFreq+0x114>)
 800480e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d134      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004816:	4b1e      	ldr	r3, [pc, #120]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0xa6>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d003      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0xac>
 800482c:	e005      	b.n	800483a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800482e:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x110>)
 8004830:	617b      	str	r3, [r7, #20]
      break;
 8004832:	e005      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004834:	4b19      	ldr	r3, [pc, #100]	@ (800489c <HAL_RCC_GetSysClockFreq+0x114>)
 8004836:	617b      	str	r3, [r7, #20]
      break;
 8004838:	e002      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	617b      	str	r3, [r7, #20]
      break;
 800483e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004840:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	3301      	adds	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800484e:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	fb03 f202 	mul.w	r2, r3, r2
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x108>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0e5b      	lsrs	r3, r3, #25
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	3301      	adds	r3, #1
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004880:	69bb      	ldr	r3, [r7, #24]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3724      	adds	r7, #36	@ 0x24
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	0800a2fc 	.word	0x0800a2fc
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200

080048a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000000 	.word	0x20000000

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048bc:	f7ff fff0 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	@ (80048e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800a2f4 	.word	0x0800a2f4

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048e8:	f7ff ffda 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0adb      	lsrs	r3, r3, #11
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <HAL_RCC_GetPCLK2Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	0800a2f4 	.word	0x0800a2f4

08004910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800491c:	4b2a      	ldr	r3, [pc, #168]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004928:	f7ff f9ee 	bl	8003d08 <HAL_PWREx_GetVoltageRange>
 800492c:	6178      	str	r0, [r7, #20]
 800492e:	e014      	b.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004930:	4b25      	ldr	r3, [pc, #148]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	4a24      	ldr	r2, [pc, #144]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493a:	6593      	str	r3, [r2, #88]	@ 0x58
 800493c:	4b22      	ldr	r3, [pc, #136]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004948:	f7ff f9de 	bl	8003d08 <HAL_PWREx_GetVoltageRange>
 800494c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004958:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004960:	d10b      	bne.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b80      	cmp	r3, #128	@ 0x80
 8004966:	d919      	bls.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2ba0      	cmp	r3, #160	@ 0xa0
 800496c:	d902      	bls.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800496e:	2302      	movs	r3, #2
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	e013      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004974:	2301      	movs	r3, #1
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e010      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b80      	cmp	r3, #128	@ 0x80
 800497e:	d902      	bls.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004980:	2303      	movs	r3, #3
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e00a      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b80      	cmp	r3, #128	@ 0x80
 800498a:	d102      	bne.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800498c:	2302      	movs	r3, #2
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e004      	b.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b70      	cmp	r3, #112	@ 0x70
 8004996:	d101      	bne.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004998:	2301      	movs	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f023 0207 	bic.w	r2, r3, #7
 80049a4:	4909      	ldr	r1, [pc, #36]	@ (80049cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d001      	beq.n	80049be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40022000 	.word	0x40022000

080049d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d8:	2300      	movs	r3, #0
 80049da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049dc:	2300      	movs	r3, #0
 80049de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d041      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049f4:	d02a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049fa:	d824      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a00:	d008      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a06:	d81e      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a10:	d010      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a12:	e018      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a14:	4b86      	ldr	r3, [pc, #536]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a85      	ldr	r2, [pc, #532]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a20:	e015      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 facb 	bl	8004fc4 <RCCEx_PLLSAI1_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a32:	e00c      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3320      	adds	r3, #32
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fbb6 	bl	80051ac <RCCEx_PLLSAI2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	74fb      	strb	r3, [r7, #19]
      break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a54:	4b76      	ldr	r3, [pc, #472]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a62:	4973      	ldr	r1, [pc, #460]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a6a:	e001      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d041      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a84:	d02a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a8a:	d824      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a96:	d81e      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa0:	d010      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004aa2:	e018      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aa4:	4b62      	ldr	r3, [pc, #392]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a61      	ldr	r2, [pc, #388]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab0:	e015      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fa83 	bl	8004fc4 <RCCEx_PLLSAI1_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac2:	e00c      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3320      	adds	r3, #32
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fb6e 	bl	80051ac <RCCEx_PLLSAI2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	74fb      	strb	r3, [r7, #19]
      break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ae4:	4b52      	ldr	r3, [pc, #328]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004af2:	494f      	ldr	r1, [pc, #316]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004afa:	e001      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a0 	beq.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b12:	4b47      	ldr	r3, [pc, #284]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b28:	4b41      	ldr	r3, [pc, #260]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2c:	4a40      	ldr	r2, [pc, #256]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b34:	4b3e      	ldr	r3, [pc, #248]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b40:	2301      	movs	r3, #1
 8004b42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b44:	4b3b      	ldr	r3, [pc, #236]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a3a      	ldr	r2, [pc, #232]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b50:	f7fd f966 	bl	8001e20 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b56:	e009      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fd f962 	bl	8001e20 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	74fb      	strb	r3, [r7, #19]
        break;
 8004b6a:	e005      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b6c:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d15c      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01f      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d019      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b9c:	4b24      	ldr	r3, [pc, #144]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba8:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	4a20      	ldr	r2, [pc, #128]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd f921 	bl	8001e20 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be0:	e00b      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fd f91d 	bl	8001e20 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d902      	bls.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ec      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0e:	4b08      	ldr	r3, [pc, #32]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c1e:	4904      	ldr	r1, [pc, #16]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c26:	e009      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
 8004c2c:	e006      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c3c:	7c7b      	ldrb	r3, [r7, #17]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c42:	4b9e      	ldr	r3, [pc, #632]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	4a9d      	ldr	r2, [pc, #628]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5a:	4b98      	ldr	r3, [pc, #608]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f023 0203 	bic.w	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	4994      	ldr	r1, [pc, #592]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c7c:	4b8f      	ldr	r3, [pc, #572]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f023 020c 	bic.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	498c      	ldr	r1, [pc, #560]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c9e:	4b87      	ldr	r3, [pc, #540]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	4983      	ldr	r1, [pc, #524]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	497b      	ldr	r1, [pc, #492]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ce2:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf0:	4972      	ldr	r1, [pc, #456]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d04:	4b6d      	ldr	r3, [pc, #436]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d12:	496a      	ldr	r1, [pc, #424]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d26:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d34:	4961      	ldr	r1, [pc, #388]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d48:	4b5c      	ldr	r3, [pc, #368]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	4959      	ldr	r1, [pc, #356]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d6a:	4b54      	ldr	r3, [pc, #336]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d78:	4950      	ldr	r1, [pc, #320]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9a:	4948      	ldr	r1, [pc, #288]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dae:	4b43      	ldr	r3, [pc, #268]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	493f      	ldr	r1, [pc, #252]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d028      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dde:	4937      	ldr	r1, [pc, #220]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dee:	d106      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df0:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a31      	ldr	r2, [pc, #196]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dfa:	60d3      	str	r3, [r2, #12]
 8004dfc:	e011      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e06:	d10c      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f8d8 	bl	8004fc4 <RCCEx_PLLSAI1_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e2e:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3c:	491f      	ldr	r1, [pc, #124]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e4c:	d106      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	4a1a      	ldr	r2, [pc, #104]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e58:	60d3      	str	r3, [r2, #12]
 8004e5a:	e011      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f8a9 	bl	8004fc4 <RCCEx_PLLSAI1_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02b      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	4908      	ldr	r1, [pc, #32]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eac:	4b03      	ldr	r3, [pc, #12]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a02      	ldr	r2, [pc, #8]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb6:	60d3      	str	r3, [r2, #12]
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f877 	bl	8004fc4 <RCCEx_PLLSAI1_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02f      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004efe:	4928      	ldr	r1, [pc, #160]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f0e:	d10d      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f854 	bl	8004fc4 <RCCEx_PLLSAI1_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	74bb      	strb	r3, [r7, #18]
 8004f2a:	e011      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3320      	adds	r3, #32
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f935 	bl	80051ac <RCCEx_PLLSAI2_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f5c:	4b10      	ldr	r3, [pc, #64]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f6a:	490d      	ldr	r1, [pc, #52]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f7e:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8e:	4904      	ldr	r1, [pc, #16]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f96:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fae:	f043 0304 	orr.w	r3, r3, #4
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fd2:	4b75      	ldr	r3, [pc, #468]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fde:	4b72      	ldr	r3, [pc, #456]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0203 	and.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10d      	bne.n	800500a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
       ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d047      	beq.n	800509a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e044      	b.n	800509a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d018      	beq.n	800504a <RCCEx_PLLSAI1_Config+0x86>
 8005018:	2b03      	cmp	r3, #3
 800501a:	d825      	bhi.n	8005068 <RCCEx_PLLSAI1_Config+0xa4>
 800501c:	2b01      	cmp	r3, #1
 800501e:	d002      	beq.n	8005026 <RCCEx_PLLSAI1_Config+0x62>
 8005020:	2b02      	cmp	r3, #2
 8005022:	d009      	beq.n	8005038 <RCCEx_PLLSAI1_Config+0x74>
 8005024:	e020      	b.n	8005068 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005026:	4b60      	ldr	r3, [pc, #384]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11d      	bne.n	800506e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005036:	e01a      	b.n	800506e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005038:	4b5b      	ldr	r3, [pc, #364]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d116      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005048:	e013      	b.n	8005072 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800504a:	4b57      	ldr	r3, [pc, #348]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005056:	4b54      	ldr	r3, [pc, #336]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005066:	e006      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
      break;
 800506c:	e004      	b.n	8005078 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800506e:	bf00      	nop
 8005070:	e002      	b.n	8005078 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005076:	bf00      	nop
    }

    if(status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800507e:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	430b      	orrs	r3, r1
 8005094:	4944      	ldr	r1, [pc, #272]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	4313      	orrs	r3, r2
 8005098:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d17d      	bne.n	800519c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050a0:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a40      	ldr	r2, [pc, #256]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ac:	f7fc feb8 	bl	8001e20 <HAL_GetTick>
 80050b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050b2:	e009      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b4:	f7fc feb4 	bl	8001e20 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d902      	bls.n	80050c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	73fb      	strb	r3, [r7, #15]
        break;
 80050c6:	e005      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c8:	4b37      	ldr	r3, [pc, #220]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ef      	bne.n	80050b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d160      	bne.n	800519c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e0:	4b31      	ldr	r3, [pc, #196]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6892      	ldr	r2, [r2, #8]
 80050f0:	0211      	lsls	r1, r2, #8
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68d2      	ldr	r2, [r2, #12]
 80050f6:	0912      	lsrs	r2, r2, #4
 80050f8:	0452      	lsls	r2, r2, #17
 80050fa:	430a      	orrs	r2, r1
 80050fc:	492a      	ldr	r1, [pc, #168]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	610b      	str	r3, [r1, #16]
 8005102:	e027      	b.n	8005154 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d112      	bne.n	8005130 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005112:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6892      	ldr	r2, [r2, #8]
 800511a:	0211      	lsls	r1, r2, #8
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6912      	ldr	r2, [r2, #16]
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	3a01      	subs	r2, #1
 8005124:	0552      	lsls	r2, r2, #21
 8005126:	430a      	orrs	r2, r1
 8005128:	491f      	ldr	r1, [pc, #124]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
 800512e:	e011      	b.n	8005154 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005138:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6952      	ldr	r2, [r2, #20]
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	3a01      	subs	r2, #1
 800514a:	0652      	lsls	r2, r2, #25
 800514c:	430a      	orrs	r2, r1
 800514e:	4916      	ldr	r1, [pc, #88]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005150:	4313      	orrs	r3, r2
 8005152:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005154:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a13      	ldr	r2, [pc, #76]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800515e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fc fe5e 	bl	8001e20 <HAL_GetTick>
 8005164:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005166:	e009      	b.n	800517c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005168:	f7fc fe5a 	bl	8001e20 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d902      	bls.n	800517c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	73fb      	strb	r3, [r7, #15]
          break;
 800517a:	e005      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800517c:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ef      	beq.n	8005168 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800518e:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	4904      	ldr	r1, [pc, #16]	@ (80051a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000

080051ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d018      	beq.n	80051f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051c6:	4b67      	ldr	r3, [pc, #412]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0203 	and.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d10d      	bne.n	80051f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
       ||
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051de:	4b61      	ldr	r3, [pc, #388]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
       ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d047      	beq.n	8005282 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e044      	b.n	8005282 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d018      	beq.n	8005232 <RCCEx_PLLSAI2_Config+0x86>
 8005200:	2b03      	cmp	r3, #3
 8005202:	d825      	bhi.n	8005250 <RCCEx_PLLSAI2_Config+0xa4>
 8005204:	2b01      	cmp	r3, #1
 8005206:	d002      	beq.n	800520e <RCCEx_PLLSAI2_Config+0x62>
 8005208:	2b02      	cmp	r3, #2
 800520a:	d009      	beq.n	8005220 <RCCEx_PLLSAI2_Config+0x74>
 800520c:	e020      	b.n	8005250 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800520e:	4b55      	ldr	r3, [pc, #340]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d11d      	bne.n	8005256 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800521e:	e01a      	b.n	8005256 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005220:	4b50      	ldr	r3, [pc, #320]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d116      	bne.n	800525a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005230:	e013      	b.n	800525a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005232:	4b4c      	ldr	r3, [pc, #304]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10f      	bne.n	800525e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800523e:	4b49      	ldr	r3, [pc, #292]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800524e:	e006      	b.n	800525e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e004      	b.n	8005260 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800525e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005266:	4b3f      	ldr	r3, [pc, #252]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	3b01      	subs	r3, #1
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	430b      	orrs	r3, r1
 800527c:	4939      	ldr	r1, [pc, #228]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d167      	bne.n	8005358 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005288:	4b36      	ldr	r3, [pc, #216]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a35      	ldr	r2, [pc, #212]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005294:	f7fc fdc4 	bl	8001e20 <HAL_GetTick>
 8005298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800529a:	e009      	b.n	80052b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800529c:	f7fc fdc0 	bl	8001e20 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d902      	bls.n	80052b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	73fb      	strb	r3, [r7, #15]
        break;
 80052ae:	e005      	b.n	80052bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ef      	bne.n	800529c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d14a      	bne.n	8005358 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d111      	bne.n	80052ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052c8:	4b26      	ldr	r3, [pc, #152]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80052d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6892      	ldr	r2, [r2, #8]
 80052d8:	0211      	lsls	r1, r2, #8
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68d2      	ldr	r2, [r2, #12]
 80052de:	0912      	lsrs	r2, r2, #4
 80052e0:	0452      	lsls	r2, r2, #17
 80052e2:	430a      	orrs	r2, r1
 80052e4:	491f      	ldr	r1, [pc, #124]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	614b      	str	r3, [r1, #20]
 80052ea:	e011      	b.n	8005310 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6892      	ldr	r2, [r2, #8]
 80052fc:	0211      	lsls	r1, r2, #8
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6912      	ldr	r2, [r2, #16]
 8005302:	0852      	lsrs	r2, r2, #1
 8005304:	3a01      	subs	r2, #1
 8005306:	0652      	lsls	r2, r2, #25
 8005308:	430a      	orrs	r2, r1
 800530a:	4916      	ldr	r1, [pc, #88]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800530c:	4313      	orrs	r3, r2
 800530e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005310:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a13      	ldr	r2, [pc, #76]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fc fd80 	bl	8001e20 <HAL_GetTick>
 8005320:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005322:	e009      	b.n	8005338 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005324:	f7fc fd7c 	bl	8001e20 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	73fb      	strb	r3, [r7, #15]
          break;
 8005336:	e005      	b.n	8005344 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005338:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ef      	beq.n	8005324 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800534a:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	4904      	ldr	r1, [pc, #16]	@ (8005364 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005354:	4313      	orrs	r3, r2
 8005356:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e049      	b.n	800540e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc fb8e 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f000 ff5a 	bl	8006260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e04f      	b.n	80054d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a23      	ldr	r2, [pc, #140]	@ (80054dc <HAL_TIM_Base_Start_IT+0xc4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01d      	beq.n	800548e <HAL_TIM_Base_Start_IT+0x76>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545a:	d018      	beq.n	800548e <HAL_TIM_Base_Start_IT+0x76>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_TIM_Base_Start_IT+0x76>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1e      	ldr	r2, [pc, #120]	@ (80054e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_TIM_Base_Start_IT+0x76>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIM_Base_Start_IT+0x76>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIM_Base_Start_IT+0x76>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a19      	ldr	r2, [pc, #100]	@ (80054f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d115      	bne.n	80054ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	4b17      	ldr	r3, [pc, #92]	@ (80054f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005496:	4013      	ands	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b06      	cmp	r3, #6
 800549e:	d015      	beq.n	80054cc <HAL_TIM_Base_Start_IT+0xb4>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a6:	d011      	beq.n	80054cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	e008      	b.n	80054cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e000      	b.n	80054ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	00010007 	.word	0x00010007

080054f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e049      	b.n	800559e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f841 	bl	80055a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f000 fe92 	bl	8006260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_TIM_PWM_Start+0x24>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e03c      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d109      	bne.n	80055fa <HAL_TIM_PWM_Start+0x3e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	e02f      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d109      	bne.n	8005614 <HAL_TIM_PWM_Start+0x58>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e022      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d109      	bne.n	800562e <HAL_TIM_PWM_Start+0x72>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e015      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d109      	bne.n	8005648 <HAL_TIM_PWM_Start+0x8c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e008      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e09c      	b.n	800579c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start+0xb6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005670:	e023      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b04      	cmp	r3, #4
 8005676:	d104      	bne.n	8005682 <HAL_TIM_PWM_Start+0xc6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005680:	e01b      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d104      	bne.n	8005692 <HAL_TIM_PWM_Start+0xd6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005690:	e013      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b0c      	cmp	r3, #12
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_PWM_Start+0xe6>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056a0:	e00b      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_PWM_Start+0xf6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b0:	e003      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2201      	movs	r2, #1
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fb06 	bl	8006cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a35      	ldr	r2, [pc, #212]	@ (80057a4 <HAL_TIM_PWM_Start+0x1e8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a34      	ldr	r2, [pc, #208]	@ (80057a8 <HAL_TIM_PWM_Start+0x1ec>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a32      	ldr	r2, [pc, #200]	@ (80057ac <HAL_TIM_PWM_Start+0x1f0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a31      	ldr	r2, [pc, #196]	@ (80057b0 <HAL_TIM_PWM_Start+0x1f4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2f      	ldr	r2, [pc, #188]	@ (80057b4 <HAL_TIM_PWM_Start+0x1f8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_PWM_Start+0x142>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_TIM_PWM_Start+0x144>
 80056fe:	2300      	movs	r3, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005712:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a22      	ldr	r2, [pc, #136]	@ (80057a4 <HAL_TIM_PWM_Start+0x1e8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01d      	beq.n	800575a <HAL_TIM_PWM_Start+0x19e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005726:	d018      	beq.n	800575a <HAL_TIM_PWM_Start+0x19e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a22      	ldr	r2, [pc, #136]	@ (80057b8 <HAL_TIM_PWM_Start+0x1fc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_TIM_PWM_Start+0x19e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a21      	ldr	r2, [pc, #132]	@ (80057bc <HAL_TIM_PWM_Start+0x200>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_TIM_PWM_Start+0x19e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1f      	ldr	r2, [pc, #124]	@ (80057c0 <HAL_TIM_PWM_Start+0x204>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_TIM_PWM_Start+0x19e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	@ (80057a8 <HAL_TIM_PWM_Start+0x1ec>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIM_PWM_Start+0x19e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <HAL_TIM_PWM_Start+0x1f0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d115      	bne.n	8005786 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	4b18      	ldr	r3, [pc, #96]	@ (80057c4 <HAL_TIM_PWM_Start+0x208>)
 8005762:	4013      	ands	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b06      	cmp	r3, #6
 800576a:	d015      	beq.n	8005798 <HAL_TIM_PWM_Start+0x1dc>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005772:	d011      	beq.n	8005798 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005784:	e008      	b.n	8005798 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e000      	b.n	800579a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40013400 	.word	0x40013400
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	00010007 	.word	0x00010007

080057c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e049      	b.n	800586e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f841 	bl	8005876 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fd2a 	bl	8006260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_IC_Start+0x1a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e023      	b.n	80058ee <HAL_TIM_IC_Start+0x62>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_IC_Start+0x2a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	e01b      	b.n	80058ee <HAL_TIM_IC_Start+0x62>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_IC_Start+0x3a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e013      	b.n	80058ee <HAL_TIM_IC_Start+0x62>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b0c      	cmp	r3, #12
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_IC_Start+0x4a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_IC_Start+0x62>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_IC_Start+0x5a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e003      	b.n	80058ee <HAL_TIM_IC_Start+0x62>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <HAL_TIM_IC_Start+0x74>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e013      	b.n	8005928 <HAL_TIM_IC_Start+0x9c>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b04      	cmp	r3, #4
 8005904:	d104      	bne.n	8005910 <HAL_TIM_IC_Start+0x84>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800590c:	b2db      	uxtb	r3, r3
 800590e:	e00b      	b.n	8005928 <HAL_TIM_IC_Start+0x9c>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b08      	cmp	r3, #8
 8005914:	d104      	bne.n	8005920 <HAL_TIM_IC_Start+0x94>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e003      	b.n	8005928 <HAL_TIM_IC_Start+0x9c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005926:	b2db      	uxtb	r3, r3
 8005928:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d102      	bne.n	8005936 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005930:	7bbb      	ldrb	r3, [r7, #14]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e092      	b.n	8005a60 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_TIM_IC_Start+0xbe>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005948:	e023      	b.n	8005992 <HAL_TIM_IC_Start+0x106>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d104      	bne.n	800595a <HAL_TIM_IC_Start+0xce>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005958:	e01b      	b.n	8005992 <HAL_TIM_IC_Start+0x106>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d104      	bne.n	800596a <HAL_TIM_IC_Start+0xde>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005968:	e013      	b.n	8005992 <HAL_TIM_IC_Start+0x106>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d104      	bne.n	800597a <HAL_TIM_IC_Start+0xee>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005978:	e00b      	b.n	8005992 <HAL_TIM_IC_Start+0x106>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b10      	cmp	r3, #16
 800597e:	d104      	bne.n	800598a <HAL_TIM_IC_Start+0xfe>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005988:	e003      	b.n	8005992 <HAL_TIM_IC_Start+0x106>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_IC_Start+0x116>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a0:	e013      	b.n	80059ca <HAL_TIM_IC_Start+0x13e>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_IC_Start+0x126>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059b0:	e00b      	b.n	80059ca <HAL_TIM_IC_Start+0x13e>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_IC_Start+0x136>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059c0:	e003      	b.n	80059ca <HAL_TIM_IC_Start+0x13e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 f97e 	bl	8006cd4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	@ (8005a68 <HAL_TIM_IC_Start+0x1dc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <HAL_TIM_IC_Start+0x192>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ea:	d018      	beq.n	8005a1e <HAL_TIM_IC_Start+0x192>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a6c <HAL_TIM_IC_Start+0x1e0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <HAL_TIM_IC_Start+0x192>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <HAL_TIM_IC_Start+0x1e4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_TIM_IC_Start+0x192>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <HAL_TIM_IC_Start+0x1e8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_TIM_IC_Start+0x192>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_TIM_IC_Start+0x1ec>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_TIM_IC_Start+0x192>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <HAL_TIM_IC_Start+0x1f0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d115      	bne.n	8005a4a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <HAL_TIM_IC_Start+0x1f4>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d015      	beq.n	8005a5c <HAL_TIM_IC_Start+0x1d0>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a36:	d011      	beq.n	8005a5c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	e008      	b.n	8005a5c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e000      	b.n	8005a5e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	40013400 	.word	0x40013400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	00010007 	.word	0x00010007

08005a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0202 	mvn.w	r2, #2
 8005ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fba8 	bl	8006224 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb9a 	bl	8006210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fbab 	bl	8006238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0204 	mvn.w	r2, #4
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fb82 	bl	8006224 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fb74 	bl	8006210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fb85 	bl	8006238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0208 	mvn.w	r2, #8
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2204      	movs	r2, #4
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fb5c 	bl	8006224 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fb4e 	bl	8006210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb5f 	bl	8006238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d020      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01b      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fb36 	bl	8006224 <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fb28 	bl	8006210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fb39 	bl	8006238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0201 	mvn.w	r2, #1
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fb fb14 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d104      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00c      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f913 	bl	8006e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 f90b 	bl	8006e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 faf3 	bl	800624c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0220 	mvn.w	r2, #32
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 f8d3 	bl	8006e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e088      	b.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11b      	bne.n	8005cf6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005cce:	f000 fe43 	bl	8006958 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 020c 	bic.w	r2, r2, #12
 8005ce0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6999      	ldr	r1, [r3, #24]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	619a      	str	r2, [r3, #24]
 8005cf4:	e060      	b.n	8005db8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d11c      	bne.n	8005d36 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d0c:	f000 fec1 	bl	8006a92 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d1e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6999      	ldr	r1, [r3, #24]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	619a      	str	r2, [r3, #24]
 8005d34:	e040      	b.n	8005db8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d4c:	f000 ff0e 	bl	8006b6c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 020c 	bic.w	r2, r2, #12
 8005d5e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69d9      	ldr	r1, [r3, #28]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	61da      	str	r2, [r3, #28]
 8005d72:	e021      	b.n	8005db8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d11c      	bne.n	8005db4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d8a:	f000 ff2b 	bl	8006be4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d9c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69d9      	ldr	r1, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	021a      	lsls	r2, r3, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	61da      	str	r2, [r3, #28]
 8005db2:	e001      	b.n	8005db8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e0ff      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b14      	cmp	r3, #20
 8005df6:	f200 80f0 	bhi.w	8005fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005fdb 	.word	0x08005fdb
 8005e08:	08005fdb 	.word	0x08005fdb
 8005e0c:	08005fdb 	.word	0x08005fdb
 8005e10:	08005e95 	.word	0x08005e95
 8005e14:	08005fdb 	.word	0x08005fdb
 8005e18:	08005fdb 	.word	0x08005fdb
 8005e1c:	08005fdb 	.word	0x08005fdb
 8005e20:	08005ed7 	.word	0x08005ed7
 8005e24:	08005fdb 	.word	0x08005fdb
 8005e28:	08005fdb 	.word	0x08005fdb
 8005e2c:	08005fdb 	.word	0x08005fdb
 8005e30:	08005f17 	.word	0x08005f17
 8005e34:	08005fdb 	.word	0x08005fdb
 8005e38:	08005fdb 	.word	0x08005fdb
 8005e3c:	08005fdb 	.word	0x08005fdb
 8005e40:	08005f59 	.word	0x08005f59
 8005e44:	08005fdb 	.word	0x08005fdb
 8005e48:	08005fdb 	.word	0x08005fdb
 8005e4c:	08005fdb 	.word	0x08005fdb
 8005e50:	08005f99 	.word	0x08005f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 faa6 	bl	80063ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0208 	orr.w	r2, r2, #8
 8005e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0204 	bic.w	r2, r2, #4
 8005e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	619a      	str	r2, [r3, #24]
      break;
 8005e92:	e0a5      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fb16 	bl	80064cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6999      	ldr	r1, [r3, #24]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	021a      	lsls	r2, r3, #8
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	619a      	str	r2, [r3, #24]
      break;
 8005ed4:	e084      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fb7f 	bl	80065e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0208 	orr.w	r2, r2, #8
 8005ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0204 	bic.w	r2, r2, #4
 8005f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69d9      	ldr	r1, [r3, #28]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	61da      	str	r2, [r3, #28]
      break;
 8005f14:	e064      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fbe7 	bl	80066f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69d9      	ldr	r1, [r3, #28]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	61da      	str	r2, [r3, #28]
      break;
 8005f56:	e043      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fc30 	bl	80067c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0208 	orr.w	r2, r2, #8
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0204 	bic.w	r2, r2, #4
 8005f82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f96:	e023      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fc74 	bl	800688c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	021a      	lsls	r2, r3, #8
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005fd8:	e002      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop

08005ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIM_ConfigClockSource+0x1c>
 800600c:	2302      	movs	r3, #2
 800600e:	e0b6      	b.n	800617e <HAL_TIM_ConfigClockSource+0x18a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800602e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800603a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604c:	d03e      	beq.n	80060cc <HAL_TIM_ConfigClockSource+0xd8>
 800604e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006052:	f200 8087 	bhi.w	8006164 <HAL_TIM_ConfigClockSource+0x170>
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605a:	f000 8086 	beq.w	800616a <HAL_TIM_ConfigClockSource+0x176>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006062:	d87f      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 8006064:	2b70      	cmp	r3, #112	@ 0x70
 8006066:	d01a      	beq.n	800609e <HAL_TIM_ConfigClockSource+0xaa>
 8006068:	2b70      	cmp	r3, #112	@ 0x70
 800606a:	d87b      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 800606c:	2b60      	cmp	r3, #96	@ 0x60
 800606e:	d050      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0x11e>
 8006070:	2b60      	cmp	r3, #96	@ 0x60
 8006072:	d877      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 8006074:	2b50      	cmp	r3, #80	@ 0x50
 8006076:	d03c      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0xfe>
 8006078:	2b50      	cmp	r3, #80	@ 0x50
 800607a:	d873      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 800607c:	2b40      	cmp	r3, #64	@ 0x40
 800607e:	d058      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0x13e>
 8006080:	2b40      	cmp	r3, #64	@ 0x40
 8006082:	d86f      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 8006084:	2b30      	cmp	r3, #48	@ 0x30
 8006086:	d064      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0x15e>
 8006088:	2b30      	cmp	r3, #48	@ 0x30
 800608a:	d86b      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 800608c:	2b20      	cmp	r3, #32
 800608e:	d060      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0x15e>
 8006090:	2b20      	cmp	r3, #32
 8006092:	d867      	bhi.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d05c      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0x15e>
 8006098:	2b10      	cmp	r3, #16
 800609a:	d05a      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0x15e>
 800609c:	e062      	b.n	8006164 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060ae:	f000 fdf1 	bl	8006c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	609a      	str	r2, [r3, #8]
      break;
 80060ca:	e04f      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060dc:	f000 fdda 	bl	8006c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ee:	609a      	str	r2, [r3, #8]
      break;
 80060f0:	e03c      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fe:	461a      	mov	r2, r3
 8006100:	f000 fc98 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2150      	movs	r1, #80	@ 0x50
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fda7 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 8006110:	e02c      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800611e:	461a      	mov	r2, r3
 8006120:	f000 fcf4 	bl	8006b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2160      	movs	r1, #96	@ 0x60
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fd97 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 8006130:	e01c      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613e:	461a      	mov	r2, r3
 8006140:	f000 fc78 	bl	8006a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2140      	movs	r1, #64	@ 0x40
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fd87 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 8006150:	e00c      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f000 fd7e 	bl	8006c5e <TIM_ITRx_SetConfig>
      break;
 8006162:	e003      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
      break;
 8006168:	e000      	b.n	800616c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800616a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b0c      	cmp	r3, #12
 800619a:	d831      	bhi.n	8006200 <HAL_TIM_ReadCapturedValue+0x78>
 800619c:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061d9 	.word	0x080061d9
 80061a8:	08006201 	.word	0x08006201
 80061ac:	08006201 	.word	0x08006201
 80061b0:	08006201 	.word	0x08006201
 80061b4:	080061e3 	.word	0x080061e3
 80061b8:	08006201 	.word	0x08006201
 80061bc:	08006201 	.word	0x08006201
 80061c0:	08006201 	.word	0x08006201
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	08006201 	.word	0x08006201
 80061cc:	08006201 	.word	0x08006201
 80061d0:	08006201 	.word	0x08006201
 80061d4:	080061f7 	.word	0x080061f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061de:	60fb      	str	r3, [r7, #12]

      break;
 80061e0:	e00f      	b.n	8006202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	60fb      	str	r3, [r7, #12]

      break;
 80061ea:	e00a      	b.n	8006202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f2:	60fb      	str	r3, [r7, #12]

      break;
 80061f4:	e005      	b.n	8006202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fc:	60fb      	str	r3, [r7, #12]

      break;
 80061fe:	e000      	b.n	8006202 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006200:	bf00      	nop
  }

  return tmpreg;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a46      	ldr	r2, [pc, #280]	@ (800638c <TIM_Base_SetConfig+0x12c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627e:	d00f      	beq.n	80062a0 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a43      	ldr	r2, [pc, #268]	@ (8006390 <TIM_Base_SetConfig+0x130>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00b      	beq.n	80062a0 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a42      	ldr	r2, [pc, #264]	@ (8006394 <TIM_Base_SetConfig+0x134>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d007      	beq.n	80062a0 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a41      	ldr	r2, [pc, #260]	@ (8006398 <TIM_Base_SetConfig+0x138>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d003      	beq.n	80062a0 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a40      	ldr	r2, [pc, #256]	@ (800639c <TIM_Base_SetConfig+0x13c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d108      	bne.n	80062b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a35      	ldr	r2, [pc, #212]	@ (800638c <TIM_Base_SetConfig+0x12c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01f      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c0:	d01b      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a32      	ldr	r2, [pc, #200]	@ (8006390 <TIM_Base_SetConfig+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d017      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a31      	ldr	r2, [pc, #196]	@ (8006394 <TIM_Base_SetConfig+0x134>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a30      	ldr	r2, [pc, #192]	@ (8006398 <TIM_Base_SetConfig+0x138>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2f      	ldr	r2, [pc, #188]	@ (800639c <TIM_Base_SetConfig+0x13c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2e      	ldr	r2, [pc, #184]	@ (80063a0 <TIM_Base_SetConfig+0x140>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2d      	ldr	r2, [pc, #180]	@ (80063a4 <TIM_Base_SetConfig+0x144>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0x9a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2c      	ldr	r2, [pc, #176]	@ (80063a8 <TIM_Base_SetConfig+0x148>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_Base_SetConfig+0x12c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0xf8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a18      	ldr	r2, [pc, #96]	@ (800639c <TIM_Base_SetConfig+0x13c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0xf8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <TIM_Base_SetConfig+0x140>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0xf8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a16      	ldr	r2, [pc, #88]	@ (80063a4 <TIM_Base_SetConfig+0x144>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0xf8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <TIM_Base_SetConfig+0x148>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d103      	bne.n	8006360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b01      	cmp	r3, #1
 8006370:	d105      	bne.n	800637e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f023 0201 	bic.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	611a      	str	r2, [r3, #16]
  }
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800
 8006398:	40000c00 	.word	0x40000c00
 800639c:	40013400 	.word	0x40013400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f023 0201 	bic.w	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 0302 	bic.w	r3, r3, #2
 80063f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a2c      	ldr	r2, [pc, #176]	@ (80064b8 <TIM_OC1_SetConfig+0x10c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00f      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a2b      	ldr	r2, [pc, #172]	@ (80064bc <TIM_OC1_SetConfig+0x110>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <TIM_OC1_SetConfig+0x114>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a29      	ldr	r2, [pc, #164]	@ (80064c4 <TIM_OC1_SetConfig+0x118>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC1_SetConfig+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a28      	ldr	r2, [pc, #160]	@ (80064c8 <TIM_OC1_SetConfig+0x11c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10c      	bne.n	8006446 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0308 	bic.w	r3, r3, #8
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 0304 	bic.w	r3, r3, #4
 8006444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <TIM_OC1_SetConfig+0x10c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00f      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1a      	ldr	r2, [pc, #104]	@ (80064bc <TIM_OC1_SetConfig+0x110>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <TIM_OC1_SetConfig+0x114>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <TIM_OC1_SetConfig+0x118>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0xc2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <TIM_OC1_SetConfig+0x11c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40013400 	.word	0x40013400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800

080064cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0210 	bic.w	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0320 	bic.w	r3, r3, #32
 800651a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a28      	ldr	r2, [pc, #160]	@ (80065cc <TIM_OC2_SetConfig+0x100>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC2_SetConfig+0x6c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a27      	ldr	r2, [pc, #156]	@ (80065d0 <TIM_OC2_SetConfig+0x104>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10d      	bne.n	8006554 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006552:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <TIM_OC2_SetConfig+0x100>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00f      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <TIM_OC2_SetConfig+0x104>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a1b      	ldr	r2, [pc, #108]	@ (80065d4 <TIM_OC2_SetConfig+0x108>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1a      	ldr	r2, [pc, #104]	@ (80065d8 <TIM_OC2_SetConfig+0x10c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC2_SetConfig+0xb0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a19      	ldr	r2, [pc, #100]	@ (80065dc <TIM_OC2_SetConfig+0x110>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d113      	bne.n	80065a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800

080065e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800662c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a27      	ldr	r2, [pc, #156]	@ (80066dc <TIM_OC3_SetConfig+0xfc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_OC3_SetConfig+0x6a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a26      	ldr	r2, [pc, #152]	@ (80066e0 <TIM_OC3_SetConfig+0x100>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10d      	bne.n	8006666 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1c      	ldr	r2, [pc, #112]	@ (80066dc <TIM_OC3_SetConfig+0xfc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <TIM_OC3_SetConfig+0x100>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1a      	ldr	r2, [pc, #104]	@ (80066e4 <TIM_OC3_SetConfig+0x104>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a19      	ldr	r2, [pc, #100]	@ (80066e8 <TIM_OC3_SetConfig+0x108>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC3_SetConfig+0xae>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <TIM_OC3_SetConfig+0x10c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d113      	bne.n	80066b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800672a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800673e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	031b      	lsls	r3, r3, #12
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <TIM_OC4_SetConfig+0xc0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_OC4_SetConfig+0x84>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <TIM_OC4_SetConfig+0xc4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_OC4_SetConfig+0x84>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a16      	ldr	r2, [pc, #88]	@ (80067b8 <TIM_OC4_SetConfig+0xc8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_OC4_SetConfig+0x84>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a15      	ldr	r2, [pc, #84]	@ (80067bc <TIM_OC4_SetConfig+0xcc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC4_SetConfig+0x84>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <TIM_OC4_SetConfig+0xd0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d109      	bne.n	8006788 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800677a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	019b      	lsls	r3, r3, #6
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800

080067c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006808:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a17      	ldr	r2, [pc, #92]	@ (8006878 <TIM_OC5_SetConfig+0xb4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_OC5_SetConfig+0x7a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a16      	ldr	r2, [pc, #88]	@ (800687c <TIM_OC5_SetConfig+0xb8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_OC5_SetConfig+0x7a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a15      	ldr	r2, [pc, #84]	@ (8006880 <TIM_OC5_SetConfig+0xbc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_OC5_SetConfig+0x7a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a14      	ldr	r2, [pc, #80]	@ (8006884 <TIM_OC5_SetConfig+0xc0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC5_SetConfig+0x7a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a13      	ldr	r2, [pc, #76]	@ (8006888 <TIM_OC5_SetConfig+0xc4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d109      	bne.n	8006852 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006844:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800

0800688c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	051b      	lsls	r3, r3, #20
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a18      	ldr	r2, [pc, #96]	@ (8006944 <TIM_OC6_SetConfig+0xb8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00f      	beq.n	8006908 <TIM_OC6_SetConfig+0x7c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a17      	ldr	r2, [pc, #92]	@ (8006948 <TIM_OC6_SetConfig+0xbc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_OC6_SetConfig+0x7c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a16      	ldr	r2, [pc, #88]	@ (800694c <TIM_OC6_SetConfig+0xc0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_OC6_SetConfig+0x7c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <TIM_OC6_SetConfig+0xc4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC6_SetConfig+0x7c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a14      	ldr	r2, [pc, #80]	@ (8006954 <TIM_OC6_SetConfig+0xc8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d109      	bne.n	800691c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	029b      	lsls	r3, r3, #10
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f023 0201 	bic.w	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a26      	ldr	r2, [pc, #152]	@ (8006a1c <TIM_TI1_SetConfig+0xc4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d017      	beq.n	80069b6 <TIM_TI1_SetConfig+0x5e>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698c:	d013      	beq.n	80069b6 <TIM_TI1_SetConfig+0x5e>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a23      	ldr	r2, [pc, #140]	@ (8006a20 <TIM_TI1_SetConfig+0xc8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00f      	beq.n	80069b6 <TIM_TI1_SetConfig+0x5e>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a22      	ldr	r2, [pc, #136]	@ (8006a24 <TIM_TI1_SetConfig+0xcc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00b      	beq.n	80069b6 <TIM_TI1_SetConfig+0x5e>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a21      	ldr	r2, [pc, #132]	@ (8006a28 <TIM_TI1_SetConfig+0xd0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d007      	beq.n	80069b6 <TIM_TI1_SetConfig+0x5e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a20      	ldr	r2, [pc, #128]	@ (8006a2c <TIM_TI1_SetConfig+0xd4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_TI1_SetConfig+0x5e>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a30 <TIM_TI1_SetConfig+0xd8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d101      	bne.n	80069ba <TIM_TI1_SetConfig+0x62>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <TIM_TI1_SetConfig+0x64>
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0303 	bic.w	r3, r3, #3
 80069c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e003      	b.n	80069da <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f023 030a 	bic.w	r3, r3, #10
 80069f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f003 030a 	and.w	r3, r3, #10
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800
 8006a28:	40000c00 	.word	0x40000c00
 8006a2c:	40013400 	.word	0x40013400
 8006a30:	40014000 	.word	0x40014000

08006a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 030a 	bic.w	r3, r3, #10
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0210 	bic.w	r2, r3, #16
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	621a      	str	r2, [r3, #32]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0210 	bic.w	r2, r3, #16
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	031b      	lsls	r3, r3, #12
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	031b      	lsls	r3, r3, #12
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006c36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	031b      	lsls	r3, r3, #12
 8006c3c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f043 0307 	orr.w	r3, r3, #7
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	609a      	str	r2, [r3, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1a      	ldr	r2, [r3, #32]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	401a      	ands	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
	...

08006d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e068      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a2d      	ldr	r2, [pc, #180]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01d      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006daa:	d018      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a13      	ldr	r2, [pc, #76]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a14      	ldr	r2, [pc, #80]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e040      	b.n	8006f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fa fed8 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2224      	movs	r2, #36	@ 0x24
 8006e98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb6a 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8af 	bl	800701c <UART_SetConfig>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e01b      	b.n	8006f00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fbe9 	bl	80076d0 <UART_CheckIdleState>
 8006efe:	4603      	mov	r3, r0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	@ 0x28
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d177      	bne.n	8007010 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_UART_Transmit+0x24>
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e070      	b.n	8007012 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2221      	movs	r2, #33	@ 0x21
 8006f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3e:	f7fa ff6f 	bl	8001e20 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	88fa      	ldrh	r2, [r7, #6]
 8006f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5c:	d108      	bne.n	8006f70 <HAL_UART_Transmit+0x68>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	e003      	b.n	8006f78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f78:	e02f      	b.n	8006fda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2180      	movs	r1, #128	@ 0x80
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fc4b 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e03b      	b.n	8007012 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fac:	b292      	uxth	r2, r2
 8006fae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e007      	b.n	8006fc8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1c9      	bne.n	8006f7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2140      	movs	r1, #64	@ 0x40
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fc15 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e005      	b.n	8007012 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	e000      	b.n	8007012 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800701c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007020:	b08a      	sub	sp, #40	@ 0x28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	431a      	orrs	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4313      	orrs	r3, r2
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4ba4      	ldr	r3, [pc, #656]	@ (80072dc <UART_SetConfig+0x2c0>)
 800704c:	4013      	ands	r3, r2
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007054:	430b      	orrs	r3, r1
 8007056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a99      	ldr	r2, [pc, #612]	@ (80072e0 <UART_SetConfig+0x2c4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d004      	beq.n	8007088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007084:	4313      	orrs	r3, r2
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a90      	ldr	r2, [pc, #576]	@ (80072e4 <UART_SetConfig+0x2c8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d126      	bne.n	80070f4 <UART_SetConfig+0xd8>
 80070a6:	4b90      	ldr	r3, [pc, #576]	@ (80072e8 <UART_SetConfig+0x2cc>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d81b      	bhi.n	80070ec <UART_SetConfig+0xd0>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <UART_SetConfig+0xa0>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e116      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070d4:	2302      	movs	r3, #2
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e112      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070dc:	2304      	movs	r3, #4
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e2:	e10e      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070e4:	2308      	movs	r3, #8
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ea:	e10a      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070f2:	e106      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a7c      	ldr	r2, [pc, #496]	@ (80072ec <UART_SetConfig+0x2d0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d138      	bne.n	8007170 <UART_SetConfig+0x154>
 80070fe:	4b7a      	ldr	r3, [pc, #488]	@ (80072e8 <UART_SetConfig+0x2cc>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007104:	f003 030c 	and.w	r3, r3, #12
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d82d      	bhi.n	8007168 <UART_SetConfig+0x14c>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <UART_SetConfig+0xf8>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007149 	.word	0x08007149
 8007118:	08007169 	.word	0x08007169
 800711c:	08007169 	.word	0x08007169
 8007120:	08007169 	.word	0x08007169
 8007124:	08007159 	.word	0x08007159
 8007128:	08007169 	.word	0x08007169
 800712c:	08007169 	.word	0x08007169
 8007130:	08007169 	.word	0x08007169
 8007134:	08007151 	.word	0x08007151
 8007138:	08007169 	.word	0x08007169
 800713c:	08007169 	.word	0x08007169
 8007140:	08007169 	.word	0x08007169
 8007144:	08007161 	.word	0x08007161
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714e:	e0d8      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007156:	e0d4      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715e:	e0d0      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007166:	e0cc      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716e:	e0c8      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5e      	ldr	r2, [pc, #376]	@ (80072f0 <UART_SetConfig+0x2d4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d125      	bne.n	80071c6 <UART_SetConfig+0x1aa>
 800717a:	4b5b      	ldr	r3, [pc, #364]	@ (80072e8 <UART_SetConfig+0x2cc>)
 800717c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007180:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007184:	2b30      	cmp	r3, #48	@ 0x30
 8007186:	d016      	beq.n	80071b6 <UART_SetConfig+0x19a>
 8007188:	2b30      	cmp	r3, #48	@ 0x30
 800718a:	d818      	bhi.n	80071be <UART_SetConfig+0x1a2>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d00a      	beq.n	80071a6 <UART_SetConfig+0x18a>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d814      	bhi.n	80071be <UART_SetConfig+0x1a2>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <UART_SetConfig+0x182>
 8007198:	2b10      	cmp	r3, #16
 800719a:	d008      	beq.n	80071ae <UART_SetConfig+0x192>
 800719c:	e00f      	b.n	80071be <UART_SetConfig+0x1a2>
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a4:	e0ad      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071a6:	2302      	movs	r3, #2
 80071a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ac:	e0a9      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071ae:	2304      	movs	r3, #4
 80071b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b4:	e0a5      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071b6:	2308      	movs	r3, #8
 80071b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071bc:	e0a1      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071be:	2310      	movs	r3, #16
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c4:	e09d      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a4a      	ldr	r2, [pc, #296]	@ (80072f4 <UART_SetConfig+0x2d8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d125      	bne.n	800721c <UART_SetConfig+0x200>
 80071d0:	4b45      	ldr	r3, [pc, #276]	@ (80072e8 <UART_SetConfig+0x2cc>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071da:	2bc0      	cmp	r3, #192	@ 0xc0
 80071dc:	d016      	beq.n	800720c <UART_SetConfig+0x1f0>
 80071de:	2bc0      	cmp	r3, #192	@ 0xc0
 80071e0:	d818      	bhi.n	8007214 <UART_SetConfig+0x1f8>
 80071e2:	2b80      	cmp	r3, #128	@ 0x80
 80071e4:	d00a      	beq.n	80071fc <UART_SetConfig+0x1e0>
 80071e6:	2b80      	cmp	r3, #128	@ 0x80
 80071e8:	d814      	bhi.n	8007214 <UART_SetConfig+0x1f8>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <UART_SetConfig+0x1d8>
 80071ee:	2b40      	cmp	r3, #64	@ 0x40
 80071f0:	d008      	beq.n	8007204 <UART_SetConfig+0x1e8>
 80071f2:	e00f      	b.n	8007214 <UART_SetConfig+0x1f8>
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fa:	e082      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071fc:	2302      	movs	r3, #2
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007202:	e07e      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007204:	2304      	movs	r3, #4
 8007206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720a:	e07a      	b.n	8007302 <UART_SetConfig+0x2e6>
 800720c:	2308      	movs	r3, #8
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007212:	e076      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007214:	2310      	movs	r3, #16
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800721a:	e072      	b.n	8007302 <UART_SetConfig+0x2e6>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a35      	ldr	r2, [pc, #212]	@ (80072f8 <UART_SetConfig+0x2dc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d12a      	bne.n	800727c <UART_SetConfig+0x260>
 8007226:	4b30      	ldr	r3, [pc, #192]	@ (80072e8 <UART_SetConfig+0x2cc>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007234:	d01a      	beq.n	800726c <UART_SetConfig+0x250>
 8007236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800723a:	d81b      	bhi.n	8007274 <UART_SetConfig+0x258>
 800723c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007240:	d00c      	beq.n	800725c <UART_SetConfig+0x240>
 8007242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007246:	d815      	bhi.n	8007274 <UART_SetConfig+0x258>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <UART_SetConfig+0x238>
 800724c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007250:	d008      	beq.n	8007264 <UART_SetConfig+0x248>
 8007252:	e00f      	b.n	8007274 <UART_SetConfig+0x258>
 8007254:	2300      	movs	r3, #0
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725a:	e052      	b.n	8007302 <UART_SetConfig+0x2e6>
 800725c:	2302      	movs	r3, #2
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007262:	e04e      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726a:	e04a      	b.n	8007302 <UART_SetConfig+0x2e6>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007272:	e046      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e042      	b.n	8007302 <UART_SetConfig+0x2e6>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a17      	ldr	r2, [pc, #92]	@ (80072e0 <UART_SetConfig+0x2c4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d13a      	bne.n	80072fc <UART_SetConfig+0x2e0>
 8007286:	4b18      	ldr	r3, [pc, #96]	@ (80072e8 <UART_SetConfig+0x2cc>)
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007290:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007294:	d01a      	beq.n	80072cc <UART_SetConfig+0x2b0>
 8007296:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800729a:	d81b      	bhi.n	80072d4 <UART_SetConfig+0x2b8>
 800729c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a0:	d00c      	beq.n	80072bc <UART_SetConfig+0x2a0>
 80072a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a6:	d815      	bhi.n	80072d4 <UART_SetConfig+0x2b8>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <UART_SetConfig+0x298>
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b0:	d008      	beq.n	80072c4 <UART_SetConfig+0x2a8>
 80072b2:	e00f      	b.n	80072d4 <UART_SetConfig+0x2b8>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ba:	e022      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072bc:	2302      	movs	r3, #2
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c2:	e01e      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072c4:	2304      	movs	r3, #4
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ca:	e01a      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072cc:	2308      	movs	r3, #8
 80072ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072d2:	e016      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072da:	e012      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072dc:	efff69f3 	.word	0xefff69f3
 80072e0:	40008000 	.word	0x40008000
 80072e4:	40013800 	.word	0x40013800
 80072e8:	40021000 	.word	0x40021000
 80072ec:	40004400 	.word	0x40004400
 80072f0:	40004800 	.word	0x40004800
 80072f4:	40004c00 	.word	0x40004c00
 80072f8:	40005000 	.word	0x40005000
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a9f      	ldr	r2, [pc, #636]	@ (8007584 <UART_SetConfig+0x568>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d17a      	bne.n	8007402 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800730c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007310:	2b08      	cmp	r3, #8
 8007312:	d824      	bhi.n	800735e <UART_SetConfig+0x342>
 8007314:	a201      	add	r2, pc, #4	@ (adr r2, 800731c <UART_SetConfig+0x300>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007341 	.word	0x08007341
 8007320:	0800735f 	.word	0x0800735f
 8007324:	08007349 	.word	0x08007349
 8007328:	0800735f 	.word	0x0800735f
 800732c:	0800734f 	.word	0x0800734f
 8007330:	0800735f 	.word	0x0800735f
 8007334:	0800735f 	.word	0x0800735f
 8007338:	0800735f 	.word	0x0800735f
 800733c:	08007357 	.word	0x08007357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007340:	f7fd faba 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8007344:	61f8      	str	r0, [r7, #28]
        break;
 8007346:	e010      	b.n	800736a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007348:	4b8f      	ldr	r3, [pc, #572]	@ (8007588 <UART_SetConfig+0x56c>)
 800734a:	61fb      	str	r3, [r7, #28]
        break;
 800734c:	e00d      	b.n	800736a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734e:	f7fd fa1b 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8007352:	61f8      	str	r0, [r7, #28]
        break;
 8007354:	e009      	b.n	800736a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800735a:	61fb      	str	r3, [r7, #28]
        break;
 800735c:	e005      	b.n	800736a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80fb 	beq.w	8007568 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4413      	add	r3, r2
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	429a      	cmp	r2, r3
 8007380:	d305      	bcc.n	800738e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	429a      	cmp	r2, r3
 800738c:	d903      	bls.n	8007396 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007394:	e0e8      	b.n	8007568 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2200      	movs	r2, #0
 800739a:	461c      	mov	r4, r3
 800739c:	4615      	mov	r5, r2
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	022b      	lsls	r3, r5, #8
 80073a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80073ac:	0222      	lsls	r2, r4, #8
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6849      	ldr	r1, [r1, #4]
 80073b2:	0849      	lsrs	r1, r1, #1
 80073b4:	2000      	movs	r0, #0
 80073b6:	4688      	mov	r8, r1
 80073b8:	4681      	mov	r9, r0
 80073ba:	eb12 0a08 	adds.w	sl, r2, r8
 80073be:	eb43 0b09 	adc.w	fp, r3, r9
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7f9 fbe8 	bl	8000ba8 <__aeabi_uldivmod>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4613      	mov	r3, r2
 80073de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073e6:	d308      	bcc.n	80073fa <UART_SetConfig+0x3de>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ee:	d204      	bcs.n	80073fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	e0b6      	b.n	8007568 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007400:	e0b2      	b.n	8007568 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800740a:	d15e      	bne.n	80074ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800740c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007410:	2b08      	cmp	r3, #8
 8007412:	d828      	bhi.n	8007466 <UART_SetConfig+0x44a>
 8007414:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <UART_SetConfig+0x400>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007441 	.word	0x08007441
 8007420:	08007449 	.word	0x08007449
 8007424:	08007451 	.word	0x08007451
 8007428:	08007467 	.word	0x08007467
 800742c:	08007457 	.word	0x08007457
 8007430:	08007467 	.word	0x08007467
 8007434:	08007467 	.word	0x08007467
 8007438:	08007467 	.word	0x08007467
 800743c:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007440:	f7fd fa3a 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8007444:	61f8      	str	r0, [r7, #28]
        break;
 8007446:	e014      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007448:	f7fd fa4c 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 800744c:	61f8      	str	r0, [r7, #28]
        break;
 800744e:	e010      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b4d      	ldr	r3, [pc, #308]	@ (8007588 <UART_SetConfig+0x56c>)
 8007452:	61fb      	str	r3, [r7, #28]
        break;
 8007454:	e00d      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fd f997 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 800745a:	61f8      	str	r0, [r7, #28]
        break;
 800745c:	e009      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007462:	61fb      	str	r3, [r7, #28]
        break;
 8007464:	e005      	b.n	8007472 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d077      	beq.n	8007568 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	005a      	lsls	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	fbb2 f3f3 	udiv	r3, r2, r3
 800748c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d916      	bls.n	80074c2 <UART_SetConfig+0x4a6>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749a:	d212      	bcs.n	80074c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f023 030f 	bic.w	r3, r3, #15
 80074a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	8afb      	ldrh	r3, [r7, #22]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	8afa      	ldrh	r2, [r7, #22]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e052      	b.n	8007568 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074c8:	e04e      	b.n	8007568 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d827      	bhi.n	8007522 <UART_SetConfig+0x506>
 80074d2:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <UART_SetConfig+0x4bc>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	08007523 	.word	0x08007523
 80074e8:	08007513 	.word	0x08007513
 80074ec:	08007523 	.word	0x08007523
 80074f0:	08007523 	.word	0x08007523
 80074f4:	08007523 	.word	0x08007523
 80074f8:	0800751b 	.word	0x0800751b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fd f9dc 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8007500:	61f8      	str	r0, [r7, #28]
        break;
 8007502:	e014      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fd f9ee 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 8007508:	61f8      	str	r0, [r7, #28]
        break;
 800750a:	e010      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800750c:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <UART_SetConfig+0x56c>)
 800750e:	61fb      	str	r3, [r7, #28]
        break;
 8007510:	e00d      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007512:	f7fd f939 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8007516:	61f8      	str	r0, [r7, #28]
        break;
 8007518:	e009      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751e:	61fb      	str	r3, [r7, #28]
        break;
 8007520:	e005      	b.n	800752e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800752c:	bf00      	nop
    }

    if (pclk != 0U)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d019      	beq.n	8007568 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085a      	lsrs	r2, r3, #1
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	441a      	add	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	fbb2 f3f3 	udiv	r3, r2, r3
 8007546:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b0f      	cmp	r3, #15
 800754c:	d909      	bls.n	8007562 <UART_SetConfig+0x546>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007554:	d205      	bcs.n	8007562 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	e002      	b.n	8007568 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007574:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007582:	bf00      	nop
 8007584:	40008000 	.word	0x40008000
 8007588:	00f42400 	.word	0x00f42400

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01a      	beq.n	80076a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800768a:	d10a      	bne.n	80076a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b098      	sub	sp, #96	@ 0x60
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e0:	f7fa fb9e 	bl	8001e20 <HAL_GetTick>
 80076e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d12e      	bne.n	8007752 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f88c 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d021      	beq.n	8007752 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800771c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007722:	653b      	str	r3, [r7, #80]	@ 0x50
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800772c:	647b      	str	r3, [r7, #68]	@ 0x44
 800772e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800773a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e6      	bne.n	800770e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e062      	b.n	8007818 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d149      	bne.n	80077f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007768:	2200      	movs	r2, #0
 800776a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f856 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d03c      	beq.n	80077f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	623b      	str	r3, [r7, #32]
   return(result);
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007798:	633b      	str	r3, [r7, #48]	@ 0x30
 800779a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800779e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077cc:	61fa      	str	r2, [r7, #28]
 80077ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	69b9      	ldr	r1, [r7, #24]
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	617b      	str	r3, [r7, #20]
   return(result);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e011      	b.n	8007818 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3758      	adds	r7, #88	@ 0x58
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e04f      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d04b      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783a:	f7fa faf1 	bl	8001e20 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e04e      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d037      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b80      	cmp	r3, #128	@ 0x80
 8007866:	d034      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d031      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b08      	cmp	r3, #8
 800787a:	d110      	bne.n	800789e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2208      	movs	r2, #8
 8007882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f838 	bl	80078fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2208      	movs	r2, #8
 800788e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e029      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ac:	d111      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f81e 	bl	80078fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e00f      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69da      	ldr	r2, [r3, #28]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4013      	ands	r3, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d0a0      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b095      	sub	sp, #84	@ 0x54
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007920:	643b      	str	r3, [r7, #64]	@ 0x40
 8007922:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800792e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e6      	bne.n	8007902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	61fb      	str	r3, [r7, #28]
   return(result);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3308      	adds	r3, #8
 8007952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800795a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e5      	bne.n	8007934 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800796c:	2b01      	cmp	r3, #1
 800796e:	d118      	bne.n	80079a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	60bb      	str	r3, [r7, #8]
   return(result);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f023 0310 	bic.w	r3, r3, #16
 8007984:	647b      	str	r3, [r7, #68]	@ 0x44
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6979      	ldr	r1, [r7, #20]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	613b      	str	r3, [r7, #16]
   return(result);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e6      	bne.n	8007970 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079b6:	bf00      	nop
 80079b8:	3754      	adds	r7, #84	@ 0x54
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <__cvt>:
 80079c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c6:	ec57 6b10 	vmov	r6, r7, d0
 80079ca:	2f00      	cmp	r7, #0
 80079cc:	460c      	mov	r4, r1
 80079ce:	4619      	mov	r1, r3
 80079d0:	463b      	mov	r3, r7
 80079d2:	bfbb      	ittet	lt
 80079d4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80079d8:	461f      	movlt	r7, r3
 80079da:	2300      	movge	r3, #0
 80079dc:	232d      	movlt	r3, #45	@ 0x2d
 80079de:	700b      	strb	r3, [r1, #0]
 80079e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079e2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80079e6:	4691      	mov	r9, r2
 80079e8:	f023 0820 	bic.w	r8, r3, #32
 80079ec:	bfbc      	itt	lt
 80079ee:	4632      	movlt	r2, r6
 80079f0:	4616      	movlt	r6, r2
 80079f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079f6:	d005      	beq.n	8007a04 <__cvt+0x42>
 80079f8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80079fc:	d100      	bne.n	8007a00 <__cvt+0x3e>
 80079fe:	3401      	adds	r4, #1
 8007a00:	2102      	movs	r1, #2
 8007a02:	e000      	b.n	8007a06 <__cvt+0x44>
 8007a04:	2103      	movs	r1, #3
 8007a06:	ab03      	add	r3, sp, #12
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	ab02      	add	r3, sp, #8
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	ec47 6b10 	vmov	d0, r6, r7
 8007a12:	4653      	mov	r3, sl
 8007a14:	4622      	mov	r2, r4
 8007a16:	f000 fe3b 	bl	8008690 <_dtoa_r>
 8007a1a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a1e:	4605      	mov	r5, r0
 8007a20:	d119      	bne.n	8007a56 <__cvt+0x94>
 8007a22:	f019 0f01 	tst.w	r9, #1
 8007a26:	d00e      	beq.n	8007a46 <__cvt+0x84>
 8007a28:	eb00 0904 	add.w	r9, r0, r4
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f9 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a38:	b108      	cbz	r0, 8007a3e <__cvt+0x7c>
 8007a3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a3e:	2230      	movs	r2, #48	@ 0x30
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	454b      	cmp	r3, r9
 8007a44:	d31e      	bcc.n	8007a84 <__cvt+0xc2>
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a4a:	1b5b      	subs	r3, r3, r5
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	b004      	add	sp, #16
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a5a:	eb00 0904 	add.w	r9, r0, r4
 8007a5e:	d1e5      	bne.n	8007a2c <__cvt+0x6a>
 8007a60:	7803      	ldrb	r3, [r0, #0]
 8007a62:	2b30      	cmp	r3, #48	@ 0x30
 8007a64:	d10a      	bne.n	8007a7c <__cvt+0xba>
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f9 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a72:	b918      	cbnz	r0, 8007a7c <__cvt+0xba>
 8007a74:	f1c4 0401 	rsb	r4, r4, #1
 8007a78:	f8ca 4000 	str.w	r4, [sl]
 8007a7c:	f8da 3000 	ldr.w	r3, [sl]
 8007a80:	4499      	add	r9, r3
 8007a82:	e7d3      	b.n	8007a2c <__cvt+0x6a>
 8007a84:	1c59      	adds	r1, r3, #1
 8007a86:	9103      	str	r1, [sp, #12]
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	e7d9      	b.n	8007a40 <__cvt+0x7e>

08007a8c <__exponent>:
 8007a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	bfba      	itte	lt
 8007a92:	4249      	neglt	r1, r1
 8007a94:	232d      	movlt	r3, #45	@ 0x2d
 8007a96:	232b      	movge	r3, #43	@ 0x2b
 8007a98:	2909      	cmp	r1, #9
 8007a9a:	7002      	strb	r2, [r0, #0]
 8007a9c:	7043      	strb	r3, [r0, #1]
 8007a9e:	dd29      	ble.n	8007af4 <__exponent+0x68>
 8007aa0:	f10d 0307 	add.w	r3, sp, #7
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	270a      	movs	r7, #10
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	fbb1 f6f7 	udiv	r6, r1, r7
 8007aae:	fb07 1416 	mls	r4, r7, r6, r1
 8007ab2:	3430      	adds	r4, #48	@ 0x30
 8007ab4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ab8:	460c      	mov	r4, r1
 8007aba:	2c63      	cmp	r4, #99	@ 0x63
 8007abc:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	dcf1      	bgt.n	8007aa8 <__exponent+0x1c>
 8007ac4:	3130      	adds	r1, #48	@ 0x30
 8007ac6:	1e94      	subs	r4, r2, #2
 8007ac8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007acc:	1c41      	adds	r1, r0, #1
 8007ace:	4623      	mov	r3, r4
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	d30a      	bcc.n	8007aea <__exponent+0x5e>
 8007ad4:	f10d 0309 	add.w	r3, sp, #9
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	42ac      	cmp	r4, r5
 8007adc:	bf88      	it	hi
 8007ade:	2300      	movhi	r3, #0
 8007ae0:	3302      	adds	r3, #2
 8007ae2:	4403      	add	r3, r0
 8007ae4:	1a18      	subs	r0, r3, r0
 8007ae6:	b003      	add	sp, #12
 8007ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aea:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007aee:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007af2:	e7ed      	b.n	8007ad0 <__exponent+0x44>
 8007af4:	2330      	movs	r3, #48	@ 0x30
 8007af6:	3130      	adds	r1, #48	@ 0x30
 8007af8:	7083      	strb	r3, [r0, #2]
 8007afa:	70c1      	strb	r1, [r0, #3]
 8007afc:	1d03      	adds	r3, r0, #4
 8007afe:	e7f1      	b.n	8007ae4 <__exponent+0x58>

08007b00 <_printf_float>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	b08d      	sub	sp, #52	@ 0x34
 8007b06:	460c      	mov	r4, r1
 8007b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	461f      	mov	r7, r3
 8007b10:	4605      	mov	r5, r0
 8007b12:	f000 fcbb 	bl	800848c <_localeconv_r>
 8007b16:	6803      	ldr	r3, [r0, #0]
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f8 fba8 	bl	8000270 <strlen>
 8007b20:	2300      	movs	r3, #0
 8007b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b24:	f8d8 3000 	ldr.w	r3, [r8]
 8007b28:	9005      	str	r0, [sp, #20]
 8007b2a:	3307      	adds	r3, #7
 8007b2c:	f023 0307 	bic.w	r3, r3, #7
 8007b30:	f103 0208 	add.w	r2, r3, #8
 8007b34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b38:	f8d4 b000 	ldr.w	fp, [r4]
 8007b3c:	f8c8 2000 	str.w	r2, [r8]
 8007b40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b48:	9307      	str	r3, [sp, #28]
 8007b4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b56:	4b9c      	ldr	r3, [pc, #624]	@ (8007dc8 <_printf_float+0x2c8>)
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	f7f8 ffe6 	bl	8000b2c <__aeabi_dcmpun>
 8007b60:	bb70      	cbnz	r0, 8007bc0 <_printf_float+0xc0>
 8007b62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b66:	4b98      	ldr	r3, [pc, #608]	@ (8007dc8 <_printf_float+0x2c8>)
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	f7f8 ffc0 	bl	8000af0 <__aeabi_dcmple>
 8007b70:	bb30      	cbnz	r0, 8007bc0 <_printf_float+0xc0>
 8007b72:	2200      	movs	r2, #0
 8007b74:	2300      	movs	r3, #0
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8007b7e:	b110      	cbz	r0, 8007b86 <_printf_float+0x86>
 8007b80:	232d      	movs	r3, #45	@ 0x2d
 8007b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b86:	4a91      	ldr	r2, [pc, #580]	@ (8007dcc <_printf_float+0x2cc>)
 8007b88:	4b91      	ldr	r3, [pc, #580]	@ (8007dd0 <_printf_float+0x2d0>)
 8007b8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b8e:	bf94      	ite	ls
 8007b90:	4690      	movls	r8, r2
 8007b92:	4698      	movhi	r8, r3
 8007b94:	2303      	movs	r3, #3
 8007b96:	6123      	str	r3, [r4, #16]
 8007b98:	f02b 0304 	bic.w	r3, fp, #4
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	9700      	str	r7, [sp, #0]
 8007ba4:	4633      	mov	r3, r6
 8007ba6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 f9d2 	bl	8007f54 <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f040 808d 	bne.w	8007cd0 <_printf_float+0x1d0>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	b00d      	add	sp, #52	@ 0x34
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 ffb0 	bl	8000b2c <__aeabi_dcmpun>
 8007bcc:	b140      	cbz	r0, 8007be0 <_printf_float+0xe0>
 8007bce:	464b      	mov	r3, r9
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfbc      	itt	lt
 8007bd4:	232d      	movlt	r3, #45	@ 0x2d
 8007bd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007bda:	4a7e      	ldr	r2, [pc, #504]	@ (8007dd4 <_printf_float+0x2d4>)
 8007bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8007dd8 <_printf_float+0x2d8>)
 8007bde:	e7d4      	b.n	8007b8a <_printf_float+0x8a>
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007be6:	9206      	str	r2, [sp, #24]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	d13b      	bne.n	8007c64 <_printf_float+0x164>
 8007bec:	2306      	movs	r3, #6
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	9303      	str	r3, [sp, #12]
 8007bfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8007bfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c00:	ab09      	add	r3, sp, #36	@ 0x24
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	6861      	ldr	r1, [r4, #4]
 8007c06:	ec49 8b10 	vmov	d0, r8, r9
 8007c0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f7ff fed7 	bl	80079c2 <__cvt>
 8007c14:	9b06      	ldr	r3, [sp, #24]
 8007c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c18:	2b47      	cmp	r3, #71	@ 0x47
 8007c1a:	4680      	mov	r8, r0
 8007c1c:	d129      	bne.n	8007c72 <_printf_float+0x172>
 8007c1e:	1cc8      	adds	r0, r1, #3
 8007c20:	db02      	blt.n	8007c28 <_printf_float+0x128>
 8007c22:	6863      	ldr	r3, [r4, #4]
 8007c24:	4299      	cmp	r1, r3
 8007c26:	dd41      	ble.n	8007cac <_printf_float+0x1ac>
 8007c28:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c2c:	fa5f fa8a 	uxtb.w	sl, sl
 8007c30:	3901      	subs	r1, #1
 8007c32:	4652      	mov	r2, sl
 8007c34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c38:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c3a:	f7ff ff27 	bl	8007a8c <__exponent>
 8007c3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c40:	1813      	adds	r3, r2, r0
 8007c42:	2a01      	cmp	r2, #1
 8007c44:	4681      	mov	r9, r0
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	dc02      	bgt.n	8007c50 <_printf_float+0x150>
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	07d2      	lsls	r2, r2, #31
 8007c4e:	d501      	bpl.n	8007c54 <_printf_float+0x154>
 8007c50:	3301      	adds	r3, #1
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0a2      	beq.n	8007ba2 <_printf_float+0xa2>
 8007c5c:	232d      	movs	r3, #45	@ 0x2d
 8007c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c62:	e79e      	b.n	8007ba2 <_printf_float+0xa2>
 8007c64:	9a06      	ldr	r2, [sp, #24]
 8007c66:	2a47      	cmp	r2, #71	@ 0x47
 8007c68:	d1c2      	bne.n	8007bf0 <_printf_float+0xf0>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1c0      	bne.n	8007bf0 <_printf_float+0xf0>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e7bd      	b.n	8007bee <_printf_float+0xee>
 8007c72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c76:	d9db      	bls.n	8007c30 <_printf_float+0x130>
 8007c78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007c7c:	d118      	bne.n	8007cb0 <_printf_float+0x1b0>
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	dd0b      	ble.n	8007c9c <_printf_float+0x19c>
 8007c84:	6121      	str	r1, [r4, #16]
 8007c86:	b913      	cbnz	r3, 8007c8e <_printf_float+0x18e>
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	07d0      	lsls	r0, r2, #31
 8007c8c:	d502      	bpl.n	8007c94 <_printf_float+0x194>
 8007c8e:	3301      	adds	r3, #1
 8007c90:	440b      	add	r3, r1
 8007c92:	6123      	str	r3, [r4, #16]
 8007c94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c96:	f04f 0900 	mov.w	r9, #0
 8007c9a:	e7db      	b.n	8007c54 <_printf_float+0x154>
 8007c9c:	b913      	cbnz	r3, 8007ca4 <_printf_float+0x1a4>
 8007c9e:	6822      	ldr	r2, [r4, #0]
 8007ca0:	07d2      	lsls	r2, r2, #31
 8007ca2:	d501      	bpl.n	8007ca8 <_printf_float+0x1a8>
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	e7f4      	b.n	8007c92 <_printf_float+0x192>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e7f2      	b.n	8007c92 <_printf_float+0x192>
 8007cac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	db05      	blt.n	8007cc2 <_printf_float+0x1c2>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	6121      	str	r1, [r4, #16]
 8007cba:	07d8      	lsls	r0, r3, #31
 8007cbc:	d5ea      	bpl.n	8007c94 <_printf_float+0x194>
 8007cbe:	1c4b      	adds	r3, r1, #1
 8007cc0:	e7e7      	b.n	8007c92 <_printf_float+0x192>
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	bfd4      	ite	le
 8007cc6:	f1c1 0202 	rsble	r2, r1, #2
 8007cca:	2201      	movgt	r2, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	e7e0      	b.n	8007c92 <_printf_float+0x192>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	055a      	lsls	r2, r3, #21
 8007cd4:	d407      	bmi.n	8007ce6 <_printf_float+0x1e6>
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	4642      	mov	r2, r8
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d12b      	bne.n	8007d3c <_printf_float+0x23c>
 8007ce4:	e767      	b.n	8007bb6 <_printf_float+0xb6>
 8007ce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cea:	f240 80dd 	bls.w	8007ea8 <_printf_float+0x3a8>
 8007cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f7f8 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d033      	beq.n	8007d66 <_printf_float+0x266>
 8007cfe:	4a37      	ldr	r2, [pc, #220]	@ (8007ddc <_printf_float+0x2dc>)
 8007d00:	2301      	movs	r3, #1
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f43f af54 	beq.w	8007bb6 <_printf_float+0xb6>
 8007d0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d12:	4543      	cmp	r3, r8
 8007d14:	db02      	blt.n	8007d1c <_printf_float+0x21c>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	07d8      	lsls	r0, r3, #31
 8007d1a:	d50f      	bpl.n	8007d3c <_printf_float+0x23c>
 8007d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af45 	beq.w	8007bb6 <_printf_float+0xb6>
 8007d2c:	f04f 0900 	mov.w	r9, #0
 8007d30:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d34:	f104 0a1a 	add.w	sl, r4, #26
 8007d38:	45c8      	cmp	r8, r9
 8007d3a:	dc09      	bgt.n	8007d50 <_printf_float+0x250>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	f100 8103 	bmi.w	8007f4a <_printf_float+0x44a>
 8007d44:	68e0      	ldr	r0, [r4, #12]
 8007d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d48:	4298      	cmp	r0, r3
 8007d4a:	bfb8      	it	lt
 8007d4c:	4618      	movlt	r0, r3
 8007d4e:	e734      	b.n	8007bba <_printf_float+0xba>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4652      	mov	r2, sl
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af2b 	beq.w	8007bb6 <_printf_float+0xb6>
 8007d60:	f109 0901 	add.w	r9, r9, #1
 8007d64:	e7e8      	b.n	8007d38 <_printf_float+0x238>
 8007d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dc39      	bgt.n	8007de0 <_printf_float+0x2e0>
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ddc <_printf_float+0x2dc>)
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4631      	mov	r1, r6
 8007d72:	4628      	mov	r0, r5
 8007d74:	47b8      	blx	r7
 8007d76:	3001      	adds	r0, #1
 8007d78:	f43f af1d 	beq.w	8007bb6 <_printf_float+0xb6>
 8007d7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d80:	ea59 0303 	orrs.w	r3, r9, r3
 8007d84:	d102      	bne.n	8007d8c <_printf_float+0x28c>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	07d9      	lsls	r1, r3, #31
 8007d8a:	d5d7      	bpl.n	8007d3c <_printf_float+0x23c>
 8007d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af0d 	beq.w	8007bb6 <_printf_float+0xb6>
 8007d9c:	f04f 0a00 	mov.w	sl, #0
 8007da0:	f104 0b1a 	add.w	fp, r4, #26
 8007da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da6:	425b      	negs	r3, r3
 8007da8:	4553      	cmp	r3, sl
 8007daa:	dc01      	bgt.n	8007db0 <_printf_float+0x2b0>
 8007dac:	464b      	mov	r3, r9
 8007dae:	e793      	b.n	8007cd8 <_printf_float+0x1d8>
 8007db0:	2301      	movs	r3, #1
 8007db2:	465a      	mov	r2, fp
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f aefb 	beq.w	8007bb6 <_printf_float+0xb6>
 8007dc0:	f10a 0a01 	add.w	sl, sl, #1
 8007dc4:	e7ee      	b.n	8007da4 <_printf_float+0x2a4>
 8007dc6:	bf00      	nop
 8007dc8:	7fefffff 	.word	0x7fefffff
 8007dcc:	0800a32c 	.word	0x0800a32c
 8007dd0:	0800a330 	.word	0x0800a330
 8007dd4:	0800a334 	.word	0x0800a334
 8007dd8:	0800a338 	.word	0x0800a338
 8007ddc:	0800a33c 	.word	0x0800a33c
 8007de0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007de2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007de6:	4553      	cmp	r3, sl
 8007de8:	bfa8      	it	ge
 8007dea:	4653      	movge	r3, sl
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	4699      	mov	r9, r3
 8007df0:	dc36      	bgt.n	8007e60 <_printf_float+0x360>
 8007df2:	f04f 0b00 	mov.w	fp, #0
 8007df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dfa:	f104 021a 	add.w	r2, r4, #26
 8007dfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e00:	9306      	str	r3, [sp, #24]
 8007e02:	eba3 0309 	sub.w	r3, r3, r9
 8007e06:	455b      	cmp	r3, fp
 8007e08:	dc31      	bgt.n	8007e6e <_printf_float+0x36e>
 8007e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0c:	459a      	cmp	sl, r3
 8007e0e:	dc3a      	bgt.n	8007e86 <_printf_float+0x386>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d437      	bmi.n	8007e86 <_printf_float+0x386>
 8007e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e18:	ebaa 0903 	sub.w	r9, sl, r3
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	ebaa 0303 	sub.w	r3, sl, r3
 8007e22:	4599      	cmp	r9, r3
 8007e24:	bfa8      	it	ge
 8007e26:	4699      	movge	r9, r3
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	dc33      	bgt.n	8007e96 <_printf_float+0x396>
 8007e2e:	f04f 0800 	mov.w	r8, #0
 8007e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e36:	f104 0b1a 	add.w	fp, r4, #26
 8007e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007e40:	eba3 0309 	sub.w	r3, r3, r9
 8007e44:	4543      	cmp	r3, r8
 8007e46:	f77f af79 	ble.w	8007d3c <_printf_float+0x23c>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	465a      	mov	r2, fp
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f aeae 	beq.w	8007bb6 <_printf_float+0xb6>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	e7ec      	b.n	8007e3a <_printf_float+0x33a>
 8007e60:	4642      	mov	r2, r8
 8007e62:	4631      	mov	r1, r6
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b8      	blx	r7
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d1c2      	bne.n	8007df2 <_printf_float+0x2f2>
 8007e6c:	e6a3      	b.n	8007bb6 <_printf_float+0xb6>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4631      	mov	r1, r6
 8007e72:	4628      	mov	r0, r5
 8007e74:	9206      	str	r2, [sp, #24]
 8007e76:	47b8      	blx	r7
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f43f ae9c 	beq.w	8007bb6 <_printf_float+0xb6>
 8007e7e:	9a06      	ldr	r2, [sp, #24]
 8007e80:	f10b 0b01 	add.w	fp, fp, #1
 8007e84:	e7bb      	b.n	8007dfe <_printf_float+0x2fe>
 8007e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	d1c0      	bne.n	8007e16 <_printf_float+0x316>
 8007e94:	e68f      	b.n	8007bb6 <_printf_float+0xb6>
 8007e96:	9a06      	ldr	r2, [sp, #24]
 8007e98:	464b      	mov	r3, r9
 8007e9a:	4442      	add	r2, r8
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b8      	blx	r7
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d1c3      	bne.n	8007e2e <_printf_float+0x32e>
 8007ea6:	e686      	b.n	8007bb6 <_printf_float+0xb6>
 8007ea8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007eac:	f1ba 0f01 	cmp.w	sl, #1
 8007eb0:	dc01      	bgt.n	8007eb6 <_printf_float+0x3b6>
 8007eb2:	07db      	lsls	r3, r3, #31
 8007eb4:	d536      	bpl.n	8007f24 <_printf_float+0x424>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4642      	mov	r2, r8
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f43f ae78 	beq.w	8007bb6 <_printf_float+0xb6>
 8007ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f43f ae70 	beq.w	8007bb6 <_printf_float+0xb6>
 8007ed6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ee2:	f7f8 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee6:	b9c0      	cbnz	r0, 8007f1a <_printf_float+0x41a>
 8007ee8:	4653      	mov	r3, sl
 8007eea:	f108 0201 	add.w	r2, r8, #1
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d10c      	bne.n	8007f12 <_printf_float+0x412>
 8007ef8:	e65d      	b.n	8007bb6 <_printf_float+0xb6>
 8007efa:	2301      	movs	r3, #1
 8007efc:	465a      	mov	r2, fp
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	f43f ae56 	beq.w	8007bb6 <_printf_float+0xb6>
 8007f0a:	f108 0801 	add.w	r8, r8, #1
 8007f0e:	45d0      	cmp	r8, sl
 8007f10:	dbf3      	blt.n	8007efa <_printf_float+0x3fa>
 8007f12:	464b      	mov	r3, r9
 8007f14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f18:	e6df      	b.n	8007cda <_printf_float+0x1da>
 8007f1a:	f04f 0800 	mov.w	r8, #0
 8007f1e:	f104 0b1a 	add.w	fp, r4, #26
 8007f22:	e7f4      	b.n	8007f0e <_printf_float+0x40e>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4642      	mov	r2, r8
 8007f28:	e7e1      	b.n	8007eee <_printf_float+0x3ee>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	464a      	mov	r2, r9
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f ae3e 	beq.w	8007bb6 <_printf_float+0xb6>
 8007f3a:	f108 0801 	add.w	r8, r8, #1
 8007f3e:	68e3      	ldr	r3, [r4, #12]
 8007f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f42:	1a5b      	subs	r3, r3, r1
 8007f44:	4543      	cmp	r3, r8
 8007f46:	dcf0      	bgt.n	8007f2a <_printf_float+0x42a>
 8007f48:	e6fc      	b.n	8007d44 <_printf_float+0x244>
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	f104 0919 	add.w	r9, r4, #25
 8007f52:	e7f4      	b.n	8007f3e <_printf_float+0x43e>

08007f54 <_printf_common>:
 8007f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f58:	4616      	mov	r6, r2
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	688a      	ldr	r2, [r1, #8]
 8007f5e:	690b      	ldr	r3, [r1, #16]
 8007f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	bfb8      	it	lt
 8007f68:	4613      	movlt	r3, r2
 8007f6a:	6033      	str	r3, [r6, #0]
 8007f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f70:	4607      	mov	r7, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	b10a      	cbz	r2, 8007f7a <_printf_common+0x26>
 8007f76:	3301      	adds	r3, #1
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	0699      	lsls	r1, r3, #26
 8007f7e:	bf42      	ittt	mi
 8007f80:	6833      	ldrmi	r3, [r6, #0]
 8007f82:	3302      	addmi	r3, #2
 8007f84:	6033      	strmi	r3, [r6, #0]
 8007f86:	6825      	ldr	r5, [r4, #0]
 8007f88:	f015 0506 	ands.w	r5, r5, #6
 8007f8c:	d106      	bne.n	8007f9c <_printf_common+0x48>
 8007f8e:	f104 0a19 	add.w	sl, r4, #25
 8007f92:	68e3      	ldr	r3, [r4, #12]
 8007f94:	6832      	ldr	r2, [r6, #0]
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	42ab      	cmp	r3, r5
 8007f9a:	dc26      	bgt.n	8007fea <_printf_common+0x96>
 8007f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	3b00      	subs	r3, #0
 8007fa4:	bf18      	it	ne
 8007fa6:	2301      	movne	r3, #1
 8007fa8:	0692      	lsls	r2, r2, #26
 8007faa:	d42b      	bmi.n	8008004 <_printf_common+0xb0>
 8007fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	47c8      	blx	r9
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d01e      	beq.n	8007ff8 <_printf_common+0xa4>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	6922      	ldr	r2, [r4, #16]
 8007fbe:	f003 0306 	and.w	r3, r3, #6
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	bf02      	ittt	eq
 8007fc6:	68e5      	ldreq	r5, [r4, #12]
 8007fc8:	6833      	ldreq	r3, [r6, #0]
 8007fca:	1aed      	subeq	r5, r5, r3
 8007fcc:	68a3      	ldr	r3, [r4, #8]
 8007fce:	bf0c      	ite	eq
 8007fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd4:	2500      	movne	r5, #0
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bfc4      	itt	gt
 8007fda:	1a9b      	subgt	r3, r3, r2
 8007fdc:	18ed      	addgt	r5, r5, r3
 8007fde:	2600      	movs	r6, #0
 8007fe0:	341a      	adds	r4, #26
 8007fe2:	42b5      	cmp	r5, r6
 8007fe4:	d11a      	bne.n	800801c <_printf_common+0xc8>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	e008      	b.n	8007ffc <_printf_common+0xa8>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4652      	mov	r2, sl
 8007fee:	4641      	mov	r1, r8
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	47c8      	blx	r9
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d103      	bne.n	8008000 <_printf_common+0xac>
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008000:	3501      	adds	r5, #1
 8008002:	e7c6      	b.n	8007f92 <_printf_common+0x3e>
 8008004:	18e1      	adds	r1, r4, r3
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	2030      	movs	r0, #48	@ 0x30
 800800a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800800e:	4422      	add	r2, r4
 8008010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008018:	3302      	adds	r3, #2
 800801a:	e7c7      	b.n	8007fac <_printf_common+0x58>
 800801c:	2301      	movs	r3, #1
 800801e:	4622      	mov	r2, r4
 8008020:	4641      	mov	r1, r8
 8008022:	4638      	mov	r0, r7
 8008024:	47c8      	blx	r9
 8008026:	3001      	adds	r0, #1
 8008028:	d0e6      	beq.n	8007ff8 <_printf_common+0xa4>
 800802a:	3601      	adds	r6, #1
 800802c:	e7d9      	b.n	8007fe2 <_printf_common+0x8e>
	...

08008030 <_printf_i>:
 8008030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008034:	7e0f      	ldrb	r7, [r1, #24]
 8008036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008038:	2f78      	cmp	r7, #120	@ 0x78
 800803a:	4691      	mov	r9, r2
 800803c:	4680      	mov	r8, r0
 800803e:	460c      	mov	r4, r1
 8008040:	469a      	mov	sl, r3
 8008042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008046:	d807      	bhi.n	8008058 <_printf_i+0x28>
 8008048:	2f62      	cmp	r7, #98	@ 0x62
 800804a:	d80a      	bhi.n	8008062 <_printf_i+0x32>
 800804c:	2f00      	cmp	r7, #0
 800804e:	f000 80d2 	beq.w	80081f6 <_printf_i+0x1c6>
 8008052:	2f58      	cmp	r7, #88	@ 0x58
 8008054:	f000 80b9 	beq.w	80081ca <_printf_i+0x19a>
 8008058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800805c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008060:	e03a      	b.n	80080d8 <_printf_i+0xa8>
 8008062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008066:	2b15      	cmp	r3, #21
 8008068:	d8f6      	bhi.n	8008058 <_printf_i+0x28>
 800806a:	a101      	add	r1, pc, #4	@ (adr r1, 8008070 <_printf_i+0x40>)
 800806c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008070:	080080c9 	.word	0x080080c9
 8008074:	080080dd 	.word	0x080080dd
 8008078:	08008059 	.word	0x08008059
 800807c:	08008059 	.word	0x08008059
 8008080:	08008059 	.word	0x08008059
 8008084:	08008059 	.word	0x08008059
 8008088:	080080dd 	.word	0x080080dd
 800808c:	08008059 	.word	0x08008059
 8008090:	08008059 	.word	0x08008059
 8008094:	08008059 	.word	0x08008059
 8008098:	08008059 	.word	0x08008059
 800809c:	080081dd 	.word	0x080081dd
 80080a0:	08008107 	.word	0x08008107
 80080a4:	08008197 	.word	0x08008197
 80080a8:	08008059 	.word	0x08008059
 80080ac:	08008059 	.word	0x08008059
 80080b0:	080081ff 	.word	0x080081ff
 80080b4:	08008059 	.word	0x08008059
 80080b8:	08008107 	.word	0x08008107
 80080bc:	08008059 	.word	0x08008059
 80080c0:	08008059 	.word	0x08008059
 80080c4:	0800819f 	.word	0x0800819f
 80080c8:	6833      	ldr	r3, [r6, #0]
 80080ca:	1d1a      	adds	r2, r3, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6032      	str	r2, [r6, #0]
 80080d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080d8:	2301      	movs	r3, #1
 80080da:	e09d      	b.n	8008218 <_printf_i+0x1e8>
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	1d19      	adds	r1, r3, #4
 80080e2:	6031      	str	r1, [r6, #0]
 80080e4:	0606      	lsls	r6, r0, #24
 80080e6:	d501      	bpl.n	80080ec <_printf_i+0xbc>
 80080e8:	681d      	ldr	r5, [r3, #0]
 80080ea:	e003      	b.n	80080f4 <_printf_i+0xc4>
 80080ec:	0645      	lsls	r5, r0, #25
 80080ee:	d5fb      	bpl.n	80080e8 <_printf_i+0xb8>
 80080f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	da03      	bge.n	8008100 <_printf_i+0xd0>
 80080f8:	232d      	movs	r3, #45	@ 0x2d
 80080fa:	426d      	negs	r5, r5
 80080fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008100:	4859      	ldr	r0, [pc, #356]	@ (8008268 <_printf_i+0x238>)
 8008102:	230a      	movs	r3, #10
 8008104:	e011      	b.n	800812a <_printf_i+0xfa>
 8008106:	6821      	ldr	r1, [r4, #0]
 8008108:	6833      	ldr	r3, [r6, #0]
 800810a:	0608      	lsls	r0, r1, #24
 800810c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008110:	d402      	bmi.n	8008118 <_printf_i+0xe8>
 8008112:	0649      	lsls	r1, r1, #25
 8008114:	bf48      	it	mi
 8008116:	b2ad      	uxthmi	r5, r5
 8008118:	2f6f      	cmp	r7, #111	@ 0x6f
 800811a:	4853      	ldr	r0, [pc, #332]	@ (8008268 <_printf_i+0x238>)
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	bf14      	ite	ne
 8008120:	230a      	movne	r3, #10
 8008122:	2308      	moveq	r3, #8
 8008124:	2100      	movs	r1, #0
 8008126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800812a:	6866      	ldr	r6, [r4, #4]
 800812c:	60a6      	str	r6, [r4, #8]
 800812e:	2e00      	cmp	r6, #0
 8008130:	bfa2      	ittt	ge
 8008132:	6821      	ldrge	r1, [r4, #0]
 8008134:	f021 0104 	bicge.w	r1, r1, #4
 8008138:	6021      	strge	r1, [r4, #0]
 800813a:	b90d      	cbnz	r5, 8008140 <_printf_i+0x110>
 800813c:	2e00      	cmp	r6, #0
 800813e:	d04b      	beq.n	80081d8 <_printf_i+0x1a8>
 8008140:	4616      	mov	r6, r2
 8008142:	fbb5 f1f3 	udiv	r1, r5, r3
 8008146:	fb03 5711 	mls	r7, r3, r1, r5
 800814a:	5dc7      	ldrb	r7, [r0, r7]
 800814c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008150:	462f      	mov	r7, r5
 8008152:	42bb      	cmp	r3, r7
 8008154:	460d      	mov	r5, r1
 8008156:	d9f4      	bls.n	8008142 <_printf_i+0x112>
 8008158:	2b08      	cmp	r3, #8
 800815a:	d10b      	bne.n	8008174 <_printf_i+0x144>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	07df      	lsls	r7, r3, #31
 8008160:	d508      	bpl.n	8008174 <_printf_i+0x144>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4299      	cmp	r1, r3
 8008168:	bfde      	ittt	le
 800816a:	2330      	movle	r3, #48	@ 0x30
 800816c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008174:	1b92      	subs	r2, r2, r6
 8008176:	6122      	str	r2, [r4, #16]
 8008178:	f8cd a000 	str.w	sl, [sp]
 800817c:	464b      	mov	r3, r9
 800817e:	aa03      	add	r2, sp, #12
 8008180:	4621      	mov	r1, r4
 8008182:	4640      	mov	r0, r8
 8008184:	f7ff fee6 	bl	8007f54 <_printf_common>
 8008188:	3001      	adds	r0, #1
 800818a:	d14a      	bne.n	8008222 <_printf_i+0x1f2>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	b004      	add	sp, #16
 8008192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	f043 0320 	orr.w	r3, r3, #32
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	4833      	ldr	r0, [pc, #204]	@ (800826c <_printf_i+0x23c>)
 80081a0:	2778      	movs	r7, #120	@ 0x78
 80081a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	6831      	ldr	r1, [r6, #0]
 80081aa:	061f      	lsls	r7, r3, #24
 80081ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80081b0:	d402      	bmi.n	80081b8 <_printf_i+0x188>
 80081b2:	065f      	lsls	r7, r3, #25
 80081b4:	bf48      	it	mi
 80081b6:	b2ad      	uxthmi	r5, r5
 80081b8:	6031      	str	r1, [r6, #0]
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	bf44      	itt	mi
 80081be:	f043 0320 	orrmi.w	r3, r3, #32
 80081c2:	6023      	strmi	r3, [r4, #0]
 80081c4:	b11d      	cbz	r5, 80081ce <_printf_i+0x19e>
 80081c6:	2310      	movs	r3, #16
 80081c8:	e7ac      	b.n	8008124 <_printf_i+0xf4>
 80081ca:	4827      	ldr	r0, [pc, #156]	@ (8008268 <_printf_i+0x238>)
 80081cc:	e7e9      	b.n	80081a2 <_printf_i+0x172>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f023 0320 	bic.w	r3, r3, #32
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	e7f6      	b.n	80081c6 <_printf_i+0x196>
 80081d8:	4616      	mov	r6, r2
 80081da:	e7bd      	b.n	8008158 <_printf_i+0x128>
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	6825      	ldr	r5, [r4, #0]
 80081e0:	6961      	ldr	r1, [r4, #20]
 80081e2:	1d18      	adds	r0, r3, #4
 80081e4:	6030      	str	r0, [r6, #0]
 80081e6:	062e      	lsls	r6, r5, #24
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	d501      	bpl.n	80081f0 <_printf_i+0x1c0>
 80081ec:	6019      	str	r1, [r3, #0]
 80081ee:	e002      	b.n	80081f6 <_printf_i+0x1c6>
 80081f0:	0668      	lsls	r0, r5, #25
 80081f2:	d5fb      	bpl.n	80081ec <_printf_i+0x1bc>
 80081f4:	8019      	strh	r1, [r3, #0]
 80081f6:	2300      	movs	r3, #0
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	4616      	mov	r6, r2
 80081fc:	e7bc      	b.n	8008178 <_printf_i+0x148>
 80081fe:	6833      	ldr	r3, [r6, #0]
 8008200:	1d1a      	adds	r2, r3, #4
 8008202:	6032      	str	r2, [r6, #0]
 8008204:	681e      	ldr	r6, [r3, #0]
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	2100      	movs	r1, #0
 800820a:	4630      	mov	r0, r6
 800820c:	f7f7 ffe0 	bl	80001d0 <memchr>
 8008210:	b108      	cbz	r0, 8008216 <_printf_i+0x1e6>
 8008212:	1b80      	subs	r0, r0, r6
 8008214:	6060      	str	r0, [r4, #4]
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	2300      	movs	r3, #0
 800821c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008220:	e7aa      	b.n	8008178 <_printf_i+0x148>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	4632      	mov	r2, r6
 8008226:	4649      	mov	r1, r9
 8008228:	4640      	mov	r0, r8
 800822a:	47d0      	blx	sl
 800822c:	3001      	adds	r0, #1
 800822e:	d0ad      	beq.n	800818c <_printf_i+0x15c>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	079b      	lsls	r3, r3, #30
 8008234:	d413      	bmi.n	800825e <_printf_i+0x22e>
 8008236:	68e0      	ldr	r0, [r4, #12]
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	4298      	cmp	r0, r3
 800823c:	bfb8      	it	lt
 800823e:	4618      	movlt	r0, r3
 8008240:	e7a6      	b.n	8008190 <_printf_i+0x160>
 8008242:	2301      	movs	r3, #1
 8008244:	4632      	mov	r2, r6
 8008246:	4649      	mov	r1, r9
 8008248:	4640      	mov	r0, r8
 800824a:	47d0      	blx	sl
 800824c:	3001      	adds	r0, #1
 800824e:	d09d      	beq.n	800818c <_printf_i+0x15c>
 8008250:	3501      	adds	r5, #1
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	9903      	ldr	r1, [sp, #12]
 8008256:	1a5b      	subs	r3, r3, r1
 8008258:	42ab      	cmp	r3, r5
 800825a:	dcf2      	bgt.n	8008242 <_printf_i+0x212>
 800825c:	e7eb      	b.n	8008236 <_printf_i+0x206>
 800825e:	2500      	movs	r5, #0
 8008260:	f104 0619 	add.w	r6, r4, #25
 8008264:	e7f5      	b.n	8008252 <_printf_i+0x222>
 8008266:	bf00      	nop
 8008268:	0800a33e 	.word	0x0800a33e
 800826c:	0800a34f 	.word	0x0800a34f

08008270 <std>:
 8008270:	2300      	movs	r3, #0
 8008272:	b510      	push	{r4, lr}
 8008274:	4604      	mov	r4, r0
 8008276:	e9c0 3300 	strd	r3, r3, [r0]
 800827a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800827e:	6083      	str	r3, [r0, #8]
 8008280:	8181      	strh	r1, [r0, #12]
 8008282:	6643      	str	r3, [r0, #100]	@ 0x64
 8008284:	81c2      	strh	r2, [r0, #14]
 8008286:	6183      	str	r3, [r0, #24]
 8008288:	4619      	mov	r1, r3
 800828a:	2208      	movs	r2, #8
 800828c:	305c      	adds	r0, #92	@ 0x5c
 800828e:	f000 f8f4 	bl	800847a <memset>
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <std+0x58>)
 8008294:	6263      	str	r3, [r4, #36]	@ 0x24
 8008296:	4b0d      	ldr	r3, [pc, #52]	@ (80082cc <std+0x5c>)
 8008298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <std+0x60>)
 800829c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800829e:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <std+0x64>)
 80082a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80082a2:	4b0d      	ldr	r3, [pc, #52]	@ (80082d8 <std+0x68>)
 80082a4:	6224      	str	r4, [r4, #32]
 80082a6:	429c      	cmp	r4, r3
 80082a8:	d006      	beq.n	80082b8 <std+0x48>
 80082aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082ae:	4294      	cmp	r4, r2
 80082b0:	d002      	beq.n	80082b8 <std+0x48>
 80082b2:	33d0      	adds	r3, #208	@ 0xd0
 80082b4:	429c      	cmp	r4, r3
 80082b6:	d105      	bne.n	80082c4 <std+0x54>
 80082b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f000 b958 	b.w	8008574 <__retarget_lock_init_recursive>
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	080083f5 	.word	0x080083f5
 80082cc:	08008417 	.word	0x08008417
 80082d0:	0800844f 	.word	0x0800844f
 80082d4:	08008473 	.word	0x08008473
 80082d8:	200003b8 	.word	0x200003b8

080082dc <stdio_exit_handler>:
 80082dc:	4a02      	ldr	r2, [pc, #8]	@ (80082e8 <stdio_exit_handler+0xc>)
 80082de:	4903      	ldr	r1, [pc, #12]	@ (80082ec <stdio_exit_handler+0x10>)
 80082e0:	4803      	ldr	r0, [pc, #12]	@ (80082f0 <stdio_exit_handler+0x14>)
 80082e2:	f000 b869 	b.w	80083b8 <_fwalk_sglue>
 80082e6:	bf00      	nop
 80082e8:	2000000c 	.word	0x2000000c
 80082ec:	08009c25 	.word	0x08009c25
 80082f0:	2000001c 	.word	0x2000001c

080082f4 <cleanup_stdio>:
 80082f4:	6841      	ldr	r1, [r0, #4]
 80082f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008328 <cleanup_stdio+0x34>)
 80082f8:	4299      	cmp	r1, r3
 80082fa:	b510      	push	{r4, lr}
 80082fc:	4604      	mov	r4, r0
 80082fe:	d001      	beq.n	8008304 <cleanup_stdio+0x10>
 8008300:	f001 fc90 	bl	8009c24 <_fflush_r>
 8008304:	68a1      	ldr	r1, [r4, #8]
 8008306:	4b09      	ldr	r3, [pc, #36]	@ (800832c <cleanup_stdio+0x38>)
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <cleanup_stdio+0x1e>
 800830c:	4620      	mov	r0, r4
 800830e:	f001 fc89 	bl	8009c24 <_fflush_r>
 8008312:	68e1      	ldr	r1, [r4, #12]
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <cleanup_stdio+0x3c>)
 8008316:	4299      	cmp	r1, r3
 8008318:	d004      	beq.n	8008324 <cleanup_stdio+0x30>
 800831a:	4620      	mov	r0, r4
 800831c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008320:	f001 bc80 	b.w	8009c24 <_fflush_r>
 8008324:	bd10      	pop	{r4, pc}
 8008326:	bf00      	nop
 8008328:	200003b8 	.word	0x200003b8
 800832c:	20000420 	.word	0x20000420
 8008330:	20000488 	.word	0x20000488

08008334 <global_stdio_init.part.0>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <global_stdio_init.part.0+0x30>)
 8008338:	4c0b      	ldr	r4, [pc, #44]	@ (8008368 <global_stdio_init.part.0+0x34>)
 800833a:	4a0c      	ldr	r2, [pc, #48]	@ (800836c <global_stdio_init.part.0+0x38>)
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	4620      	mov	r0, r4
 8008340:	2200      	movs	r2, #0
 8008342:	2104      	movs	r1, #4
 8008344:	f7ff ff94 	bl	8008270 <std>
 8008348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800834c:	2201      	movs	r2, #1
 800834e:	2109      	movs	r1, #9
 8008350:	f7ff ff8e 	bl	8008270 <std>
 8008354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008358:	2202      	movs	r2, #2
 800835a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835e:	2112      	movs	r1, #18
 8008360:	f7ff bf86 	b.w	8008270 <std>
 8008364:	200004f0 	.word	0x200004f0
 8008368:	200003b8 	.word	0x200003b8
 800836c:	080082dd 	.word	0x080082dd

08008370 <__sfp_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	@ (8008378 <__sfp_lock_acquire+0x8>)
 8008372:	f000 b900 	b.w	8008576 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	200004f9 	.word	0x200004f9

0800837c <__sfp_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	@ (8008384 <__sfp_lock_release+0x8>)
 800837e:	f000 b8fb 	b.w	8008578 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	200004f9 	.word	0x200004f9

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sfp_lock_acquire>
 8008390:	6a23      	ldr	r3, [r4, #32]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sfp_lock_release>
 800839c:	4b04      	ldr	r3, [pc, #16]	@ (80083b0 <__sinit+0x28>)
 800839e:	6223      	str	r3, [r4, #32]
 80083a0:	4b04      	ldr	r3, [pc, #16]	@ (80083b4 <__sinit+0x2c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1f5      	bne.n	8008394 <__sinit+0xc>
 80083a8:	f7ff ffc4 	bl	8008334 <global_stdio_init.part.0>
 80083ac:	e7f2      	b.n	8008394 <__sinit+0xc>
 80083ae:	bf00      	nop
 80083b0:	080082f5 	.word	0x080082f5
 80083b4:	200004f0 	.word	0x200004f0

080083b8 <_fwalk_sglue>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	4607      	mov	r7, r0
 80083be:	4688      	mov	r8, r1
 80083c0:	4614      	mov	r4, r2
 80083c2:	2600      	movs	r6, #0
 80083c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083c8:	f1b9 0901 	subs.w	r9, r9, #1
 80083cc:	d505      	bpl.n	80083da <_fwalk_sglue+0x22>
 80083ce:	6824      	ldr	r4, [r4, #0]
 80083d0:	2c00      	cmp	r4, #0
 80083d2:	d1f7      	bne.n	80083c4 <_fwalk_sglue+0xc>
 80083d4:	4630      	mov	r0, r6
 80083d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083da:	89ab      	ldrh	r3, [r5, #12]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d907      	bls.n	80083f0 <_fwalk_sglue+0x38>
 80083e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083e4:	3301      	adds	r3, #1
 80083e6:	d003      	beq.n	80083f0 <_fwalk_sglue+0x38>
 80083e8:	4629      	mov	r1, r5
 80083ea:	4638      	mov	r0, r7
 80083ec:	47c0      	blx	r8
 80083ee:	4306      	orrs	r6, r0
 80083f0:	3568      	adds	r5, #104	@ 0x68
 80083f2:	e7e9      	b.n	80083c8 <_fwalk_sglue+0x10>

080083f4 <__sread>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fc:	f000 f86c 	bl	80084d8 <_read_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	bfab      	itete	ge
 8008404:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008406:	89a3      	ldrhlt	r3, [r4, #12]
 8008408:	181b      	addge	r3, r3, r0
 800840a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800840e:	bfac      	ite	ge
 8008410:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008412:	81a3      	strhlt	r3, [r4, #12]
 8008414:	bd10      	pop	{r4, pc}

08008416 <__swrite>:
 8008416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841a:	461f      	mov	r7, r3
 800841c:	898b      	ldrh	r3, [r1, #12]
 800841e:	05db      	lsls	r3, r3, #23
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4616      	mov	r6, r2
 8008426:	d505      	bpl.n	8008434 <__swrite+0x1e>
 8008428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842c:	2302      	movs	r3, #2
 800842e:	2200      	movs	r2, #0
 8008430:	f000 f840 	bl	80084b4 <_lseek_r>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800843a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	4632      	mov	r2, r6
 8008442:	463b      	mov	r3, r7
 8008444:	4628      	mov	r0, r5
 8008446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	f000 b857 	b.w	80084fc <_write_r>

0800844e <__sseek>:
 800844e:	b510      	push	{r4, lr}
 8008450:	460c      	mov	r4, r1
 8008452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008456:	f000 f82d 	bl	80084b4 <_lseek_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	bf15      	itete	ne
 8008460:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800846a:	81a3      	strheq	r3, [r4, #12]
 800846c:	bf18      	it	ne
 800846e:	81a3      	strhne	r3, [r4, #12]
 8008470:	bd10      	pop	{r4, pc}

08008472 <__sclose>:
 8008472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008476:	f000 b80d 	b.w	8008494 <_close_r>

0800847a <memset>:
 800847a:	4402      	add	r2, r0
 800847c:	4603      	mov	r3, r0
 800847e:	4293      	cmp	r3, r2
 8008480:	d100      	bne.n	8008484 <memset+0xa>
 8008482:	4770      	bx	lr
 8008484:	f803 1b01 	strb.w	r1, [r3], #1
 8008488:	e7f9      	b.n	800847e <memset+0x4>
	...

0800848c <_localeconv_r>:
 800848c:	4800      	ldr	r0, [pc, #0]	@ (8008490 <_localeconv_r+0x4>)
 800848e:	4770      	bx	lr
 8008490:	20000158 	.word	0x20000158

08008494 <_close_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d06      	ldr	r5, [pc, #24]	@ (80084b0 <_close_r+0x1c>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	f7f9 f9aa 	bl	80017f8 <_close>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_close_r+0x1a>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_close_r+0x1a>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	200004f4 	.word	0x200004f4

080084b4 <_lseek_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d07      	ldr	r5, [pc, #28]	@ (80084d4 <_lseek_r+0x20>)
 80084b8:	4604      	mov	r4, r0
 80084ba:	4608      	mov	r0, r1
 80084bc:	4611      	mov	r1, r2
 80084be:	2200      	movs	r2, #0
 80084c0:	602a      	str	r2, [r5, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	f7f9 f9bf 	bl	8001846 <_lseek>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	d102      	bne.n	80084d2 <_lseek_r+0x1e>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b103      	cbz	r3, 80084d2 <_lseek_r+0x1e>
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	200004f4 	.word	0x200004f4

080084d8 <_read_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d07      	ldr	r5, [pc, #28]	@ (80084f8 <_read_r+0x20>)
 80084dc:	4604      	mov	r4, r0
 80084de:	4608      	mov	r0, r1
 80084e0:	4611      	mov	r1, r2
 80084e2:	2200      	movs	r2, #0
 80084e4:	602a      	str	r2, [r5, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f7f9 f94d 	bl	8001786 <_read>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d102      	bne.n	80084f6 <_read_r+0x1e>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	b103      	cbz	r3, 80084f6 <_read_r+0x1e>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	200004f4 	.word	0x200004f4

080084fc <_write_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d07      	ldr	r5, [pc, #28]	@ (800851c <_write_r+0x20>)
 8008500:	4604      	mov	r4, r0
 8008502:	4608      	mov	r0, r1
 8008504:	4611      	mov	r1, r2
 8008506:	2200      	movs	r2, #0
 8008508:	602a      	str	r2, [r5, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	f7f9 f958 	bl	80017c0 <_write>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_write_r+0x1e>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	b103      	cbz	r3, 800851a <_write_r+0x1e>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	200004f4 	.word	0x200004f4

08008520 <__errno>:
 8008520:	4b01      	ldr	r3, [pc, #4]	@ (8008528 <__errno+0x8>)
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	20000018 	.word	0x20000018

0800852c <__libc_init_array>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	4d0d      	ldr	r5, [pc, #52]	@ (8008564 <__libc_init_array+0x38>)
 8008530:	4c0d      	ldr	r4, [pc, #52]	@ (8008568 <__libc_init_array+0x3c>)
 8008532:	1b64      	subs	r4, r4, r5
 8008534:	10a4      	asrs	r4, r4, #2
 8008536:	2600      	movs	r6, #0
 8008538:	42a6      	cmp	r6, r4
 800853a:	d109      	bne.n	8008550 <__libc_init_array+0x24>
 800853c:	4d0b      	ldr	r5, [pc, #44]	@ (800856c <__libc_init_array+0x40>)
 800853e:	4c0c      	ldr	r4, [pc, #48]	@ (8008570 <__libc_init_array+0x44>)
 8008540:	f001 febe 	bl	800a2c0 <_init>
 8008544:	1b64      	subs	r4, r4, r5
 8008546:	10a4      	asrs	r4, r4, #2
 8008548:	2600      	movs	r6, #0
 800854a:	42a6      	cmp	r6, r4
 800854c:	d105      	bne.n	800855a <__libc_init_array+0x2e>
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	f855 3b04 	ldr.w	r3, [r5], #4
 8008554:	4798      	blx	r3
 8008556:	3601      	adds	r6, #1
 8008558:	e7ee      	b.n	8008538 <__libc_init_array+0xc>
 800855a:	f855 3b04 	ldr.w	r3, [r5], #4
 800855e:	4798      	blx	r3
 8008560:	3601      	adds	r6, #1
 8008562:	e7f2      	b.n	800854a <__libc_init_array+0x1e>
 8008564:	0800a6a8 	.word	0x0800a6a8
 8008568:	0800a6a8 	.word	0x0800a6a8
 800856c:	0800a6a8 	.word	0x0800a6a8
 8008570:	0800a6ac 	.word	0x0800a6ac

08008574 <__retarget_lock_init_recursive>:
 8008574:	4770      	bx	lr

08008576 <__retarget_lock_acquire_recursive>:
 8008576:	4770      	bx	lr

08008578 <__retarget_lock_release_recursive>:
 8008578:	4770      	bx	lr

0800857a <quorem>:
 800857a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857e:	6903      	ldr	r3, [r0, #16]
 8008580:	690c      	ldr	r4, [r1, #16]
 8008582:	42a3      	cmp	r3, r4
 8008584:	4607      	mov	r7, r0
 8008586:	db7e      	blt.n	8008686 <quorem+0x10c>
 8008588:	3c01      	subs	r4, #1
 800858a:	f101 0814 	add.w	r8, r1, #20
 800858e:	00a3      	lsls	r3, r4, #2
 8008590:	f100 0514 	add.w	r5, r0, #20
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085a4:	3301      	adds	r3, #1
 80085a6:	429a      	cmp	r2, r3
 80085a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80085b0:	d32e      	bcc.n	8008610 <quorem+0x96>
 80085b2:	f04f 0a00 	mov.w	sl, #0
 80085b6:	46c4      	mov	ip, r8
 80085b8:	46ae      	mov	lr, r5
 80085ba:	46d3      	mov	fp, sl
 80085bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085c0:	b298      	uxth	r0, r3
 80085c2:	fb06 a000 	mla	r0, r6, r0, sl
 80085c6:	0c02      	lsrs	r2, r0, #16
 80085c8:	0c1b      	lsrs	r3, r3, #16
 80085ca:	fb06 2303 	mla	r3, r6, r3, r2
 80085ce:	f8de 2000 	ldr.w	r2, [lr]
 80085d2:	b280      	uxth	r0, r0
 80085d4:	b292      	uxth	r2, r2
 80085d6:	1a12      	subs	r2, r2, r0
 80085d8:	445a      	add	r2, fp
 80085da:	f8de 0000 	ldr.w	r0, [lr]
 80085de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80085e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085ec:	b292      	uxth	r2, r2
 80085ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085f2:	45e1      	cmp	r9, ip
 80085f4:	f84e 2b04 	str.w	r2, [lr], #4
 80085f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80085fc:	d2de      	bcs.n	80085bc <quorem+0x42>
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	58eb      	ldr	r3, [r5, r3]
 8008602:	b92b      	cbnz	r3, 8008610 <quorem+0x96>
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	3b04      	subs	r3, #4
 8008608:	429d      	cmp	r5, r3
 800860a:	461a      	mov	r2, r3
 800860c:	d32f      	bcc.n	800866e <quorem+0xf4>
 800860e:	613c      	str	r4, [r7, #16]
 8008610:	4638      	mov	r0, r7
 8008612:	f001 f97b 	bl	800990c <__mcmp>
 8008616:	2800      	cmp	r0, #0
 8008618:	db25      	blt.n	8008666 <quorem+0xec>
 800861a:	4629      	mov	r1, r5
 800861c:	2000      	movs	r0, #0
 800861e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008622:	f8d1 c000 	ldr.w	ip, [r1]
 8008626:	fa1f fe82 	uxth.w	lr, r2
 800862a:	fa1f f38c 	uxth.w	r3, ip
 800862e:	eba3 030e 	sub.w	r3, r3, lr
 8008632:	4403      	add	r3, r0
 8008634:	0c12      	lsrs	r2, r2, #16
 8008636:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800863a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800863e:	b29b      	uxth	r3, r3
 8008640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008644:	45c1      	cmp	r9, r8
 8008646:	f841 3b04 	str.w	r3, [r1], #4
 800864a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800864e:	d2e6      	bcs.n	800861e <quorem+0xa4>
 8008650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008658:	b922      	cbnz	r2, 8008664 <quorem+0xea>
 800865a:	3b04      	subs	r3, #4
 800865c:	429d      	cmp	r5, r3
 800865e:	461a      	mov	r2, r3
 8008660:	d30b      	bcc.n	800867a <quorem+0x100>
 8008662:	613c      	str	r4, [r7, #16]
 8008664:	3601      	adds	r6, #1
 8008666:	4630      	mov	r0, r6
 8008668:	b003      	add	sp, #12
 800866a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	3b04      	subs	r3, #4
 8008672:	2a00      	cmp	r2, #0
 8008674:	d1cb      	bne.n	800860e <quorem+0x94>
 8008676:	3c01      	subs	r4, #1
 8008678:	e7c6      	b.n	8008608 <quorem+0x8e>
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	3b04      	subs	r3, #4
 800867e:	2a00      	cmp	r2, #0
 8008680:	d1ef      	bne.n	8008662 <quorem+0xe8>
 8008682:	3c01      	subs	r4, #1
 8008684:	e7ea      	b.n	800865c <quorem+0xe2>
 8008686:	2000      	movs	r0, #0
 8008688:	e7ee      	b.n	8008668 <quorem+0xee>
 800868a:	0000      	movs	r0, r0
 800868c:	0000      	movs	r0, r0
	...

08008690 <_dtoa_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	69c7      	ldr	r7, [r0, #28]
 8008696:	b099      	sub	sp, #100	@ 0x64
 8008698:	ed8d 0b02 	vstr	d0, [sp, #8]
 800869c:	ec55 4b10 	vmov	r4, r5, d0
 80086a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80086a4:	4683      	mov	fp, r0
 80086a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80086a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086aa:	b97f      	cbnz	r7, 80086cc <_dtoa_r+0x3c>
 80086ac:	2010      	movs	r0, #16
 80086ae:	f000 fdfd 	bl	80092ac <malloc>
 80086b2:	4602      	mov	r2, r0
 80086b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80086b8:	b920      	cbnz	r0, 80086c4 <_dtoa_r+0x34>
 80086ba:	4ba7      	ldr	r3, [pc, #668]	@ (8008958 <_dtoa_r+0x2c8>)
 80086bc:	21ef      	movs	r1, #239	@ 0xef
 80086be:	48a7      	ldr	r0, [pc, #668]	@ (800895c <_dtoa_r+0x2cc>)
 80086c0:	f001 faf6 	bl	8009cb0 <__assert_func>
 80086c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086c8:	6007      	str	r7, [r0, #0]
 80086ca:	60c7      	str	r7, [r0, #12]
 80086cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086d0:	6819      	ldr	r1, [r3, #0]
 80086d2:	b159      	cbz	r1, 80086ec <_dtoa_r+0x5c>
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	604a      	str	r2, [r1, #4]
 80086d8:	2301      	movs	r3, #1
 80086da:	4093      	lsls	r3, r2
 80086dc:	608b      	str	r3, [r1, #8]
 80086de:	4658      	mov	r0, fp
 80086e0:	f000 feda 	bl	8009498 <_Bfree>
 80086e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	1e2b      	subs	r3, r5, #0
 80086ee:	bfb9      	ittee	lt
 80086f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086f4:	9303      	strlt	r3, [sp, #12]
 80086f6:	2300      	movge	r3, #0
 80086f8:	6033      	strge	r3, [r6, #0]
 80086fa:	9f03      	ldr	r7, [sp, #12]
 80086fc:	4b98      	ldr	r3, [pc, #608]	@ (8008960 <_dtoa_r+0x2d0>)
 80086fe:	bfbc      	itt	lt
 8008700:	2201      	movlt	r2, #1
 8008702:	6032      	strlt	r2, [r6, #0]
 8008704:	43bb      	bics	r3, r7
 8008706:	d112      	bne.n	800872e <_dtoa_r+0x9e>
 8008708:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800870a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008714:	4323      	orrs	r3, r4
 8008716:	f000 854d 	beq.w	80091b4 <_dtoa_r+0xb24>
 800871a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800871c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008974 <_dtoa_r+0x2e4>
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 854f 	beq.w	80091c4 <_dtoa_r+0xb34>
 8008726:	f10a 0303 	add.w	r3, sl, #3
 800872a:	f000 bd49 	b.w	80091c0 <_dtoa_r+0xb30>
 800872e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	ec51 0b17 	vmov	r0, r1, d7
 8008738:	2300      	movs	r3, #0
 800873a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800873e:	f7f8 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008742:	4680      	mov	r8, r0
 8008744:	b158      	cbz	r0, 800875e <_dtoa_r+0xce>
 8008746:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008748:	2301      	movs	r3, #1
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800874e:	b113      	cbz	r3, 8008756 <_dtoa_r+0xc6>
 8008750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008752:	4b84      	ldr	r3, [pc, #528]	@ (8008964 <_dtoa_r+0x2d4>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008978 <_dtoa_r+0x2e8>
 800875a:	f000 bd33 	b.w	80091c4 <_dtoa_r+0xb34>
 800875e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008762:	aa16      	add	r2, sp, #88	@ 0x58
 8008764:	a917      	add	r1, sp, #92	@ 0x5c
 8008766:	4658      	mov	r0, fp
 8008768:	f001 f980 	bl	8009a6c <__d2b>
 800876c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008770:	4681      	mov	r9, r0
 8008772:	2e00      	cmp	r6, #0
 8008774:	d077      	beq.n	8008866 <_dtoa_r+0x1d6>
 8008776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008778:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800877c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800878c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008790:	4619      	mov	r1, r3
 8008792:	2200      	movs	r2, #0
 8008794:	4b74      	ldr	r3, [pc, #464]	@ (8008968 <_dtoa_r+0x2d8>)
 8008796:	f7f7 fd77 	bl	8000288 <__aeabi_dsub>
 800879a:	a369      	add	r3, pc, #420	@ (adr r3, 8008940 <_dtoa_r+0x2b0>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	a368      	add	r3, pc, #416	@ (adr r3, 8008948 <_dtoa_r+0x2b8>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 fd6f 	bl	800028c <__adddf3>
 80087ae:	4604      	mov	r4, r0
 80087b0:	4630      	mov	r0, r6
 80087b2:	460d      	mov	r5, r1
 80087b4:	f7f7 feb6 	bl	8000524 <__aeabi_i2d>
 80087b8:	a365      	add	r3, pc, #404	@ (adr r3, 8008950 <_dtoa_r+0x2c0>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 ff1b 	bl	80005f8 <__aeabi_dmul>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f7 fd5f 	bl	800028c <__adddf3>
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	f7f8 f9c1 	bl	8000b58 <__aeabi_d2iz>
 80087d6:	2200      	movs	r2, #0
 80087d8:	4607      	mov	r7, r0
 80087da:	2300      	movs	r3, #0
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	f7f8 f97c 	bl	8000adc <__aeabi_dcmplt>
 80087e4:	b140      	cbz	r0, 80087f8 <_dtoa_r+0x168>
 80087e6:	4638      	mov	r0, r7
 80087e8:	f7f7 fe9c 	bl	8000524 <__aeabi_i2d>
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	f7f8 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80087f4:	b900      	cbnz	r0, 80087f8 <_dtoa_r+0x168>
 80087f6:	3f01      	subs	r7, #1
 80087f8:	2f16      	cmp	r7, #22
 80087fa:	d851      	bhi.n	80088a0 <_dtoa_r+0x210>
 80087fc:	4b5b      	ldr	r3, [pc, #364]	@ (800896c <_dtoa_r+0x2dc>)
 80087fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800880a:	f7f8 f967 	bl	8000adc <__aeabi_dcmplt>
 800880e:	2800      	cmp	r0, #0
 8008810:	d048      	beq.n	80088a4 <_dtoa_r+0x214>
 8008812:	3f01      	subs	r7, #1
 8008814:	2300      	movs	r3, #0
 8008816:	9312      	str	r3, [sp, #72]	@ 0x48
 8008818:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800881a:	1b9b      	subs	r3, r3, r6
 800881c:	1e5a      	subs	r2, r3, #1
 800881e:	bf44      	itt	mi
 8008820:	f1c3 0801 	rsbmi	r8, r3, #1
 8008824:	2300      	movmi	r3, #0
 8008826:	9208      	str	r2, [sp, #32]
 8008828:	bf54      	ite	pl
 800882a:	f04f 0800 	movpl.w	r8, #0
 800882e:	9308      	strmi	r3, [sp, #32]
 8008830:	2f00      	cmp	r7, #0
 8008832:	db39      	blt.n	80088a8 <_dtoa_r+0x218>
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008838:	443b      	add	r3, r7
 800883a:	9308      	str	r3, [sp, #32]
 800883c:	2300      	movs	r3, #0
 800883e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008842:	2b09      	cmp	r3, #9
 8008844:	d864      	bhi.n	8008910 <_dtoa_r+0x280>
 8008846:	2b05      	cmp	r3, #5
 8008848:	bfc4      	itt	gt
 800884a:	3b04      	subgt	r3, #4
 800884c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800884e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008850:	f1a3 0302 	sub.w	r3, r3, #2
 8008854:	bfcc      	ite	gt
 8008856:	2400      	movgt	r4, #0
 8008858:	2401      	movle	r4, #1
 800885a:	2b03      	cmp	r3, #3
 800885c:	d863      	bhi.n	8008926 <_dtoa_r+0x296>
 800885e:	e8df f003 	tbb	[pc, r3]
 8008862:	372a      	.short	0x372a
 8008864:	5535      	.short	0x5535
 8008866:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800886a:	441e      	add	r6, r3
 800886c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008870:	2b20      	cmp	r3, #32
 8008872:	bfc1      	itttt	gt
 8008874:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008878:	409f      	lslgt	r7, r3
 800887a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800887e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008882:	bfd6      	itet	le
 8008884:	f1c3 0320 	rsble	r3, r3, #32
 8008888:	ea47 0003 	orrgt.w	r0, r7, r3
 800888c:	fa04 f003 	lslle.w	r0, r4, r3
 8008890:	f7f7 fe38 	bl	8000504 <__aeabi_ui2d>
 8008894:	2201      	movs	r2, #1
 8008896:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800889a:	3e01      	subs	r6, #1
 800889c:	9214      	str	r2, [sp, #80]	@ 0x50
 800889e:	e777      	b.n	8008790 <_dtoa_r+0x100>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e7b8      	b.n	8008816 <_dtoa_r+0x186>
 80088a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80088a6:	e7b7      	b.n	8008818 <_dtoa_r+0x188>
 80088a8:	427b      	negs	r3, r7
 80088aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ac:	2300      	movs	r3, #0
 80088ae:	eba8 0807 	sub.w	r8, r8, r7
 80088b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088b4:	e7c4      	b.n	8008840 <_dtoa_r+0x1b0>
 80088b6:	2300      	movs	r3, #0
 80088b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dc35      	bgt.n	800892c <_dtoa_r+0x29c>
 80088c0:	2301      	movs	r3, #1
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	9307      	str	r3, [sp, #28]
 80088c6:	461a      	mov	r2, r3
 80088c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80088ca:	e00b      	b.n	80088e4 <_dtoa_r+0x254>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e7f3      	b.n	80088b8 <_dtoa_r+0x228>
 80088d0:	2300      	movs	r3, #0
 80088d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088d6:	18fb      	adds	r3, r7, r3
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	3301      	adds	r3, #1
 80088dc:	2b01      	cmp	r3, #1
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	bfb8      	it	lt
 80088e2:	2301      	movlt	r3, #1
 80088e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80088e8:	2100      	movs	r1, #0
 80088ea:	2204      	movs	r2, #4
 80088ec:	f102 0514 	add.w	r5, r2, #20
 80088f0:	429d      	cmp	r5, r3
 80088f2:	d91f      	bls.n	8008934 <_dtoa_r+0x2a4>
 80088f4:	6041      	str	r1, [r0, #4]
 80088f6:	4658      	mov	r0, fp
 80088f8:	f000 fd8e 	bl	8009418 <_Balloc>
 80088fc:	4682      	mov	sl, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d13c      	bne.n	800897c <_dtoa_r+0x2ec>
 8008902:	4b1b      	ldr	r3, [pc, #108]	@ (8008970 <_dtoa_r+0x2e0>)
 8008904:	4602      	mov	r2, r0
 8008906:	f240 11af 	movw	r1, #431	@ 0x1af
 800890a:	e6d8      	b.n	80086be <_dtoa_r+0x2e>
 800890c:	2301      	movs	r3, #1
 800890e:	e7e0      	b.n	80088d2 <_dtoa_r+0x242>
 8008910:	2401      	movs	r4, #1
 8008912:	2300      	movs	r3, #0
 8008914:	9309      	str	r3, [sp, #36]	@ 0x24
 8008916:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008918:	f04f 33ff 	mov.w	r3, #4294967295
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	2200      	movs	r2, #0
 8008922:	2312      	movs	r3, #18
 8008924:	e7d0      	b.n	80088c8 <_dtoa_r+0x238>
 8008926:	2301      	movs	r3, #1
 8008928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800892a:	e7f5      	b.n	8008918 <_dtoa_r+0x288>
 800892c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	e7d7      	b.n	80088e4 <_dtoa_r+0x254>
 8008934:	3101      	adds	r1, #1
 8008936:	0052      	lsls	r2, r2, #1
 8008938:	e7d8      	b.n	80088ec <_dtoa_r+0x25c>
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w
 8008940:	636f4361 	.word	0x636f4361
 8008944:	3fd287a7 	.word	0x3fd287a7
 8008948:	8b60c8b3 	.word	0x8b60c8b3
 800894c:	3fc68a28 	.word	0x3fc68a28
 8008950:	509f79fb 	.word	0x509f79fb
 8008954:	3fd34413 	.word	0x3fd34413
 8008958:	0800a36d 	.word	0x0800a36d
 800895c:	0800a384 	.word	0x0800a384
 8008960:	7ff00000 	.word	0x7ff00000
 8008964:	0800a33d 	.word	0x0800a33d
 8008968:	3ff80000 	.word	0x3ff80000
 800896c:	0800a480 	.word	0x0800a480
 8008970:	0800a3dc 	.word	0x0800a3dc
 8008974:	0800a369 	.word	0x0800a369
 8008978:	0800a33c 	.word	0x0800a33c
 800897c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008980:	6018      	str	r0, [r3, #0]
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	2b0e      	cmp	r3, #14
 8008986:	f200 80a4 	bhi.w	8008ad2 <_dtoa_r+0x442>
 800898a:	2c00      	cmp	r4, #0
 800898c:	f000 80a1 	beq.w	8008ad2 <_dtoa_r+0x442>
 8008990:	2f00      	cmp	r7, #0
 8008992:	dd33      	ble.n	80089fc <_dtoa_r+0x36c>
 8008994:	4bad      	ldr	r3, [pc, #692]	@ (8008c4c <_dtoa_r+0x5bc>)
 8008996:	f007 020f 	and.w	r2, r7, #15
 800899a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800899e:	ed93 7b00 	vldr	d7, [r3]
 80089a2:	05f8      	lsls	r0, r7, #23
 80089a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089ac:	d516      	bpl.n	80089dc <_dtoa_r+0x34c>
 80089ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008c50 <_dtoa_r+0x5c0>)
 80089b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089b8:	f7f7 ff48 	bl	800084c <__aeabi_ddiv>
 80089bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c0:	f004 040f 	and.w	r4, r4, #15
 80089c4:	2603      	movs	r6, #3
 80089c6:	4da2      	ldr	r5, [pc, #648]	@ (8008c50 <_dtoa_r+0x5c0>)
 80089c8:	b954      	cbnz	r4, 80089e0 <_dtoa_r+0x350>
 80089ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d2:	f7f7 ff3b 	bl	800084c <__aeabi_ddiv>
 80089d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089da:	e028      	b.n	8008a2e <_dtoa_r+0x39e>
 80089dc:	2602      	movs	r6, #2
 80089de:	e7f2      	b.n	80089c6 <_dtoa_r+0x336>
 80089e0:	07e1      	lsls	r1, r4, #31
 80089e2:	d508      	bpl.n	80089f6 <_dtoa_r+0x366>
 80089e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089f4:	3601      	adds	r6, #1
 80089f6:	1064      	asrs	r4, r4, #1
 80089f8:	3508      	adds	r5, #8
 80089fa:	e7e5      	b.n	80089c8 <_dtoa_r+0x338>
 80089fc:	f000 80d2 	beq.w	8008ba4 <_dtoa_r+0x514>
 8008a00:	427c      	negs	r4, r7
 8008a02:	4b92      	ldr	r3, [pc, #584]	@ (8008c4c <_dtoa_r+0x5bc>)
 8008a04:	4d92      	ldr	r5, [pc, #584]	@ (8008c50 <_dtoa_r+0x5c0>)
 8008a06:	f004 020f 	and.w	r2, r4, #15
 8008a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a1e:	1124      	asrs	r4, r4, #4
 8008a20:	2300      	movs	r3, #0
 8008a22:	2602      	movs	r6, #2
 8008a24:	2c00      	cmp	r4, #0
 8008a26:	f040 80b2 	bne.w	8008b8e <_dtoa_r+0x4fe>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1d3      	bne.n	80089d6 <_dtoa_r+0x346>
 8008a2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80b7 	beq.w	8008ba8 <_dtoa_r+0x518>
 8008a3a:	4b86      	ldr	r3, [pc, #536]	@ (8008c54 <_dtoa_r+0x5c4>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7f8 f84b 	bl	8000adc <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f000 80ae 	beq.w	8008ba8 <_dtoa_r+0x518>
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80aa 	beq.w	8008ba8 <_dtoa_r+0x518>
 8008a54:	9b00      	ldr	r3, [sp, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dd37      	ble.n	8008aca <_dtoa_r+0x43a>
 8008a5a:	1e7b      	subs	r3, r7, #1
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4b7d      	ldr	r3, [pc, #500]	@ (8008c58 <_dtoa_r+0x5c8>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7f7 fdc7 	bl	80005f8 <__aeabi_dmul>
 8008a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a6e:	9c00      	ldr	r4, [sp, #0]
 8008a70:	3601      	adds	r6, #1
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7f7 fd56 	bl	8000524 <__aeabi_i2d>
 8008a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4b76      	ldr	r3, [pc, #472]	@ (8008c5c <_dtoa_r+0x5cc>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	f7f7 fc02 	bl	800028c <__adddf3>
 8008a88:	4605      	mov	r5, r0
 8008a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a8e:	2c00      	cmp	r4, #0
 8008a90:	f040 808d 	bne.w	8008bae <_dtoa_r+0x51e>
 8008a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a98:	4b71      	ldr	r3, [pc, #452]	@ (8008c60 <_dtoa_r+0x5d0>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f7f7 fbf4 	bl	8000288 <__aeabi_dsub>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	4633      	mov	r3, r6
 8008aac:	f7f8 f834 	bl	8000b18 <__aeabi_dcmpgt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f040 828b 	bne.w	8008fcc <_dtoa_r+0x93c>
 8008ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aba:	462a      	mov	r2, r5
 8008abc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ac0:	f7f8 f80c 	bl	8000adc <__aeabi_dcmplt>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f040 8128 	bne.w	8008d1a <_dtoa_r+0x68a>
 8008aca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f2c0 815a 	blt.w	8008d8e <_dtoa_r+0x6fe>
 8008ada:	2f0e      	cmp	r7, #14
 8008adc:	f300 8157 	bgt.w	8008d8e <_dtoa_r+0x6fe>
 8008ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8008c4c <_dtoa_r+0x5bc>)
 8008ae2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ae6:	ed93 7b00 	vldr	d7, [r3]
 8008aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	ed8d 7b00 	vstr	d7, [sp]
 8008af2:	da03      	bge.n	8008afc <_dtoa_r+0x46c>
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f340 8101 	ble.w	8008cfe <_dtoa_r+0x66e>
 8008afc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b00:	4656      	mov	r6, sl
 8008b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fe9f 	bl	800084c <__aeabi_ddiv>
 8008b0e:	f7f8 f823 	bl	8000b58 <__aeabi_d2iz>
 8008b12:	4680      	mov	r8, r0
 8008b14:	f7f7 fd06 	bl	8000524 <__aeabi_i2d>
 8008b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b1c:	f7f7 fd6c 	bl	80005f8 <__aeabi_dmul>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4620      	mov	r0, r4
 8008b26:	4629      	mov	r1, r5
 8008b28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b2c:	f7f7 fbac 	bl	8000288 <__aeabi_dsub>
 8008b30:	f806 4b01 	strb.w	r4, [r6], #1
 8008b34:	9d07      	ldr	r5, [sp, #28]
 8008b36:	eba6 040a 	sub.w	r4, r6, sl
 8008b3a:	42a5      	cmp	r5, r4
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	f040 8117 	bne.w	8008d72 <_dtoa_r+0x6e2>
 8008b44:	f7f7 fba2 	bl	800028c <__adddf3>
 8008b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	460d      	mov	r5, r1
 8008b50:	f7f7 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f040 80f9 	bne.w	8008d4c <_dtoa_r+0x6bc>
 8008b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b66:	b118      	cbz	r0, 8008b70 <_dtoa_r+0x4e0>
 8008b68:	f018 0f01 	tst.w	r8, #1
 8008b6c:	f040 80ee 	bne.w	8008d4c <_dtoa_r+0x6bc>
 8008b70:	4649      	mov	r1, r9
 8008b72:	4658      	mov	r0, fp
 8008b74:	f000 fc90 	bl	8009498 <_Bfree>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	7033      	strb	r3, [r6, #0]
 8008b7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b7e:	3701      	adds	r7, #1
 8008b80:	601f      	str	r7, [r3, #0]
 8008b82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 831d 	beq.w	80091c4 <_dtoa_r+0xb34>
 8008b8a:	601e      	str	r6, [r3, #0]
 8008b8c:	e31a      	b.n	80091c4 <_dtoa_r+0xb34>
 8008b8e:	07e2      	lsls	r2, r4, #31
 8008b90:	d505      	bpl.n	8008b9e <_dtoa_r+0x50e>
 8008b92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b96:	f7f7 fd2f 	bl	80005f8 <__aeabi_dmul>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	1064      	asrs	r4, r4, #1
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	e73f      	b.n	8008a24 <_dtoa_r+0x394>
 8008ba4:	2602      	movs	r6, #2
 8008ba6:	e742      	b.n	8008a2e <_dtoa_r+0x39e>
 8008ba8:	9c07      	ldr	r4, [sp, #28]
 8008baa:	9704      	str	r7, [sp, #16]
 8008bac:	e761      	b.n	8008a72 <_dtoa_r+0x3e2>
 8008bae:	4b27      	ldr	r3, [pc, #156]	@ (8008c4c <_dtoa_r+0x5bc>)
 8008bb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bba:	4454      	add	r4, sl
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	d053      	beq.n	8008c68 <_dtoa_r+0x5d8>
 8008bc0:	4928      	ldr	r1, [pc, #160]	@ (8008c64 <_dtoa_r+0x5d4>)
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	f7f7 fe42 	bl	800084c <__aeabi_ddiv>
 8008bc8:	4633      	mov	r3, r6
 8008bca:	462a      	mov	r2, r5
 8008bcc:	f7f7 fb5c 	bl	8000288 <__aeabi_dsub>
 8008bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bd4:	4656      	mov	r6, sl
 8008bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bda:	f7f7 ffbd 	bl	8000b58 <__aeabi_d2iz>
 8008bde:	4605      	mov	r5, r0
 8008be0:	f7f7 fca0 	bl	8000524 <__aeabi_i2d>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bec:	f7f7 fb4c 	bl	8000288 <__aeabi_dsub>
 8008bf0:	3530      	adds	r5, #48	@ 0x30
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bfa:	f806 5b01 	strb.w	r5, [r6], #1
 8008bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c02:	f7f7 ff6b 	bl	8000adc <__aeabi_dcmplt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d171      	bne.n	8008cee <_dtoa_r+0x65e>
 8008c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c0e:	4911      	ldr	r1, [pc, #68]	@ (8008c54 <_dtoa_r+0x5c4>)
 8008c10:	2000      	movs	r0, #0
 8008c12:	f7f7 fb39 	bl	8000288 <__aeabi_dsub>
 8008c16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c1a:	f7f7 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f040 8095 	bne.w	8008d4e <_dtoa_r+0x6be>
 8008c24:	42a6      	cmp	r6, r4
 8008c26:	f43f af50 	beq.w	8008aca <_dtoa_r+0x43a>
 8008c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c58 <_dtoa_r+0x5c8>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <_dtoa_r+0x5c8>)
 8008c38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c42:	f7f7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8008c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4a:	e7c4      	b.n	8008bd6 <_dtoa_r+0x546>
 8008c4c:	0800a480 	.word	0x0800a480
 8008c50:	0800a458 	.word	0x0800a458
 8008c54:	3ff00000 	.word	0x3ff00000
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	401c0000 	.word	0x401c0000
 8008c60:	40140000 	.word	0x40140000
 8008c64:	3fe00000 	.word	0x3fe00000
 8008c68:	4631      	mov	r1, r6
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7f7 fcc4 	bl	80005f8 <__aeabi_dmul>
 8008c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c74:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c76:	4656      	mov	r6, sl
 8008c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c7c:	f7f7 ff6c 	bl	8000b58 <__aeabi_d2iz>
 8008c80:	4605      	mov	r5, r0
 8008c82:	f7f7 fc4f 	bl	8000524 <__aeabi_i2d>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c8e:	f7f7 fafb 	bl	8000288 <__aeabi_dsub>
 8008c92:	3530      	adds	r5, #48	@ 0x30
 8008c94:	f806 5b01 	strb.w	r5, [r6], #1
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	42a6      	cmp	r6, r4
 8008c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	d124      	bne.n	8008cf2 <_dtoa_r+0x662>
 8008ca8:	4bac      	ldr	r3, [pc, #688]	@ (8008f5c <_dtoa_r+0x8cc>)
 8008caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cae:	f7f7 faed 	bl	800028c <__adddf3>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cba:	f7f7 ff2d 	bl	8000b18 <__aeabi_dcmpgt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d145      	bne.n	8008d4e <_dtoa_r+0x6be>
 8008cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cc6:	49a5      	ldr	r1, [pc, #660]	@ (8008f5c <_dtoa_r+0x8cc>)
 8008cc8:	2000      	movs	r0, #0
 8008cca:	f7f7 fadd 	bl	8000288 <__aeabi_dsub>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd6:	f7f7 ff01 	bl	8000adc <__aeabi_dcmplt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f43f aef5 	beq.w	8008aca <_dtoa_r+0x43a>
 8008ce0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008ce2:	1e73      	subs	r3, r6, #1
 8008ce4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ce6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cea:	2b30      	cmp	r3, #48	@ 0x30
 8008cec:	d0f8      	beq.n	8008ce0 <_dtoa_r+0x650>
 8008cee:	9f04      	ldr	r7, [sp, #16]
 8008cf0:	e73e      	b.n	8008b70 <_dtoa_r+0x4e0>
 8008cf2:	4b9b      	ldr	r3, [pc, #620]	@ (8008f60 <_dtoa_r+0x8d0>)
 8008cf4:	f7f7 fc80 	bl	80005f8 <__aeabi_dmul>
 8008cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cfc:	e7bc      	b.n	8008c78 <_dtoa_r+0x5e8>
 8008cfe:	d10c      	bne.n	8008d1a <_dtoa_r+0x68a>
 8008d00:	4b98      	ldr	r3, [pc, #608]	@ (8008f64 <_dtoa_r+0x8d4>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d08:	f7f7 fc76 	bl	80005f8 <__aeabi_dmul>
 8008d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d10:	f7f7 fef8 	bl	8000b04 <__aeabi_dcmpge>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f000 8157 	beq.w	8008fc8 <_dtoa_r+0x938>
 8008d1a:	2400      	movs	r4, #0
 8008d1c:	4625      	mov	r5, r4
 8008d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d20:	43db      	mvns	r3, r3
 8008d22:	9304      	str	r3, [sp, #16]
 8008d24:	4656      	mov	r6, sl
 8008d26:	2700      	movs	r7, #0
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4658      	mov	r0, fp
 8008d2c:	f000 fbb4 	bl	8009498 <_Bfree>
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	d0dc      	beq.n	8008cee <_dtoa_r+0x65e>
 8008d34:	b12f      	cbz	r7, 8008d42 <_dtoa_r+0x6b2>
 8008d36:	42af      	cmp	r7, r5
 8008d38:	d003      	beq.n	8008d42 <_dtoa_r+0x6b2>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	f000 fbab 	bl	8009498 <_Bfree>
 8008d42:	4629      	mov	r1, r5
 8008d44:	4658      	mov	r0, fp
 8008d46:	f000 fba7 	bl	8009498 <_Bfree>
 8008d4a:	e7d0      	b.n	8008cee <_dtoa_r+0x65e>
 8008d4c:	9704      	str	r7, [sp, #16]
 8008d4e:	4633      	mov	r3, r6
 8008d50:	461e      	mov	r6, r3
 8008d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d56:	2a39      	cmp	r2, #57	@ 0x39
 8008d58:	d107      	bne.n	8008d6a <_dtoa_r+0x6da>
 8008d5a:	459a      	cmp	sl, r3
 8008d5c:	d1f8      	bne.n	8008d50 <_dtoa_r+0x6c0>
 8008d5e:	9a04      	ldr	r2, [sp, #16]
 8008d60:	3201      	adds	r2, #1
 8008d62:	9204      	str	r2, [sp, #16]
 8008d64:	2230      	movs	r2, #48	@ 0x30
 8008d66:	f88a 2000 	strb.w	r2, [sl]
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e7bd      	b.n	8008cee <_dtoa_r+0x65e>
 8008d72:	4b7b      	ldr	r3, [pc, #492]	@ (8008f60 <_dtoa_r+0x8d0>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	460d      	mov	r5, r1
 8008d82:	f7f7 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f43f aebb 	beq.w	8008b02 <_dtoa_r+0x472>
 8008d8c:	e6f0      	b.n	8008b70 <_dtoa_r+0x4e0>
 8008d8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	f000 80db 	beq.w	8008f4c <_dtoa_r+0x8bc>
 8008d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d98:	2a01      	cmp	r2, #1
 8008d9a:	f300 80bf 	bgt.w	8008f1c <_dtoa_r+0x88c>
 8008d9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	f000 80b7 	beq.w	8008f14 <_dtoa_r+0x884>
 8008da6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008daa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008dac:	4646      	mov	r6, r8
 8008dae:	9a08      	ldr	r2, [sp, #32]
 8008db0:	2101      	movs	r1, #1
 8008db2:	441a      	add	r2, r3
 8008db4:	4658      	mov	r0, fp
 8008db6:	4498      	add	r8, r3
 8008db8:	9208      	str	r2, [sp, #32]
 8008dba:	f000 fc21 	bl	8009600 <__i2b>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	b15e      	cbz	r6, 8008dda <_dtoa_r+0x74a>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dd08      	ble.n	8008dda <_dtoa_r+0x74a>
 8008dc8:	42b3      	cmp	r3, r6
 8008dca:	9a08      	ldr	r2, [sp, #32]
 8008dcc:	bfa8      	it	ge
 8008dce:	4633      	movge	r3, r6
 8008dd0:	eba8 0803 	sub.w	r8, r8, r3
 8008dd4:	1af6      	subs	r6, r6, r3
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	9308      	str	r3, [sp, #32]
 8008dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ddc:	b1f3      	cbz	r3, 8008e1c <_dtoa_r+0x78c>
 8008dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80b7 	beq.w	8008f54 <_dtoa_r+0x8c4>
 8008de6:	b18c      	cbz	r4, 8008e0c <_dtoa_r+0x77c>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4622      	mov	r2, r4
 8008dec:	4658      	mov	r0, fp
 8008dee:	f000 fcc7 	bl	8009780 <__pow5mult>
 8008df2:	464a      	mov	r2, r9
 8008df4:	4601      	mov	r1, r0
 8008df6:	4605      	mov	r5, r0
 8008df8:	4658      	mov	r0, fp
 8008dfa:	f000 fc17 	bl	800962c <__multiply>
 8008dfe:	4649      	mov	r1, r9
 8008e00:	9004      	str	r0, [sp, #16]
 8008e02:	4658      	mov	r0, fp
 8008e04:	f000 fb48 	bl	8009498 <_Bfree>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	4699      	mov	r9, r3
 8008e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e0e:	1b1a      	subs	r2, r3, r4
 8008e10:	d004      	beq.n	8008e1c <_dtoa_r+0x78c>
 8008e12:	4649      	mov	r1, r9
 8008e14:	4658      	mov	r0, fp
 8008e16:	f000 fcb3 	bl	8009780 <__pow5mult>
 8008e1a:	4681      	mov	r9, r0
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	4658      	mov	r0, fp
 8008e20:	f000 fbee 	bl	8009600 <__i2b>
 8008e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e26:	4604      	mov	r4, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 81cf 	beq.w	80091cc <_dtoa_r+0xb3c>
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4601      	mov	r1, r0
 8008e32:	4658      	mov	r0, fp
 8008e34:	f000 fca4 	bl	8009780 <__pow5mult>
 8008e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	f300 8095 	bgt.w	8008f6c <_dtoa_r+0x8dc>
 8008e42:	9b02      	ldr	r3, [sp, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 8087 	bne.w	8008f58 <_dtoa_r+0x8c8>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f040 8089 	bne.w	8008f68 <_dtoa_r+0x8d8>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e5c:	0d1b      	lsrs	r3, r3, #20
 8008e5e:	051b      	lsls	r3, r3, #20
 8008e60:	b12b      	cbz	r3, 8008e6e <_dtoa_r+0x7de>
 8008e62:	9b08      	ldr	r3, [sp, #32]
 8008e64:	3301      	adds	r3, #1
 8008e66:	9308      	str	r3, [sp, #32]
 8008e68:	f108 0801 	add.w	r8, r8, #1
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 81b0 	beq.w	80091d8 <_dtoa_r+0xb48>
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e7e:	6918      	ldr	r0, [r3, #16]
 8008e80:	f000 fb72 	bl	8009568 <__hi0bits>
 8008e84:	f1c0 0020 	rsb	r0, r0, #32
 8008e88:	9b08      	ldr	r3, [sp, #32]
 8008e8a:	4418      	add	r0, r3
 8008e8c:	f010 001f 	ands.w	r0, r0, #31
 8008e90:	d077      	beq.n	8008f82 <_dtoa_r+0x8f2>
 8008e92:	f1c0 0320 	rsb	r3, r0, #32
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	dd6b      	ble.n	8008f72 <_dtoa_r+0x8e2>
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	f1c0 001c 	rsb	r0, r0, #28
 8008ea0:	4403      	add	r3, r0
 8008ea2:	4480      	add	r8, r0
 8008ea4:	4406      	add	r6, r0
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	f1b8 0f00 	cmp.w	r8, #0
 8008eac:	dd05      	ble.n	8008eba <_dtoa_r+0x82a>
 8008eae:	4649      	mov	r1, r9
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	4658      	mov	r0, fp
 8008eb4:	f000 fcbe 	bl	8009834 <__lshift>
 8008eb8:	4681      	mov	r9, r0
 8008eba:	9b08      	ldr	r3, [sp, #32]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dd05      	ble.n	8008ecc <_dtoa_r+0x83c>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	f000 fcb5 	bl	8009834 <__lshift>
 8008eca:	4604      	mov	r4, r0
 8008ecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d059      	beq.n	8008f86 <_dtoa_r+0x8f6>
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 fd19 	bl	800990c <__mcmp>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	da53      	bge.n	8008f86 <_dtoa_r+0x8f6>
 8008ede:	1e7b      	subs	r3, r7, #1
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	220a      	movs	r2, #10
 8008ee8:	4658      	mov	r0, fp
 8008eea:	f000 faf7 	bl	80094dc <__multadd>
 8008eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8172 	beq.w	80091dc <_dtoa_r+0xb4c>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4629      	mov	r1, r5
 8008efc:	220a      	movs	r2, #10
 8008efe:	4658      	mov	r0, fp
 8008f00:	f000 faec 	bl	80094dc <__multadd>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	4605      	mov	r5, r0
 8008f0a:	dc67      	bgt.n	8008fdc <_dtoa_r+0x94c>
 8008f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	dc41      	bgt.n	8008f96 <_dtoa_r+0x906>
 8008f12:	e063      	b.n	8008fdc <_dtoa_r+0x94c>
 8008f14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f1a:	e746      	b.n	8008daa <_dtoa_r+0x71a>
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	1e5c      	subs	r4, r3, #1
 8008f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f22:	42a3      	cmp	r3, r4
 8008f24:	bfbf      	itttt	lt
 8008f26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f2c:	1ae3      	sublt	r3, r4, r3
 8008f2e:	bfb4      	ite	lt
 8008f30:	18d2      	addlt	r2, r2, r3
 8008f32:	1b1c      	subge	r4, r3, r4
 8008f34:	9b07      	ldr	r3, [sp, #28]
 8008f36:	bfbc      	itt	lt
 8008f38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f3a:	2400      	movlt	r4, #0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bfb5      	itete	lt
 8008f40:	eba8 0603 	sublt.w	r6, r8, r3
 8008f44:	9b07      	ldrge	r3, [sp, #28]
 8008f46:	2300      	movlt	r3, #0
 8008f48:	4646      	movge	r6, r8
 8008f4a:	e730      	b.n	8008dae <_dtoa_r+0x71e>
 8008f4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f50:	4646      	mov	r6, r8
 8008f52:	e735      	b.n	8008dc0 <_dtoa_r+0x730>
 8008f54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f56:	e75c      	b.n	8008e12 <_dtoa_r+0x782>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e788      	b.n	8008e6e <_dtoa_r+0x7de>
 8008f5c:	3fe00000 	.word	0x3fe00000
 8008f60:	40240000 	.word	0x40240000
 8008f64:	40140000 	.word	0x40140000
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	e780      	b.n	8008e6e <_dtoa_r+0x7de>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f70:	e782      	b.n	8008e78 <_dtoa_r+0x7e8>
 8008f72:	d099      	beq.n	8008ea8 <_dtoa_r+0x818>
 8008f74:	9a08      	ldr	r2, [sp, #32]
 8008f76:	331c      	adds	r3, #28
 8008f78:	441a      	add	r2, r3
 8008f7a:	4498      	add	r8, r3
 8008f7c:	441e      	add	r6, r3
 8008f7e:	9208      	str	r2, [sp, #32]
 8008f80:	e792      	b.n	8008ea8 <_dtoa_r+0x818>
 8008f82:	4603      	mov	r3, r0
 8008f84:	e7f6      	b.n	8008f74 <_dtoa_r+0x8e4>
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	9704      	str	r7, [sp, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dc20      	bgt.n	8008fd0 <_dtoa_r+0x940>
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	dd1e      	ble.n	8008fd4 <_dtoa_r+0x944>
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f aec0 	bne.w	8008d1e <_dtoa_r+0x68e>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	2205      	movs	r2, #5
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fa9a 	bl	80094dc <__multadd>
 8008fa8:	4601      	mov	r1, r0
 8008faa:	4604      	mov	r4, r0
 8008fac:	4648      	mov	r0, r9
 8008fae:	f000 fcad 	bl	800990c <__mcmp>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f77f aeb3 	ble.w	8008d1e <_dtoa_r+0x68e>
 8008fb8:	4656      	mov	r6, sl
 8008fba:	2331      	movs	r3, #49	@ 0x31
 8008fbc:	f806 3b01 	strb.w	r3, [r6], #1
 8008fc0:	9b04      	ldr	r3, [sp, #16]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	9304      	str	r3, [sp, #16]
 8008fc6:	e6ae      	b.n	8008d26 <_dtoa_r+0x696>
 8008fc8:	9c07      	ldr	r4, [sp, #28]
 8008fca:	9704      	str	r7, [sp, #16]
 8008fcc:	4625      	mov	r5, r4
 8008fce:	e7f3      	b.n	8008fb8 <_dtoa_r+0x928>
 8008fd0:	9b07      	ldr	r3, [sp, #28]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 8104 	beq.w	80091e4 <_dtoa_r+0xb54>
 8008fdc:	2e00      	cmp	r6, #0
 8008fde:	dd05      	ble.n	8008fec <_dtoa_r+0x95c>
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4632      	mov	r2, r6
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	f000 fc25 	bl	8009834 <__lshift>
 8008fea:	4605      	mov	r5, r0
 8008fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d05a      	beq.n	80090a8 <_dtoa_r+0xa18>
 8008ff2:	6869      	ldr	r1, [r5, #4]
 8008ff4:	4658      	mov	r0, fp
 8008ff6:	f000 fa0f 	bl	8009418 <_Balloc>
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	b928      	cbnz	r0, 800900a <_dtoa_r+0x97a>
 8008ffe:	4b84      	ldr	r3, [pc, #528]	@ (8009210 <_dtoa_r+0xb80>)
 8009000:	4602      	mov	r2, r0
 8009002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009006:	f7ff bb5a 	b.w	80086be <_dtoa_r+0x2e>
 800900a:	692a      	ldr	r2, [r5, #16]
 800900c:	3202      	adds	r2, #2
 800900e:	0092      	lsls	r2, r2, #2
 8009010:	f105 010c 	add.w	r1, r5, #12
 8009014:	300c      	adds	r0, #12
 8009016:	f000 fe3d 	bl	8009c94 <memcpy>
 800901a:	2201      	movs	r2, #1
 800901c:	4631      	mov	r1, r6
 800901e:	4658      	mov	r0, fp
 8009020:	f000 fc08 	bl	8009834 <__lshift>
 8009024:	f10a 0301 	add.w	r3, sl, #1
 8009028:	9307      	str	r3, [sp, #28]
 800902a:	9b00      	ldr	r3, [sp, #0]
 800902c:	4453      	add	r3, sl
 800902e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	462f      	mov	r7, r5
 8009038:	930a      	str	r3, [sp, #40]	@ 0x28
 800903a:	4605      	mov	r5, r0
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	4621      	mov	r1, r4
 8009040:	3b01      	subs	r3, #1
 8009042:	4648      	mov	r0, r9
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	f7ff fa98 	bl	800857a <quorem>
 800904a:	4639      	mov	r1, r7
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009052:	4648      	mov	r0, r9
 8009054:	f000 fc5a 	bl	800990c <__mcmp>
 8009058:	462a      	mov	r2, r5
 800905a:	9008      	str	r0, [sp, #32]
 800905c:	4621      	mov	r1, r4
 800905e:	4658      	mov	r0, fp
 8009060:	f000 fc70 	bl	8009944 <__mdiff>
 8009064:	68c2      	ldr	r2, [r0, #12]
 8009066:	4606      	mov	r6, r0
 8009068:	bb02      	cbnz	r2, 80090ac <_dtoa_r+0xa1c>
 800906a:	4601      	mov	r1, r0
 800906c:	4648      	mov	r0, r9
 800906e:	f000 fc4d 	bl	800990c <__mcmp>
 8009072:	4602      	mov	r2, r0
 8009074:	4631      	mov	r1, r6
 8009076:	4658      	mov	r0, fp
 8009078:	920e      	str	r2, [sp, #56]	@ 0x38
 800907a:	f000 fa0d 	bl	8009498 <_Bfree>
 800907e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009082:	9e07      	ldr	r6, [sp, #28]
 8009084:	ea43 0102 	orr.w	r1, r3, r2
 8009088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800908a:	4319      	orrs	r1, r3
 800908c:	d110      	bne.n	80090b0 <_dtoa_r+0xa20>
 800908e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009092:	d029      	beq.n	80090e8 <_dtoa_r+0xa58>
 8009094:	9b08      	ldr	r3, [sp, #32]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dd02      	ble.n	80090a0 <_dtoa_r+0xa10>
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	f883 8000 	strb.w	r8, [r3]
 80090a6:	e63f      	b.n	8008d28 <_dtoa_r+0x698>
 80090a8:	4628      	mov	r0, r5
 80090aa:	e7bb      	b.n	8009024 <_dtoa_r+0x994>
 80090ac:	2201      	movs	r2, #1
 80090ae:	e7e1      	b.n	8009074 <_dtoa_r+0x9e4>
 80090b0:	9b08      	ldr	r3, [sp, #32]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	db04      	blt.n	80090c0 <_dtoa_r+0xa30>
 80090b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090b8:	430b      	orrs	r3, r1
 80090ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090bc:	430b      	orrs	r3, r1
 80090be:	d120      	bne.n	8009102 <_dtoa_r+0xa72>
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	dded      	ble.n	80090a0 <_dtoa_r+0xa10>
 80090c4:	4649      	mov	r1, r9
 80090c6:	2201      	movs	r2, #1
 80090c8:	4658      	mov	r0, fp
 80090ca:	f000 fbb3 	bl	8009834 <__lshift>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4681      	mov	r9, r0
 80090d2:	f000 fc1b 	bl	800990c <__mcmp>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	dc03      	bgt.n	80090e2 <_dtoa_r+0xa52>
 80090da:	d1e1      	bne.n	80090a0 <_dtoa_r+0xa10>
 80090dc:	f018 0f01 	tst.w	r8, #1
 80090e0:	d0de      	beq.n	80090a0 <_dtoa_r+0xa10>
 80090e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090e6:	d1d8      	bne.n	800909a <_dtoa_r+0xa0a>
 80090e8:	9a00      	ldr	r2, [sp, #0]
 80090ea:	2339      	movs	r3, #57	@ 0x39
 80090ec:	7013      	strb	r3, [r2, #0]
 80090ee:	4633      	mov	r3, r6
 80090f0:	461e      	mov	r6, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090f8:	2a39      	cmp	r2, #57	@ 0x39
 80090fa:	d052      	beq.n	80091a2 <_dtoa_r+0xb12>
 80090fc:	3201      	adds	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	e612      	b.n	8008d28 <_dtoa_r+0x698>
 8009102:	2a00      	cmp	r2, #0
 8009104:	dd07      	ble.n	8009116 <_dtoa_r+0xa86>
 8009106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800910a:	d0ed      	beq.n	80090e8 <_dtoa_r+0xa58>
 800910c:	9a00      	ldr	r2, [sp, #0]
 800910e:	f108 0301 	add.w	r3, r8, #1
 8009112:	7013      	strb	r3, [r2, #0]
 8009114:	e608      	b.n	8008d28 <_dtoa_r+0x698>
 8009116:	9b07      	ldr	r3, [sp, #28]
 8009118:	9a07      	ldr	r2, [sp, #28]
 800911a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800911e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009120:	4293      	cmp	r3, r2
 8009122:	d028      	beq.n	8009176 <_dtoa_r+0xae6>
 8009124:	4649      	mov	r1, r9
 8009126:	2300      	movs	r3, #0
 8009128:	220a      	movs	r2, #10
 800912a:	4658      	mov	r0, fp
 800912c:	f000 f9d6 	bl	80094dc <__multadd>
 8009130:	42af      	cmp	r7, r5
 8009132:	4681      	mov	r9, r0
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	f04f 020a 	mov.w	r2, #10
 800913c:	4639      	mov	r1, r7
 800913e:	4658      	mov	r0, fp
 8009140:	d107      	bne.n	8009152 <_dtoa_r+0xac2>
 8009142:	f000 f9cb 	bl	80094dc <__multadd>
 8009146:	4607      	mov	r7, r0
 8009148:	4605      	mov	r5, r0
 800914a:	9b07      	ldr	r3, [sp, #28]
 800914c:	3301      	adds	r3, #1
 800914e:	9307      	str	r3, [sp, #28]
 8009150:	e774      	b.n	800903c <_dtoa_r+0x9ac>
 8009152:	f000 f9c3 	bl	80094dc <__multadd>
 8009156:	4629      	mov	r1, r5
 8009158:	4607      	mov	r7, r0
 800915a:	2300      	movs	r3, #0
 800915c:	220a      	movs	r2, #10
 800915e:	4658      	mov	r0, fp
 8009160:	f000 f9bc 	bl	80094dc <__multadd>
 8009164:	4605      	mov	r5, r0
 8009166:	e7f0      	b.n	800914a <_dtoa_r+0xaba>
 8009168:	9b00      	ldr	r3, [sp, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	bfcc      	ite	gt
 800916e:	461e      	movgt	r6, r3
 8009170:	2601      	movle	r6, #1
 8009172:	4456      	add	r6, sl
 8009174:	2700      	movs	r7, #0
 8009176:	4649      	mov	r1, r9
 8009178:	2201      	movs	r2, #1
 800917a:	4658      	mov	r0, fp
 800917c:	f000 fb5a 	bl	8009834 <__lshift>
 8009180:	4621      	mov	r1, r4
 8009182:	4681      	mov	r9, r0
 8009184:	f000 fbc2 	bl	800990c <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	dcb0      	bgt.n	80090ee <_dtoa_r+0xa5e>
 800918c:	d102      	bne.n	8009194 <_dtoa_r+0xb04>
 800918e:	f018 0f01 	tst.w	r8, #1
 8009192:	d1ac      	bne.n	80090ee <_dtoa_r+0xa5e>
 8009194:	4633      	mov	r3, r6
 8009196:	461e      	mov	r6, r3
 8009198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800919c:	2a30      	cmp	r2, #48	@ 0x30
 800919e:	d0fa      	beq.n	8009196 <_dtoa_r+0xb06>
 80091a0:	e5c2      	b.n	8008d28 <_dtoa_r+0x698>
 80091a2:	459a      	cmp	sl, r3
 80091a4:	d1a4      	bne.n	80090f0 <_dtoa_r+0xa60>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	3301      	adds	r3, #1
 80091aa:	9304      	str	r3, [sp, #16]
 80091ac:	2331      	movs	r3, #49	@ 0x31
 80091ae:	f88a 3000 	strb.w	r3, [sl]
 80091b2:	e5b9      	b.n	8008d28 <_dtoa_r+0x698>
 80091b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009214 <_dtoa_r+0xb84>
 80091ba:	b11b      	cbz	r3, 80091c4 <_dtoa_r+0xb34>
 80091bc:	f10a 0308 	add.w	r3, sl, #8
 80091c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091c2:	6013      	str	r3, [r2, #0]
 80091c4:	4650      	mov	r0, sl
 80091c6:	b019      	add	sp, #100	@ 0x64
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	f77f ae37 	ble.w	8008e42 <_dtoa_r+0x7b2>
 80091d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d8:	2001      	movs	r0, #1
 80091da:	e655      	b.n	8008e88 <_dtoa_r+0x7f8>
 80091dc:	9b00      	ldr	r3, [sp, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f77f aed6 	ble.w	8008f90 <_dtoa_r+0x900>
 80091e4:	4656      	mov	r6, sl
 80091e6:	4621      	mov	r1, r4
 80091e8:	4648      	mov	r0, r9
 80091ea:	f7ff f9c6 	bl	800857a <quorem>
 80091ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091f2:	f806 8b01 	strb.w	r8, [r6], #1
 80091f6:	9b00      	ldr	r3, [sp, #0]
 80091f8:	eba6 020a 	sub.w	r2, r6, sl
 80091fc:	4293      	cmp	r3, r2
 80091fe:	ddb3      	ble.n	8009168 <_dtoa_r+0xad8>
 8009200:	4649      	mov	r1, r9
 8009202:	2300      	movs	r3, #0
 8009204:	220a      	movs	r2, #10
 8009206:	4658      	mov	r0, fp
 8009208:	f000 f968 	bl	80094dc <__multadd>
 800920c:	4681      	mov	r9, r0
 800920e:	e7ea      	b.n	80091e6 <_dtoa_r+0xb56>
 8009210:	0800a3dc 	.word	0x0800a3dc
 8009214:	0800a360 	.word	0x0800a360

08009218 <_free_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4605      	mov	r5, r0
 800921c:	2900      	cmp	r1, #0
 800921e:	d041      	beq.n	80092a4 <_free_r+0x8c>
 8009220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009224:	1f0c      	subs	r4, r1, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfb8      	it	lt
 800922a:	18e4      	addlt	r4, r4, r3
 800922c:	f000 f8e8 	bl	8009400 <__malloc_lock>
 8009230:	4a1d      	ldr	r2, [pc, #116]	@ (80092a8 <_free_r+0x90>)
 8009232:	6813      	ldr	r3, [r2, #0]
 8009234:	b933      	cbnz	r3, 8009244 <_free_r+0x2c>
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	6014      	str	r4, [r2, #0]
 800923a:	4628      	mov	r0, r5
 800923c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009240:	f000 b8e4 	b.w	800940c <__malloc_unlock>
 8009244:	42a3      	cmp	r3, r4
 8009246:	d908      	bls.n	800925a <_free_r+0x42>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	1821      	adds	r1, r4, r0
 800924c:	428b      	cmp	r3, r1
 800924e:	bf01      	itttt	eq
 8009250:	6819      	ldreq	r1, [r3, #0]
 8009252:	685b      	ldreq	r3, [r3, #4]
 8009254:	1809      	addeq	r1, r1, r0
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	e7ed      	b.n	8009236 <_free_r+0x1e>
 800925a:	461a      	mov	r2, r3
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b10b      	cbz	r3, 8009264 <_free_r+0x4c>
 8009260:	42a3      	cmp	r3, r4
 8009262:	d9fa      	bls.n	800925a <_free_r+0x42>
 8009264:	6811      	ldr	r1, [r2, #0]
 8009266:	1850      	adds	r0, r2, r1
 8009268:	42a0      	cmp	r0, r4
 800926a:	d10b      	bne.n	8009284 <_free_r+0x6c>
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	4401      	add	r1, r0
 8009270:	1850      	adds	r0, r2, r1
 8009272:	4283      	cmp	r3, r0
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	d1e0      	bne.n	800923a <_free_r+0x22>
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	6053      	str	r3, [r2, #4]
 800927e:	4408      	add	r0, r1
 8009280:	6010      	str	r0, [r2, #0]
 8009282:	e7da      	b.n	800923a <_free_r+0x22>
 8009284:	d902      	bls.n	800928c <_free_r+0x74>
 8009286:	230c      	movs	r3, #12
 8009288:	602b      	str	r3, [r5, #0]
 800928a:	e7d6      	b.n	800923a <_free_r+0x22>
 800928c:	6820      	ldr	r0, [r4, #0]
 800928e:	1821      	adds	r1, r4, r0
 8009290:	428b      	cmp	r3, r1
 8009292:	bf04      	itt	eq
 8009294:	6819      	ldreq	r1, [r3, #0]
 8009296:	685b      	ldreq	r3, [r3, #4]
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	bf04      	itt	eq
 800929c:	1809      	addeq	r1, r1, r0
 800929e:	6021      	streq	r1, [r4, #0]
 80092a0:	6054      	str	r4, [r2, #4]
 80092a2:	e7ca      	b.n	800923a <_free_r+0x22>
 80092a4:	bd38      	pop	{r3, r4, r5, pc}
 80092a6:	bf00      	nop
 80092a8:	20000500 	.word	0x20000500

080092ac <malloc>:
 80092ac:	4b02      	ldr	r3, [pc, #8]	@ (80092b8 <malloc+0xc>)
 80092ae:	4601      	mov	r1, r0
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f000 b825 	b.w	8009300 <_malloc_r>
 80092b6:	bf00      	nop
 80092b8:	20000018 	.word	0x20000018

080092bc <sbrk_aligned>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	4e0f      	ldr	r6, [pc, #60]	@ (80092fc <sbrk_aligned+0x40>)
 80092c0:	460c      	mov	r4, r1
 80092c2:	6831      	ldr	r1, [r6, #0]
 80092c4:	4605      	mov	r5, r0
 80092c6:	b911      	cbnz	r1, 80092ce <sbrk_aligned+0x12>
 80092c8:	f000 fcd4 	bl	8009c74 <_sbrk_r>
 80092cc:	6030      	str	r0, [r6, #0]
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f000 fccf 	bl	8009c74 <_sbrk_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d103      	bne.n	80092e2 <sbrk_aligned+0x26>
 80092da:	f04f 34ff 	mov.w	r4, #4294967295
 80092de:	4620      	mov	r0, r4
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	1cc4      	adds	r4, r0, #3
 80092e4:	f024 0403 	bic.w	r4, r4, #3
 80092e8:	42a0      	cmp	r0, r4
 80092ea:	d0f8      	beq.n	80092de <sbrk_aligned+0x22>
 80092ec:	1a21      	subs	r1, r4, r0
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 fcc0 	bl	8009c74 <_sbrk_r>
 80092f4:	3001      	adds	r0, #1
 80092f6:	d1f2      	bne.n	80092de <sbrk_aligned+0x22>
 80092f8:	e7ef      	b.n	80092da <sbrk_aligned+0x1e>
 80092fa:	bf00      	nop
 80092fc:	200004fc 	.word	0x200004fc

08009300 <_malloc_r>:
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	1ccd      	adds	r5, r1, #3
 8009306:	f025 0503 	bic.w	r5, r5, #3
 800930a:	3508      	adds	r5, #8
 800930c:	2d0c      	cmp	r5, #12
 800930e:	bf38      	it	cc
 8009310:	250c      	movcc	r5, #12
 8009312:	2d00      	cmp	r5, #0
 8009314:	4606      	mov	r6, r0
 8009316:	db01      	blt.n	800931c <_malloc_r+0x1c>
 8009318:	42a9      	cmp	r1, r5
 800931a:	d904      	bls.n	8009326 <_malloc_r+0x26>
 800931c:	230c      	movs	r3, #12
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	2000      	movs	r0, #0
 8009322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093fc <_malloc_r+0xfc>
 800932a:	f000 f869 	bl	8009400 <__malloc_lock>
 800932e:	f8d8 3000 	ldr.w	r3, [r8]
 8009332:	461c      	mov	r4, r3
 8009334:	bb44      	cbnz	r4, 8009388 <_malloc_r+0x88>
 8009336:	4629      	mov	r1, r5
 8009338:	4630      	mov	r0, r6
 800933a:	f7ff ffbf 	bl	80092bc <sbrk_aligned>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	4604      	mov	r4, r0
 8009342:	d158      	bne.n	80093f6 <_malloc_r+0xf6>
 8009344:	f8d8 4000 	ldr.w	r4, [r8]
 8009348:	4627      	mov	r7, r4
 800934a:	2f00      	cmp	r7, #0
 800934c:	d143      	bne.n	80093d6 <_malloc_r+0xd6>
 800934e:	2c00      	cmp	r4, #0
 8009350:	d04b      	beq.n	80093ea <_malloc_r+0xea>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	4639      	mov	r1, r7
 8009356:	4630      	mov	r0, r6
 8009358:	eb04 0903 	add.w	r9, r4, r3
 800935c:	f000 fc8a 	bl	8009c74 <_sbrk_r>
 8009360:	4581      	cmp	r9, r0
 8009362:	d142      	bne.n	80093ea <_malloc_r+0xea>
 8009364:	6821      	ldr	r1, [r4, #0]
 8009366:	1a6d      	subs	r5, r5, r1
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ffa6 	bl	80092bc <sbrk_aligned>
 8009370:	3001      	adds	r0, #1
 8009372:	d03a      	beq.n	80093ea <_malloc_r+0xea>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	442b      	add	r3, r5
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	f8d8 3000 	ldr.w	r3, [r8]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	bb62      	cbnz	r2, 80093dc <_malloc_r+0xdc>
 8009382:	f8c8 7000 	str.w	r7, [r8]
 8009386:	e00f      	b.n	80093a8 <_malloc_r+0xa8>
 8009388:	6822      	ldr	r2, [r4, #0]
 800938a:	1b52      	subs	r2, r2, r5
 800938c:	d420      	bmi.n	80093d0 <_malloc_r+0xd0>
 800938e:	2a0b      	cmp	r2, #11
 8009390:	d917      	bls.n	80093c2 <_malloc_r+0xc2>
 8009392:	1961      	adds	r1, r4, r5
 8009394:	42a3      	cmp	r3, r4
 8009396:	6025      	str	r5, [r4, #0]
 8009398:	bf18      	it	ne
 800939a:	6059      	strne	r1, [r3, #4]
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	bf08      	it	eq
 80093a0:	f8c8 1000 	streq.w	r1, [r8]
 80093a4:	5162      	str	r2, [r4, r5]
 80093a6:	604b      	str	r3, [r1, #4]
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f82f 	bl	800940c <__malloc_unlock>
 80093ae:	f104 000b 	add.w	r0, r4, #11
 80093b2:	1d23      	adds	r3, r4, #4
 80093b4:	f020 0007 	bic.w	r0, r0, #7
 80093b8:	1ac2      	subs	r2, r0, r3
 80093ba:	bf1c      	itt	ne
 80093bc:	1a1b      	subne	r3, r3, r0
 80093be:	50a3      	strne	r3, [r4, r2]
 80093c0:	e7af      	b.n	8009322 <_malloc_r+0x22>
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	bf0c      	ite	eq
 80093c8:	f8c8 2000 	streq.w	r2, [r8]
 80093cc:	605a      	strne	r2, [r3, #4]
 80093ce:	e7eb      	b.n	80093a8 <_malloc_r+0xa8>
 80093d0:	4623      	mov	r3, r4
 80093d2:	6864      	ldr	r4, [r4, #4]
 80093d4:	e7ae      	b.n	8009334 <_malloc_r+0x34>
 80093d6:	463c      	mov	r4, r7
 80093d8:	687f      	ldr	r7, [r7, #4]
 80093da:	e7b6      	b.n	800934a <_malloc_r+0x4a>
 80093dc:	461a      	mov	r2, r3
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d1fb      	bne.n	80093dc <_malloc_r+0xdc>
 80093e4:	2300      	movs	r3, #0
 80093e6:	6053      	str	r3, [r2, #4]
 80093e8:	e7de      	b.n	80093a8 <_malloc_r+0xa8>
 80093ea:	230c      	movs	r3, #12
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 f80c 	bl	800940c <__malloc_unlock>
 80093f4:	e794      	b.n	8009320 <_malloc_r+0x20>
 80093f6:	6005      	str	r5, [r0, #0]
 80093f8:	e7d6      	b.n	80093a8 <_malloc_r+0xa8>
 80093fa:	bf00      	nop
 80093fc:	20000500 	.word	0x20000500

08009400 <__malloc_lock>:
 8009400:	4801      	ldr	r0, [pc, #4]	@ (8009408 <__malloc_lock+0x8>)
 8009402:	f7ff b8b8 	b.w	8008576 <__retarget_lock_acquire_recursive>
 8009406:	bf00      	nop
 8009408:	200004f8 	.word	0x200004f8

0800940c <__malloc_unlock>:
 800940c:	4801      	ldr	r0, [pc, #4]	@ (8009414 <__malloc_unlock+0x8>)
 800940e:	f7ff b8b3 	b.w	8008578 <__retarget_lock_release_recursive>
 8009412:	bf00      	nop
 8009414:	200004f8 	.word	0x200004f8

08009418 <_Balloc>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	69c6      	ldr	r6, [r0, #28]
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	b976      	cbnz	r6, 8009440 <_Balloc+0x28>
 8009422:	2010      	movs	r0, #16
 8009424:	f7ff ff42 	bl	80092ac <malloc>
 8009428:	4602      	mov	r2, r0
 800942a:	61e0      	str	r0, [r4, #28]
 800942c:	b920      	cbnz	r0, 8009438 <_Balloc+0x20>
 800942e:	4b18      	ldr	r3, [pc, #96]	@ (8009490 <_Balloc+0x78>)
 8009430:	4818      	ldr	r0, [pc, #96]	@ (8009494 <_Balloc+0x7c>)
 8009432:	216b      	movs	r1, #107	@ 0x6b
 8009434:	f000 fc3c 	bl	8009cb0 <__assert_func>
 8009438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800943c:	6006      	str	r6, [r0, #0]
 800943e:	60c6      	str	r6, [r0, #12]
 8009440:	69e6      	ldr	r6, [r4, #28]
 8009442:	68f3      	ldr	r3, [r6, #12]
 8009444:	b183      	cbz	r3, 8009468 <_Balloc+0x50>
 8009446:	69e3      	ldr	r3, [r4, #28]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800944e:	b9b8      	cbnz	r0, 8009480 <_Balloc+0x68>
 8009450:	2101      	movs	r1, #1
 8009452:	fa01 f605 	lsl.w	r6, r1, r5
 8009456:	1d72      	adds	r2, r6, #5
 8009458:	0092      	lsls	r2, r2, #2
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fc46 	bl	8009cec <_calloc_r>
 8009460:	b160      	cbz	r0, 800947c <_Balloc+0x64>
 8009462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009466:	e00e      	b.n	8009486 <_Balloc+0x6e>
 8009468:	2221      	movs	r2, #33	@ 0x21
 800946a:	2104      	movs	r1, #4
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fc3d 	bl	8009cec <_calloc_r>
 8009472:	69e3      	ldr	r3, [r4, #28]
 8009474:	60f0      	str	r0, [r6, #12]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e4      	bne.n	8009446 <_Balloc+0x2e>
 800947c:	2000      	movs	r0, #0
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	6802      	ldr	r2, [r0, #0]
 8009482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009486:	2300      	movs	r3, #0
 8009488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800948c:	e7f7      	b.n	800947e <_Balloc+0x66>
 800948e:	bf00      	nop
 8009490:	0800a36d 	.word	0x0800a36d
 8009494:	0800a3ed 	.word	0x0800a3ed

08009498 <_Bfree>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	69c6      	ldr	r6, [r0, #28]
 800949c:	4605      	mov	r5, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	b976      	cbnz	r6, 80094c0 <_Bfree+0x28>
 80094a2:	2010      	movs	r0, #16
 80094a4:	f7ff ff02 	bl	80092ac <malloc>
 80094a8:	4602      	mov	r2, r0
 80094aa:	61e8      	str	r0, [r5, #28]
 80094ac:	b920      	cbnz	r0, 80094b8 <_Bfree+0x20>
 80094ae:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <_Bfree+0x3c>)
 80094b0:	4809      	ldr	r0, [pc, #36]	@ (80094d8 <_Bfree+0x40>)
 80094b2:	218f      	movs	r1, #143	@ 0x8f
 80094b4:	f000 fbfc 	bl	8009cb0 <__assert_func>
 80094b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094bc:	6006      	str	r6, [r0, #0]
 80094be:	60c6      	str	r6, [r0, #12]
 80094c0:	b13c      	cbz	r4, 80094d2 <_Bfree+0x3a>
 80094c2:	69eb      	ldr	r3, [r5, #28]
 80094c4:	6862      	ldr	r2, [r4, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094cc:	6021      	str	r1, [r4, #0]
 80094ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	0800a36d 	.word	0x0800a36d
 80094d8:	0800a3ed 	.word	0x0800a3ed

080094dc <__multadd>:
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	690d      	ldr	r5, [r1, #16]
 80094e2:	4607      	mov	r7, r0
 80094e4:	460c      	mov	r4, r1
 80094e6:	461e      	mov	r6, r3
 80094e8:	f101 0c14 	add.w	ip, r1, #20
 80094ec:	2000      	movs	r0, #0
 80094ee:	f8dc 3000 	ldr.w	r3, [ip]
 80094f2:	b299      	uxth	r1, r3
 80094f4:	fb02 6101 	mla	r1, r2, r1, r6
 80094f8:	0c1e      	lsrs	r6, r3, #16
 80094fa:	0c0b      	lsrs	r3, r1, #16
 80094fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009500:	b289      	uxth	r1, r1
 8009502:	3001      	adds	r0, #1
 8009504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009508:	4285      	cmp	r5, r0
 800950a:	f84c 1b04 	str.w	r1, [ip], #4
 800950e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009512:	dcec      	bgt.n	80094ee <__multadd+0x12>
 8009514:	b30e      	cbz	r6, 800955a <__multadd+0x7e>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc19      	bgt.n	8009550 <__multadd+0x74>
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	4638      	mov	r0, r7
 8009520:	3101      	adds	r1, #1
 8009522:	f7ff ff79 	bl	8009418 <_Balloc>
 8009526:	4680      	mov	r8, r0
 8009528:	b928      	cbnz	r0, 8009536 <__multadd+0x5a>
 800952a:	4602      	mov	r2, r0
 800952c:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <__multadd+0x84>)
 800952e:	480d      	ldr	r0, [pc, #52]	@ (8009564 <__multadd+0x88>)
 8009530:	21ba      	movs	r1, #186	@ 0xba
 8009532:	f000 fbbd 	bl	8009cb0 <__assert_func>
 8009536:	6922      	ldr	r2, [r4, #16]
 8009538:	3202      	adds	r2, #2
 800953a:	f104 010c 	add.w	r1, r4, #12
 800953e:	0092      	lsls	r2, r2, #2
 8009540:	300c      	adds	r0, #12
 8009542:	f000 fba7 	bl	8009c94 <memcpy>
 8009546:	4621      	mov	r1, r4
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ffa5 	bl	8009498 <_Bfree>
 800954e:	4644      	mov	r4, r8
 8009550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009554:	3501      	adds	r5, #1
 8009556:	615e      	str	r6, [r3, #20]
 8009558:	6125      	str	r5, [r4, #16]
 800955a:	4620      	mov	r0, r4
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	0800a3dc 	.word	0x0800a3dc
 8009564:	0800a3ed 	.word	0x0800a3ed

08009568 <__hi0bits>:
 8009568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800956c:	4603      	mov	r3, r0
 800956e:	bf36      	itet	cc
 8009570:	0403      	lslcc	r3, r0, #16
 8009572:	2000      	movcs	r0, #0
 8009574:	2010      	movcc	r0, #16
 8009576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800957a:	bf3c      	itt	cc
 800957c:	021b      	lslcc	r3, r3, #8
 800957e:	3008      	addcc	r0, #8
 8009580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009584:	bf3c      	itt	cc
 8009586:	011b      	lslcc	r3, r3, #4
 8009588:	3004      	addcc	r0, #4
 800958a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800958e:	bf3c      	itt	cc
 8009590:	009b      	lslcc	r3, r3, #2
 8009592:	3002      	addcc	r0, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	db05      	blt.n	80095a4 <__hi0bits+0x3c>
 8009598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800959c:	f100 0001 	add.w	r0, r0, #1
 80095a0:	bf08      	it	eq
 80095a2:	2020      	moveq	r0, #32
 80095a4:	4770      	bx	lr

080095a6 <__lo0bits>:
 80095a6:	6803      	ldr	r3, [r0, #0]
 80095a8:	4602      	mov	r2, r0
 80095aa:	f013 0007 	ands.w	r0, r3, #7
 80095ae:	d00b      	beq.n	80095c8 <__lo0bits+0x22>
 80095b0:	07d9      	lsls	r1, r3, #31
 80095b2:	d421      	bmi.n	80095f8 <__lo0bits+0x52>
 80095b4:	0798      	lsls	r0, r3, #30
 80095b6:	bf49      	itett	mi
 80095b8:	085b      	lsrmi	r3, r3, #1
 80095ba:	089b      	lsrpl	r3, r3, #2
 80095bc:	2001      	movmi	r0, #1
 80095be:	6013      	strmi	r3, [r2, #0]
 80095c0:	bf5c      	itt	pl
 80095c2:	6013      	strpl	r3, [r2, #0]
 80095c4:	2002      	movpl	r0, #2
 80095c6:	4770      	bx	lr
 80095c8:	b299      	uxth	r1, r3
 80095ca:	b909      	cbnz	r1, 80095d0 <__lo0bits+0x2a>
 80095cc:	0c1b      	lsrs	r3, r3, #16
 80095ce:	2010      	movs	r0, #16
 80095d0:	b2d9      	uxtb	r1, r3
 80095d2:	b909      	cbnz	r1, 80095d8 <__lo0bits+0x32>
 80095d4:	3008      	adds	r0, #8
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	0719      	lsls	r1, r3, #28
 80095da:	bf04      	itt	eq
 80095dc:	091b      	lsreq	r3, r3, #4
 80095de:	3004      	addeq	r0, #4
 80095e0:	0799      	lsls	r1, r3, #30
 80095e2:	bf04      	itt	eq
 80095e4:	089b      	lsreq	r3, r3, #2
 80095e6:	3002      	addeq	r0, #2
 80095e8:	07d9      	lsls	r1, r3, #31
 80095ea:	d403      	bmi.n	80095f4 <__lo0bits+0x4e>
 80095ec:	085b      	lsrs	r3, r3, #1
 80095ee:	f100 0001 	add.w	r0, r0, #1
 80095f2:	d003      	beq.n	80095fc <__lo0bits+0x56>
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	4770      	bx	lr
 80095f8:	2000      	movs	r0, #0
 80095fa:	4770      	bx	lr
 80095fc:	2020      	movs	r0, #32
 80095fe:	4770      	bx	lr

08009600 <__i2b>:
 8009600:	b510      	push	{r4, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	2101      	movs	r1, #1
 8009606:	f7ff ff07 	bl	8009418 <_Balloc>
 800960a:	4602      	mov	r2, r0
 800960c:	b928      	cbnz	r0, 800961a <__i2b+0x1a>
 800960e:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <__i2b+0x24>)
 8009610:	4805      	ldr	r0, [pc, #20]	@ (8009628 <__i2b+0x28>)
 8009612:	f240 1145 	movw	r1, #325	@ 0x145
 8009616:	f000 fb4b 	bl	8009cb0 <__assert_func>
 800961a:	2301      	movs	r3, #1
 800961c:	6144      	str	r4, [r0, #20]
 800961e:	6103      	str	r3, [r0, #16]
 8009620:	bd10      	pop	{r4, pc}
 8009622:	bf00      	nop
 8009624:	0800a3dc 	.word	0x0800a3dc
 8009628:	0800a3ed 	.word	0x0800a3ed

0800962c <__multiply>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4614      	mov	r4, r2
 8009632:	690a      	ldr	r2, [r1, #16]
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	429a      	cmp	r2, r3
 8009638:	bfa8      	it	ge
 800963a:	4623      	movge	r3, r4
 800963c:	460f      	mov	r7, r1
 800963e:	bfa4      	itt	ge
 8009640:	460c      	movge	r4, r1
 8009642:	461f      	movge	r7, r3
 8009644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800964c:	68a3      	ldr	r3, [r4, #8]
 800964e:	6861      	ldr	r1, [r4, #4]
 8009650:	eb0a 0609 	add.w	r6, sl, r9
 8009654:	42b3      	cmp	r3, r6
 8009656:	b085      	sub	sp, #20
 8009658:	bfb8      	it	lt
 800965a:	3101      	addlt	r1, #1
 800965c:	f7ff fedc 	bl	8009418 <_Balloc>
 8009660:	b930      	cbnz	r0, 8009670 <__multiply+0x44>
 8009662:	4602      	mov	r2, r0
 8009664:	4b44      	ldr	r3, [pc, #272]	@ (8009778 <__multiply+0x14c>)
 8009666:	4845      	ldr	r0, [pc, #276]	@ (800977c <__multiply+0x150>)
 8009668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800966c:	f000 fb20 	bl	8009cb0 <__assert_func>
 8009670:	f100 0514 	add.w	r5, r0, #20
 8009674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009678:	462b      	mov	r3, r5
 800967a:	2200      	movs	r2, #0
 800967c:	4543      	cmp	r3, r8
 800967e:	d321      	bcc.n	80096c4 <__multiply+0x98>
 8009680:	f107 0114 	add.w	r1, r7, #20
 8009684:	f104 0214 	add.w	r2, r4, #20
 8009688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800968c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009690:	9302      	str	r3, [sp, #8]
 8009692:	1b13      	subs	r3, r2, r4
 8009694:	3b15      	subs	r3, #21
 8009696:	f023 0303 	bic.w	r3, r3, #3
 800969a:	3304      	adds	r3, #4
 800969c:	f104 0715 	add.w	r7, r4, #21
 80096a0:	42ba      	cmp	r2, r7
 80096a2:	bf38      	it	cc
 80096a4:	2304      	movcc	r3, #4
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	9b02      	ldr	r3, [sp, #8]
 80096aa:	9103      	str	r1, [sp, #12]
 80096ac:	428b      	cmp	r3, r1
 80096ae:	d80c      	bhi.n	80096ca <__multiply+0x9e>
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	dd03      	ble.n	80096bc <__multiply+0x90>
 80096b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d05b      	beq.n	8009774 <__multiply+0x148>
 80096bc:	6106      	str	r6, [r0, #16]
 80096be:	b005      	add	sp, #20
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c4:	f843 2b04 	str.w	r2, [r3], #4
 80096c8:	e7d8      	b.n	800967c <__multiply+0x50>
 80096ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80096ce:	f1ba 0f00 	cmp.w	sl, #0
 80096d2:	d024      	beq.n	800971e <__multiply+0xf2>
 80096d4:	f104 0e14 	add.w	lr, r4, #20
 80096d8:	46a9      	mov	r9, r5
 80096da:	f04f 0c00 	mov.w	ip, #0
 80096de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096e2:	f8d9 3000 	ldr.w	r3, [r9]
 80096e6:	fa1f fb87 	uxth.w	fp, r7
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80096f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80096f4:	f8d9 7000 	ldr.w	r7, [r9]
 80096f8:	4463      	add	r3, ip
 80096fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8009702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009706:	b29b      	uxth	r3, r3
 8009708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800970c:	4572      	cmp	r2, lr
 800970e:	f849 3b04 	str.w	r3, [r9], #4
 8009712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009716:	d8e2      	bhi.n	80096de <__multiply+0xb2>
 8009718:	9b01      	ldr	r3, [sp, #4]
 800971a:	f845 c003 	str.w	ip, [r5, r3]
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009724:	3104      	adds	r1, #4
 8009726:	f1b9 0f00 	cmp.w	r9, #0
 800972a:	d021      	beq.n	8009770 <__multiply+0x144>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	f104 0c14 	add.w	ip, r4, #20
 8009732:	46ae      	mov	lr, r5
 8009734:	f04f 0a00 	mov.w	sl, #0
 8009738:	f8bc b000 	ldrh.w	fp, [ip]
 800973c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009740:	fb09 770b 	mla	r7, r9, fp, r7
 8009744:	4457      	add	r7, sl
 8009746:	b29b      	uxth	r3, r3
 8009748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800974c:	f84e 3b04 	str.w	r3, [lr], #4
 8009750:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009758:	f8be 3000 	ldrh.w	r3, [lr]
 800975c:	fb09 330a 	mla	r3, r9, sl, r3
 8009760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009764:	4562      	cmp	r2, ip
 8009766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800976a:	d8e5      	bhi.n	8009738 <__multiply+0x10c>
 800976c:	9f01      	ldr	r7, [sp, #4]
 800976e:	51eb      	str	r3, [r5, r7]
 8009770:	3504      	adds	r5, #4
 8009772:	e799      	b.n	80096a8 <__multiply+0x7c>
 8009774:	3e01      	subs	r6, #1
 8009776:	e79b      	b.n	80096b0 <__multiply+0x84>
 8009778:	0800a3dc 	.word	0x0800a3dc
 800977c:	0800a3ed 	.word	0x0800a3ed

08009780 <__pow5mult>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	4615      	mov	r5, r2
 8009786:	f012 0203 	ands.w	r2, r2, #3
 800978a:	4607      	mov	r7, r0
 800978c:	460e      	mov	r6, r1
 800978e:	d007      	beq.n	80097a0 <__pow5mult+0x20>
 8009790:	4c25      	ldr	r4, [pc, #148]	@ (8009828 <__pow5mult+0xa8>)
 8009792:	3a01      	subs	r2, #1
 8009794:	2300      	movs	r3, #0
 8009796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800979a:	f7ff fe9f 	bl	80094dc <__multadd>
 800979e:	4606      	mov	r6, r0
 80097a0:	10ad      	asrs	r5, r5, #2
 80097a2:	d03d      	beq.n	8009820 <__pow5mult+0xa0>
 80097a4:	69fc      	ldr	r4, [r7, #28]
 80097a6:	b97c      	cbnz	r4, 80097c8 <__pow5mult+0x48>
 80097a8:	2010      	movs	r0, #16
 80097aa:	f7ff fd7f 	bl	80092ac <malloc>
 80097ae:	4602      	mov	r2, r0
 80097b0:	61f8      	str	r0, [r7, #28]
 80097b2:	b928      	cbnz	r0, 80097c0 <__pow5mult+0x40>
 80097b4:	4b1d      	ldr	r3, [pc, #116]	@ (800982c <__pow5mult+0xac>)
 80097b6:	481e      	ldr	r0, [pc, #120]	@ (8009830 <__pow5mult+0xb0>)
 80097b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80097bc:	f000 fa78 	bl	8009cb0 <__assert_func>
 80097c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c4:	6004      	str	r4, [r0, #0]
 80097c6:	60c4      	str	r4, [r0, #12]
 80097c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80097cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097d0:	b94c      	cbnz	r4, 80097e6 <__pow5mult+0x66>
 80097d2:	f240 2171 	movw	r1, #625	@ 0x271
 80097d6:	4638      	mov	r0, r7
 80097d8:	f7ff ff12 	bl	8009600 <__i2b>
 80097dc:	2300      	movs	r3, #0
 80097de:	f8c8 0008 	str.w	r0, [r8, #8]
 80097e2:	4604      	mov	r4, r0
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	f04f 0900 	mov.w	r9, #0
 80097ea:	07eb      	lsls	r3, r5, #31
 80097ec:	d50a      	bpl.n	8009804 <__pow5mult+0x84>
 80097ee:	4631      	mov	r1, r6
 80097f0:	4622      	mov	r2, r4
 80097f2:	4638      	mov	r0, r7
 80097f4:	f7ff ff1a 	bl	800962c <__multiply>
 80097f8:	4631      	mov	r1, r6
 80097fa:	4680      	mov	r8, r0
 80097fc:	4638      	mov	r0, r7
 80097fe:	f7ff fe4b 	bl	8009498 <_Bfree>
 8009802:	4646      	mov	r6, r8
 8009804:	106d      	asrs	r5, r5, #1
 8009806:	d00b      	beq.n	8009820 <__pow5mult+0xa0>
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	b938      	cbnz	r0, 800981c <__pow5mult+0x9c>
 800980c:	4622      	mov	r2, r4
 800980e:	4621      	mov	r1, r4
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff ff0b 	bl	800962c <__multiply>
 8009816:	6020      	str	r0, [r4, #0]
 8009818:	f8c0 9000 	str.w	r9, [r0]
 800981c:	4604      	mov	r4, r0
 800981e:	e7e4      	b.n	80097ea <__pow5mult+0x6a>
 8009820:	4630      	mov	r0, r6
 8009822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009826:	bf00      	nop
 8009828:	0800a448 	.word	0x0800a448
 800982c:	0800a36d 	.word	0x0800a36d
 8009830:	0800a3ed 	.word	0x0800a3ed

08009834 <__lshift>:
 8009834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009838:	460c      	mov	r4, r1
 800983a:	6849      	ldr	r1, [r1, #4]
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	4607      	mov	r7, r0
 8009846:	4691      	mov	r9, r2
 8009848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800984c:	f108 0601 	add.w	r6, r8, #1
 8009850:	42b3      	cmp	r3, r6
 8009852:	db0b      	blt.n	800986c <__lshift+0x38>
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff fddf 	bl	8009418 <_Balloc>
 800985a:	4605      	mov	r5, r0
 800985c:	b948      	cbnz	r0, 8009872 <__lshift+0x3e>
 800985e:	4602      	mov	r2, r0
 8009860:	4b28      	ldr	r3, [pc, #160]	@ (8009904 <__lshift+0xd0>)
 8009862:	4829      	ldr	r0, [pc, #164]	@ (8009908 <__lshift+0xd4>)
 8009864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009868:	f000 fa22 	bl	8009cb0 <__assert_func>
 800986c:	3101      	adds	r1, #1
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	e7ee      	b.n	8009850 <__lshift+0x1c>
 8009872:	2300      	movs	r3, #0
 8009874:	f100 0114 	add.w	r1, r0, #20
 8009878:	f100 0210 	add.w	r2, r0, #16
 800987c:	4618      	mov	r0, r3
 800987e:	4553      	cmp	r3, sl
 8009880:	db33      	blt.n	80098ea <__lshift+0xb6>
 8009882:	6920      	ldr	r0, [r4, #16]
 8009884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009888:	f104 0314 	add.w	r3, r4, #20
 800988c:	f019 091f 	ands.w	r9, r9, #31
 8009890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009898:	d02b      	beq.n	80098f2 <__lshift+0xbe>
 800989a:	f1c9 0e20 	rsb	lr, r9, #32
 800989e:	468a      	mov	sl, r1
 80098a0:	2200      	movs	r2, #0
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	fa00 f009 	lsl.w	r0, r0, r9
 80098a8:	4310      	orrs	r0, r2
 80098aa:	f84a 0b04 	str.w	r0, [sl], #4
 80098ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b2:	459c      	cmp	ip, r3
 80098b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80098b8:	d8f3      	bhi.n	80098a2 <__lshift+0x6e>
 80098ba:	ebac 0304 	sub.w	r3, ip, r4
 80098be:	3b15      	subs	r3, #21
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	3304      	adds	r3, #4
 80098c6:	f104 0015 	add.w	r0, r4, #21
 80098ca:	4584      	cmp	ip, r0
 80098cc:	bf38      	it	cc
 80098ce:	2304      	movcc	r3, #4
 80098d0:	50ca      	str	r2, [r1, r3]
 80098d2:	b10a      	cbz	r2, 80098d8 <__lshift+0xa4>
 80098d4:	f108 0602 	add.w	r6, r8, #2
 80098d8:	3e01      	subs	r6, #1
 80098da:	4638      	mov	r0, r7
 80098dc:	612e      	str	r6, [r5, #16]
 80098de:	4621      	mov	r1, r4
 80098e0:	f7ff fdda 	bl	8009498 <_Bfree>
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ee:	3301      	adds	r3, #1
 80098f0:	e7c5      	b.n	800987e <__lshift+0x4a>
 80098f2:	3904      	subs	r1, #4
 80098f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098fc:	459c      	cmp	ip, r3
 80098fe:	d8f9      	bhi.n	80098f4 <__lshift+0xc0>
 8009900:	e7ea      	b.n	80098d8 <__lshift+0xa4>
 8009902:	bf00      	nop
 8009904:	0800a3dc 	.word	0x0800a3dc
 8009908:	0800a3ed 	.word	0x0800a3ed

0800990c <__mcmp>:
 800990c:	690a      	ldr	r2, [r1, #16]
 800990e:	4603      	mov	r3, r0
 8009910:	6900      	ldr	r0, [r0, #16]
 8009912:	1a80      	subs	r0, r0, r2
 8009914:	b530      	push	{r4, r5, lr}
 8009916:	d10e      	bne.n	8009936 <__mcmp+0x2a>
 8009918:	3314      	adds	r3, #20
 800991a:	3114      	adds	r1, #20
 800991c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800992c:	4295      	cmp	r5, r2
 800992e:	d003      	beq.n	8009938 <__mcmp+0x2c>
 8009930:	d205      	bcs.n	800993e <__mcmp+0x32>
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	42a3      	cmp	r3, r4
 800993a:	d3f3      	bcc.n	8009924 <__mcmp+0x18>
 800993c:	e7fb      	b.n	8009936 <__mcmp+0x2a>
 800993e:	2001      	movs	r0, #1
 8009940:	e7f9      	b.n	8009936 <__mcmp+0x2a>
	...

08009944 <__mdiff>:
 8009944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	4689      	mov	r9, r1
 800994a:	4606      	mov	r6, r0
 800994c:	4611      	mov	r1, r2
 800994e:	4648      	mov	r0, r9
 8009950:	4614      	mov	r4, r2
 8009952:	f7ff ffdb 	bl	800990c <__mcmp>
 8009956:	1e05      	subs	r5, r0, #0
 8009958:	d112      	bne.n	8009980 <__mdiff+0x3c>
 800995a:	4629      	mov	r1, r5
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff fd5b 	bl	8009418 <_Balloc>
 8009962:	4602      	mov	r2, r0
 8009964:	b928      	cbnz	r0, 8009972 <__mdiff+0x2e>
 8009966:	4b3f      	ldr	r3, [pc, #252]	@ (8009a64 <__mdiff+0x120>)
 8009968:	f240 2137 	movw	r1, #567	@ 0x237
 800996c:	483e      	ldr	r0, [pc, #248]	@ (8009a68 <__mdiff+0x124>)
 800996e:	f000 f99f 	bl	8009cb0 <__assert_func>
 8009972:	2301      	movs	r3, #1
 8009974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009978:	4610      	mov	r0, r2
 800997a:	b003      	add	sp, #12
 800997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009980:	bfbc      	itt	lt
 8009982:	464b      	movlt	r3, r9
 8009984:	46a1      	movlt	r9, r4
 8009986:	4630      	mov	r0, r6
 8009988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800998c:	bfba      	itte	lt
 800998e:	461c      	movlt	r4, r3
 8009990:	2501      	movlt	r5, #1
 8009992:	2500      	movge	r5, #0
 8009994:	f7ff fd40 	bl	8009418 <_Balloc>
 8009998:	4602      	mov	r2, r0
 800999a:	b918      	cbnz	r0, 80099a4 <__mdiff+0x60>
 800999c:	4b31      	ldr	r3, [pc, #196]	@ (8009a64 <__mdiff+0x120>)
 800999e:	f240 2145 	movw	r1, #581	@ 0x245
 80099a2:	e7e3      	b.n	800996c <__mdiff+0x28>
 80099a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80099a8:	6926      	ldr	r6, [r4, #16]
 80099aa:	60c5      	str	r5, [r0, #12]
 80099ac:	f109 0310 	add.w	r3, r9, #16
 80099b0:	f109 0514 	add.w	r5, r9, #20
 80099b4:	f104 0e14 	add.w	lr, r4, #20
 80099b8:	f100 0b14 	add.w	fp, r0, #20
 80099bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80099c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	46d9      	mov	r9, fp
 80099c8:	f04f 0c00 	mov.w	ip, #0
 80099cc:	9b01      	ldr	r3, [sp, #4]
 80099ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80099d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	fa1f f38a 	uxth.w	r3, sl
 80099dc:	4619      	mov	r1, r3
 80099de:	b283      	uxth	r3, r0
 80099e0:	1acb      	subs	r3, r1, r3
 80099e2:	0c00      	lsrs	r0, r0, #16
 80099e4:	4463      	add	r3, ip
 80099e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80099ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099f4:	4576      	cmp	r6, lr
 80099f6:	f849 3b04 	str.w	r3, [r9], #4
 80099fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099fe:	d8e5      	bhi.n	80099cc <__mdiff+0x88>
 8009a00:	1b33      	subs	r3, r6, r4
 8009a02:	3b15      	subs	r3, #21
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	3415      	adds	r4, #21
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	42a6      	cmp	r6, r4
 8009a0e:	bf38      	it	cc
 8009a10:	2304      	movcc	r3, #4
 8009a12:	441d      	add	r5, r3
 8009a14:	445b      	add	r3, fp
 8009a16:	461e      	mov	r6, r3
 8009a18:	462c      	mov	r4, r5
 8009a1a:	4544      	cmp	r4, r8
 8009a1c:	d30e      	bcc.n	8009a3c <__mdiff+0xf8>
 8009a1e:	f108 0103 	add.w	r1, r8, #3
 8009a22:	1b49      	subs	r1, r1, r5
 8009a24:	f021 0103 	bic.w	r1, r1, #3
 8009a28:	3d03      	subs	r5, #3
 8009a2a:	45a8      	cmp	r8, r5
 8009a2c:	bf38      	it	cc
 8009a2e:	2100      	movcc	r1, #0
 8009a30:	440b      	add	r3, r1
 8009a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a36:	b191      	cbz	r1, 8009a5e <__mdiff+0x11a>
 8009a38:	6117      	str	r7, [r2, #16]
 8009a3a:	e79d      	b.n	8009978 <__mdiff+0x34>
 8009a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a40:	46e6      	mov	lr, ip
 8009a42:	0c08      	lsrs	r0, r1, #16
 8009a44:	fa1c fc81 	uxtah	ip, ip, r1
 8009a48:	4471      	add	r1, lr
 8009a4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a4e:	b289      	uxth	r1, r1
 8009a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a54:	f846 1b04 	str.w	r1, [r6], #4
 8009a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a5c:	e7dd      	b.n	8009a1a <__mdiff+0xd6>
 8009a5e:	3f01      	subs	r7, #1
 8009a60:	e7e7      	b.n	8009a32 <__mdiff+0xee>
 8009a62:	bf00      	nop
 8009a64:	0800a3dc 	.word	0x0800a3dc
 8009a68:	0800a3ed 	.word	0x0800a3ed

08009a6c <__d2b>:
 8009a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	460f      	mov	r7, r1
 8009a72:	2101      	movs	r1, #1
 8009a74:	ec59 8b10 	vmov	r8, r9, d0
 8009a78:	4616      	mov	r6, r2
 8009a7a:	f7ff fccd 	bl	8009418 <_Balloc>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	b930      	cbnz	r0, 8009a90 <__d2b+0x24>
 8009a82:	4602      	mov	r2, r0
 8009a84:	4b23      	ldr	r3, [pc, #140]	@ (8009b14 <__d2b+0xa8>)
 8009a86:	4824      	ldr	r0, [pc, #144]	@ (8009b18 <__d2b+0xac>)
 8009a88:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a8c:	f000 f910 	bl	8009cb0 <__assert_func>
 8009a90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a98:	b10d      	cbz	r5, 8009a9e <__d2b+0x32>
 8009a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	f1b8 0300 	subs.w	r3, r8, #0
 8009aa4:	d023      	beq.n	8009aee <__d2b+0x82>
 8009aa6:	4668      	mov	r0, sp
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	f7ff fd7c 	bl	80095a6 <__lo0bits>
 8009aae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ab2:	b1d0      	cbz	r0, 8009aea <__d2b+0x7e>
 8009ab4:	f1c0 0320 	rsb	r3, r0, #32
 8009ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8009abc:	430b      	orrs	r3, r1
 8009abe:	40c2      	lsrs	r2, r0
 8009ac0:	6163      	str	r3, [r4, #20]
 8009ac2:	9201      	str	r2, [sp, #4]
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	61a3      	str	r3, [r4, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bf0c      	ite	eq
 8009acc:	2201      	moveq	r2, #1
 8009ace:	2202      	movne	r2, #2
 8009ad0:	6122      	str	r2, [r4, #16]
 8009ad2:	b1a5      	cbz	r5, 8009afe <__d2b+0x92>
 8009ad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ad8:	4405      	add	r5, r0
 8009ada:	603d      	str	r5, [r7, #0]
 8009adc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009ae0:	6030      	str	r0, [r6, #0]
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	b003      	add	sp, #12
 8009ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aea:	6161      	str	r1, [r4, #20]
 8009aec:	e7ea      	b.n	8009ac4 <__d2b+0x58>
 8009aee:	a801      	add	r0, sp, #4
 8009af0:	f7ff fd59 	bl	80095a6 <__lo0bits>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	3020      	adds	r0, #32
 8009afa:	2201      	movs	r2, #1
 8009afc:	e7e8      	b.n	8009ad0 <__d2b+0x64>
 8009afe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b06:	6038      	str	r0, [r7, #0]
 8009b08:	6918      	ldr	r0, [r3, #16]
 8009b0a:	f7ff fd2d 	bl	8009568 <__hi0bits>
 8009b0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b12:	e7e5      	b.n	8009ae0 <__d2b+0x74>
 8009b14:	0800a3dc 	.word	0x0800a3dc
 8009b18:	0800a3ed 	.word	0x0800a3ed

08009b1c <__sflush_r>:
 8009b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	0716      	lsls	r6, r2, #28
 8009b26:	4605      	mov	r5, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	d454      	bmi.n	8009bd6 <__sflush_r+0xba>
 8009b2c:	684b      	ldr	r3, [r1, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dc02      	bgt.n	8009b38 <__sflush_r+0x1c>
 8009b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd48      	ble.n	8009bca <__sflush_r+0xae>
 8009b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	d045      	beq.n	8009bca <__sflush_r+0xae>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b44:	682f      	ldr	r7, [r5, #0]
 8009b46:	6a21      	ldr	r1, [r4, #32]
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	d030      	beq.n	8009bae <__sflush_r+0x92>
 8009b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	0759      	lsls	r1, r3, #29
 8009b52:	d505      	bpl.n	8009b60 <__sflush_r+0x44>
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b5a:	b10b      	cbz	r3, 8009b60 <__sflush_r+0x44>
 8009b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	2300      	movs	r3, #0
 8009b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b64:	6a21      	ldr	r1, [r4, #32]
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b0      	blx	r6
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	d106      	bne.n	8009b7e <__sflush_r+0x62>
 8009b70:	6829      	ldr	r1, [r5, #0]
 8009b72:	291d      	cmp	r1, #29
 8009b74:	d82b      	bhi.n	8009bce <__sflush_r+0xb2>
 8009b76:	4a2a      	ldr	r2, [pc, #168]	@ (8009c20 <__sflush_r+0x104>)
 8009b78:	410a      	asrs	r2, r1
 8009b7a:	07d6      	lsls	r6, r2, #31
 8009b7c:	d427      	bmi.n	8009bce <__sflush_r+0xb2>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	6062      	str	r2, [r4, #4]
 8009b82:	04d9      	lsls	r1, r3, #19
 8009b84:	6922      	ldr	r2, [r4, #16]
 8009b86:	6022      	str	r2, [r4, #0]
 8009b88:	d504      	bpl.n	8009b94 <__sflush_r+0x78>
 8009b8a:	1c42      	adds	r2, r0, #1
 8009b8c:	d101      	bne.n	8009b92 <__sflush_r+0x76>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b903      	cbnz	r3, 8009b94 <__sflush_r+0x78>
 8009b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b96:	602f      	str	r7, [r5, #0]
 8009b98:	b1b9      	cbz	r1, 8009bca <__sflush_r+0xae>
 8009b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b9e:	4299      	cmp	r1, r3
 8009ba0:	d002      	beq.n	8009ba8 <__sflush_r+0x8c>
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f7ff fb38 	bl	8009218 <_free_r>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bac:	e00d      	b.n	8009bca <__sflush_r+0xae>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b0      	blx	r6
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	1c50      	adds	r0, r2, #1
 8009bb8:	d1c9      	bne.n	8009b4e <__sflush_r+0x32>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0c6      	beq.n	8009b4e <__sflush_r+0x32>
 8009bc0:	2b1d      	cmp	r3, #29
 8009bc2:	d001      	beq.n	8009bc8 <__sflush_r+0xac>
 8009bc4:	2b16      	cmp	r3, #22
 8009bc6:	d11e      	bne.n	8009c06 <__sflush_r+0xea>
 8009bc8:	602f      	str	r7, [r5, #0]
 8009bca:	2000      	movs	r0, #0
 8009bcc:	e022      	b.n	8009c14 <__sflush_r+0xf8>
 8009bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd2:	b21b      	sxth	r3, r3
 8009bd4:	e01b      	b.n	8009c0e <__sflush_r+0xf2>
 8009bd6:	690f      	ldr	r7, [r1, #16]
 8009bd8:	2f00      	cmp	r7, #0
 8009bda:	d0f6      	beq.n	8009bca <__sflush_r+0xae>
 8009bdc:	0793      	lsls	r3, r2, #30
 8009bde:	680e      	ldr	r6, [r1, #0]
 8009be0:	bf08      	it	eq
 8009be2:	694b      	ldreq	r3, [r1, #20]
 8009be4:	600f      	str	r7, [r1, #0]
 8009be6:	bf18      	it	ne
 8009be8:	2300      	movne	r3, #0
 8009bea:	eba6 0807 	sub.w	r8, r6, r7
 8009bee:	608b      	str	r3, [r1, #8]
 8009bf0:	f1b8 0f00 	cmp.w	r8, #0
 8009bf4:	dde9      	ble.n	8009bca <__sflush_r+0xae>
 8009bf6:	6a21      	ldr	r1, [r4, #32]
 8009bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bfa:	4643      	mov	r3, r8
 8009bfc:	463a      	mov	r2, r7
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b0      	blx	r6
 8009c02:	2800      	cmp	r0, #0
 8009c04:	dc08      	bgt.n	8009c18 <__sflush_r+0xfc>
 8009c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c18:	4407      	add	r7, r0
 8009c1a:	eba8 0800 	sub.w	r8, r8, r0
 8009c1e:	e7e7      	b.n	8009bf0 <__sflush_r+0xd4>
 8009c20:	dfbffffe 	.word	0xdfbffffe

08009c24 <_fflush_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	690b      	ldr	r3, [r1, #16]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b913      	cbnz	r3, 8009c34 <_fflush_r+0x10>
 8009c2e:	2500      	movs	r5, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	b118      	cbz	r0, 8009c3e <_fflush_r+0x1a>
 8009c36:	6a03      	ldr	r3, [r0, #32]
 8009c38:	b90b      	cbnz	r3, 8009c3e <_fflush_r+0x1a>
 8009c3a:	f7fe fba5 	bl	8008388 <__sinit>
 8009c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0f3      	beq.n	8009c2e <_fflush_r+0xa>
 8009c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c48:	07d0      	lsls	r0, r2, #31
 8009c4a:	d404      	bmi.n	8009c56 <_fflush_r+0x32>
 8009c4c:	0599      	lsls	r1, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <_fflush_r+0x32>
 8009c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c52:	f7fe fc90 	bl	8008576 <__retarget_lock_acquire_recursive>
 8009c56:	4628      	mov	r0, r5
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f7ff ff5f 	bl	8009b1c <__sflush_r>
 8009c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c60:	07da      	lsls	r2, r3, #31
 8009c62:	4605      	mov	r5, r0
 8009c64:	d4e4      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	059b      	lsls	r3, r3, #22
 8009c6a:	d4e1      	bmi.n	8009c30 <_fflush_r+0xc>
 8009c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c6e:	f7fe fc83 	bl	8008578 <__retarget_lock_release_recursive>
 8009c72:	e7dd      	b.n	8009c30 <_fflush_r+0xc>

08009c74 <_sbrk_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d06      	ldr	r5, [pc, #24]	@ (8009c90 <_sbrk_r+0x1c>)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	602b      	str	r3, [r5, #0]
 8009c80:	f7f7 fdee 	bl	8001860 <_sbrk>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_sbrk_r+0x1a>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_sbrk_r+0x1a>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	200004f4 	.word	0x200004f4

08009c94 <memcpy>:
 8009c94:	440a      	add	r2, r1
 8009c96:	4291      	cmp	r1, r2
 8009c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c9c:	d100      	bne.n	8009ca0 <memcpy+0xc>
 8009c9e:	4770      	bx	lr
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009caa:	4291      	cmp	r1, r2
 8009cac:	d1f9      	bne.n	8009ca2 <memcpy+0xe>
 8009cae:	bd10      	pop	{r4, pc}

08009cb0 <__assert_func>:
 8009cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <__assert_func+0x2c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4605      	mov	r5, r0
 8009cbc:	68d8      	ldr	r0, [r3, #12]
 8009cbe:	b954      	cbnz	r4, 8009cd6 <__assert_func+0x26>
 8009cc0:	4b07      	ldr	r3, [pc, #28]	@ (8009ce0 <__assert_func+0x30>)
 8009cc2:	461c      	mov	r4, r3
 8009cc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	462b      	mov	r3, r5
 8009ccc:	4905      	ldr	r1, [pc, #20]	@ (8009ce4 <__assert_func+0x34>)
 8009cce:	f000 f841 	bl	8009d54 <fiprintf>
 8009cd2:	f000 f851 	bl	8009d78 <abort>
 8009cd6:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <__assert_func+0x38>)
 8009cd8:	e7f4      	b.n	8009cc4 <__assert_func+0x14>
 8009cda:	bf00      	nop
 8009cdc:	20000018 	.word	0x20000018
 8009ce0:	0800a58d 	.word	0x0800a58d
 8009ce4:	0800a55f 	.word	0x0800a55f
 8009ce8:	0800a552 	.word	0x0800a552

08009cec <_calloc_r>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	fba1 5402 	umull	r5, r4, r1, r2
 8009cf2:	b93c      	cbnz	r4, 8009d04 <_calloc_r+0x18>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	f7ff fb03 	bl	8009300 <_malloc_r>
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	b928      	cbnz	r0, 8009d0a <_calloc_r+0x1e>
 8009cfe:	2600      	movs	r6, #0
 8009d00:	4630      	mov	r0, r6
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	220c      	movs	r2, #12
 8009d06:	6002      	str	r2, [r0, #0]
 8009d08:	e7f9      	b.n	8009cfe <_calloc_r+0x12>
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7fe fbb4 	bl	800847a <memset>
 8009d12:	e7f5      	b.n	8009d00 <_calloc_r+0x14>

08009d14 <__ascii_mbtowc>:
 8009d14:	b082      	sub	sp, #8
 8009d16:	b901      	cbnz	r1, 8009d1a <__ascii_mbtowc+0x6>
 8009d18:	a901      	add	r1, sp, #4
 8009d1a:	b142      	cbz	r2, 8009d2e <__ascii_mbtowc+0x1a>
 8009d1c:	b14b      	cbz	r3, 8009d32 <__ascii_mbtowc+0x1e>
 8009d1e:	7813      	ldrb	r3, [r2, #0]
 8009d20:	600b      	str	r3, [r1, #0]
 8009d22:	7812      	ldrb	r2, [r2, #0]
 8009d24:	1e10      	subs	r0, r2, #0
 8009d26:	bf18      	it	ne
 8009d28:	2001      	movne	r0, #1
 8009d2a:	b002      	add	sp, #8
 8009d2c:	4770      	bx	lr
 8009d2e:	4610      	mov	r0, r2
 8009d30:	e7fb      	b.n	8009d2a <__ascii_mbtowc+0x16>
 8009d32:	f06f 0001 	mvn.w	r0, #1
 8009d36:	e7f8      	b.n	8009d2a <__ascii_mbtowc+0x16>

08009d38 <__ascii_wctomb>:
 8009d38:	4603      	mov	r3, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	b141      	cbz	r1, 8009d50 <__ascii_wctomb+0x18>
 8009d3e:	2aff      	cmp	r2, #255	@ 0xff
 8009d40:	d904      	bls.n	8009d4c <__ascii_wctomb+0x14>
 8009d42:	228a      	movs	r2, #138	@ 0x8a
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4a:	4770      	bx	lr
 8009d4c:	700a      	strb	r2, [r1, #0]
 8009d4e:	2001      	movs	r0, #1
 8009d50:	4770      	bx	lr
	...

08009d54 <fiprintf>:
 8009d54:	b40e      	push	{r1, r2, r3}
 8009d56:	b503      	push	{r0, r1, lr}
 8009d58:	4601      	mov	r1, r0
 8009d5a:	ab03      	add	r3, sp, #12
 8009d5c:	4805      	ldr	r0, [pc, #20]	@ (8009d74 <fiprintf+0x20>)
 8009d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	f000 f837 	bl	8009dd8 <_vfiprintf_r>
 8009d6a:	b002      	add	sp, #8
 8009d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d70:	b003      	add	sp, #12
 8009d72:	4770      	bx	lr
 8009d74:	20000018 	.word	0x20000018

08009d78 <abort>:
 8009d78:	b508      	push	{r3, lr}
 8009d7a:	2006      	movs	r0, #6
 8009d7c:	f000 fa00 	bl	800a180 <raise>
 8009d80:	2001      	movs	r0, #1
 8009d82:	f7f7 fcf5 	bl	8001770 <_exit>

08009d86 <__sfputc_r>:
 8009d86:	6893      	ldr	r3, [r2, #8]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	b410      	push	{r4}
 8009d8e:	6093      	str	r3, [r2, #8]
 8009d90:	da08      	bge.n	8009da4 <__sfputc_r+0x1e>
 8009d92:	6994      	ldr	r4, [r2, #24]
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	db01      	blt.n	8009d9c <__sfputc_r+0x16>
 8009d98:	290a      	cmp	r1, #10
 8009d9a:	d103      	bne.n	8009da4 <__sfputc_r+0x1e>
 8009d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da0:	f000 b932 	b.w	800a008 <__swbuf_r>
 8009da4:	6813      	ldr	r3, [r2, #0]
 8009da6:	1c58      	adds	r0, r3, #1
 8009da8:	6010      	str	r0, [r2, #0]
 8009daa:	7019      	strb	r1, [r3, #0]
 8009dac:	4608      	mov	r0, r1
 8009dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <__sfputs_r>:
 8009db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db6:	4606      	mov	r6, r0
 8009db8:	460f      	mov	r7, r1
 8009dba:	4614      	mov	r4, r2
 8009dbc:	18d5      	adds	r5, r2, r3
 8009dbe:	42ac      	cmp	r4, r5
 8009dc0:	d101      	bne.n	8009dc6 <__sfputs_r+0x12>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e007      	b.n	8009dd6 <__sfputs_r+0x22>
 8009dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff ffda 	bl	8009d86 <__sfputc_r>
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	d1f3      	bne.n	8009dbe <__sfputs_r+0xa>
 8009dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dd8 <_vfiprintf_r>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	460d      	mov	r5, r1
 8009dde:	b09d      	sub	sp, #116	@ 0x74
 8009de0:	4614      	mov	r4, r2
 8009de2:	4698      	mov	r8, r3
 8009de4:	4606      	mov	r6, r0
 8009de6:	b118      	cbz	r0, 8009df0 <_vfiprintf_r+0x18>
 8009de8:	6a03      	ldr	r3, [r0, #32]
 8009dea:	b90b      	cbnz	r3, 8009df0 <_vfiprintf_r+0x18>
 8009dec:	f7fe facc 	bl	8008388 <__sinit>
 8009df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009df2:	07d9      	lsls	r1, r3, #31
 8009df4:	d405      	bmi.n	8009e02 <_vfiprintf_r+0x2a>
 8009df6:	89ab      	ldrh	r3, [r5, #12]
 8009df8:	059a      	lsls	r2, r3, #22
 8009dfa:	d402      	bmi.n	8009e02 <_vfiprintf_r+0x2a>
 8009dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dfe:	f7fe fbba 	bl	8008576 <__retarget_lock_acquire_recursive>
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	071b      	lsls	r3, r3, #28
 8009e06:	d501      	bpl.n	8009e0c <_vfiprintf_r+0x34>
 8009e08:	692b      	ldr	r3, [r5, #16]
 8009e0a:	b99b      	cbnz	r3, 8009e34 <_vfiprintf_r+0x5c>
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f000 f938 	bl	800a084 <__swsetup_r>
 8009e14:	b170      	cbz	r0, 8009e34 <_vfiprintf_r+0x5c>
 8009e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e18:	07dc      	lsls	r4, r3, #31
 8009e1a:	d504      	bpl.n	8009e26 <_vfiprintf_r+0x4e>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	b01d      	add	sp, #116	@ 0x74
 8009e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	0598      	lsls	r0, r3, #22
 8009e2a:	d4f7      	bmi.n	8009e1c <_vfiprintf_r+0x44>
 8009e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e2e:	f7fe fba3 	bl	8008578 <__retarget_lock_release_recursive>
 8009e32:	e7f3      	b.n	8009e1c <_vfiprintf_r+0x44>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e42:	2330      	movs	r3, #48	@ 0x30
 8009e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ff4 <_vfiprintf_r+0x21c>
 8009e48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e4c:	f04f 0901 	mov.w	r9, #1
 8009e50:	4623      	mov	r3, r4
 8009e52:	469a      	mov	sl, r3
 8009e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e58:	b10a      	cbz	r2, 8009e5e <_vfiprintf_r+0x86>
 8009e5a:	2a25      	cmp	r2, #37	@ 0x25
 8009e5c:	d1f9      	bne.n	8009e52 <_vfiprintf_r+0x7a>
 8009e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e62:	d00b      	beq.n	8009e7c <_vfiprintf_r+0xa4>
 8009e64:	465b      	mov	r3, fp
 8009e66:	4622      	mov	r2, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff ffa2 	bl	8009db4 <__sfputs_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	f000 80a7 	beq.w	8009fc4 <_vfiprintf_r+0x1ec>
 8009e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e78:	445a      	add	r2, fp
 8009e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 809f 	beq.w	8009fc4 <_vfiprintf_r+0x1ec>
 8009e86:	2300      	movs	r3, #0
 8009e88:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e90:	f10a 0a01 	add.w	sl, sl, #1
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	9307      	str	r3, [sp, #28]
 8009e98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e9e:	4654      	mov	r4, sl
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	4853      	ldr	r0, [pc, #332]	@ (8009ff4 <_vfiprintf_r+0x21c>)
 8009ea8:	f7f6 f992 	bl	80001d0 <memchr>
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	b9d8      	cbnz	r0, 8009ee8 <_vfiprintf_r+0x110>
 8009eb0:	06d1      	lsls	r1, r2, #27
 8009eb2:	bf44      	itt	mi
 8009eb4:	2320      	movmi	r3, #32
 8009eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eba:	0713      	lsls	r3, r2, #28
 8009ebc:	bf44      	itt	mi
 8009ebe:	232b      	movmi	r3, #43	@ 0x2b
 8009ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eca:	d015      	beq.n	8009ef8 <_vfiprintf_r+0x120>
 8009ecc:	9a07      	ldr	r2, [sp, #28]
 8009ece:	4654      	mov	r4, sl
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	f04f 0c0a 	mov.w	ip, #10
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009edc:	3b30      	subs	r3, #48	@ 0x30
 8009ede:	2b09      	cmp	r3, #9
 8009ee0:	d94b      	bls.n	8009f7a <_vfiprintf_r+0x1a2>
 8009ee2:	b1b0      	cbz	r0, 8009f12 <_vfiprintf_r+0x13a>
 8009ee4:	9207      	str	r2, [sp, #28]
 8009ee6:	e014      	b.n	8009f12 <_vfiprintf_r+0x13a>
 8009ee8:	eba0 0308 	sub.w	r3, r0, r8
 8009eec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	46a2      	mov	sl, r4
 8009ef6:	e7d2      	b.n	8009e9e <_vfiprintf_r+0xc6>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	1d19      	adds	r1, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	9103      	str	r1, [sp, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfbb      	ittet	lt
 8009f04:	425b      	neglt	r3, r3
 8009f06:	f042 0202 	orrlt.w	r2, r2, #2
 8009f0a:	9307      	strge	r3, [sp, #28]
 8009f0c:	9307      	strlt	r3, [sp, #28]
 8009f0e:	bfb8      	it	lt
 8009f10:	9204      	strlt	r2, [sp, #16]
 8009f12:	7823      	ldrb	r3, [r4, #0]
 8009f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f16:	d10a      	bne.n	8009f2e <_vfiprintf_r+0x156>
 8009f18:	7863      	ldrb	r3, [r4, #1]
 8009f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f1c:	d132      	bne.n	8009f84 <_vfiprintf_r+0x1ac>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	9203      	str	r2, [sp, #12]
 8009f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f2a:	3402      	adds	r4, #2
 8009f2c:	9305      	str	r3, [sp, #20]
 8009f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a004 <_vfiprintf_r+0x22c>
 8009f32:	7821      	ldrb	r1, [r4, #0]
 8009f34:	2203      	movs	r2, #3
 8009f36:	4650      	mov	r0, sl
 8009f38:	f7f6 f94a 	bl	80001d0 <memchr>
 8009f3c:	b138      	cbz	r0, 8009f4e <_vfiprintf_r+0x176>
 8009f3e:	9b04      	ldr	r3, [sp, #16]
 8009f40:	eba0 000a 	sub.w	r0, r0, sl
 8009f44:	2240      	movs	r2, #64	@ 0x40
 8009f46:	4082      	lsls	r2, r0
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	3401      	adds	r4, #1
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f52:	4829      	ldr	r0, [pc, #164]	@ (8009ff8 <_vfiprintf_r+0x220>)
 8009f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f58:	2206      	movs	r2, #6
 8009f5a:	f7f6 f939 	bl	80001d0 <memchr>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d03f      	beq.n	8009fe2 <_vfiprintf_r+0x20a>
 8009f62:	4b26      	ldr	r3, [pc, #152]	@ (8009ffc <_vfiprintf_r+0x224>)
 8009f64:	bb1b      	cbnz	r3, 8009fae <_vfiprintf_r+0x1d6>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	3307      	adds	r3, #7
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	3308      	adds	r3, #8
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f74:	443b      	add	r3, r7
 8009f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f78:	e76a      	b.n	8009e50 <_vfiprintf_r+0x78>
 8009f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7e:	460c      	mov	r4, r1
 8009f80:	2001      	movs	r0, #1
 8009f82:	e7a8      	b.n	8009ed6 <_vfiprintf_r+0xfe>
 8009f84:	2300      	movs	r3, #0
 8009f86:	3401      	adds	r4, #1
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f04f 0c0a 	mov.w	ip, #10
 8009f90:	4620      	mov	r0, r4
 8009f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f96:	3a30      	subs	r2, #48	@ 0x30
 8009f98:	2a09      	cmp	r2, #9
 8009f9a:	d903      	bls.n	8009fa4 <_vfiprintf_r+0x1cc>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0c6      	beq.n	8009f2e <_vfiprintf_r+0x156>
 8009fa0:	9105      	str	r1, [sp, #20]
 8009fa2:	e7c4      	b.n	8009f2e <_vfiprintf_r+0x156>
 8009fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa8:	4604      	mov	r4, r0
 8009faa:	2301      	movs	r3, #1
 8009fac:	e7f0      	b.n	8009f90 <_vfiprintf_r+0x1b8>
 8009fae:	ab03      	add	r3, sp, #12
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4b12      	ldr	r3, [pc, #72]	@ (800a000 <_vfiprintf_r+0x228>)
 8009fb6:	a904      	add	r1, sp, #16
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7fd fda1 	bl	8007b00 <_printf_float>
 8009fbe:	4607      	mov	r7, r0
 8009fc0:	1c78      	adds	r0, r7, #1
 8009fc2:	d1d6      	bne.n	8009f72 <_vfiprintf_r+0x19a>
 8009fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fc6:	07d9      	lsls	r1, r3, #31
 8009fc8:	d405      	bmi.n	8009fd6 <_vfiprintf_r+0x1fe>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	059a      	lsls	r2, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_vfiprintf_r+0x1fe>
 8009fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fd2:	f7fe fad1 	bl	8008578 <__retarget_lock_release_recursive>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	065b      	lsls	r3, r3, #25
 8009fda:	f53f af1f 	bmi.w	8009e1c <_vfiprintf_r+0x44>
 8009fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fe0:	e71e      	b.n	8009e20 <_vfiprintf_r+0x48>
 8009fe2:	ab03      	add	r3, sp, #12
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	4b05      	ldr	r3, [pc, #20]	@ (800a000 <_vfiprintf_r+0x228>)
 8009fea:	a904      	add	r1, sp, #16
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7fe f81f 	bl	8008030 <_printf_i>
 8009ff2:	e7e4      	b.n	8009fbe <_vfiprintf_r+0x1e6>
 8009ff4:	0800a68f 	.word	0x0800a68f
 8009ff8:	0800a699 	.word	0x0800a699
 8009ffc:	08007b01 	.word	0x08007b01
 800a000:	08009db5 	.word	0x08009db5
 800a004:	0800a695 	.word	0x0800a695

0800a008 <__swbuf_r>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	460e      	mov	r6, r1
 800a00c:	4614      	mov	r4, r2
 800a00e:	4605      	mov	r5, r0
 800a010:	b118      	cbz	r0, 800a01a <__swbuf_r+0x12>
 800a012:	6a03      	ldr	r3, [r0, #32]
 800a014:	b90b      	cbnz	r3, 800a01a <__swbuf_r+0x12>
 800a016:	f7fe f9b7 	bl	8008388 <__sinit>
 800a01a:	69a3      	ldr	r3, [r4, #24]
 800a01c:	60a3      	str	r3, [r4, #8]
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	071a      	lsls	r2, r3, #28
 800a022:	d501      	bpl.n	800a028 <__swbuf_r+0x20>
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	b943      	cbnz	r3, 800a03a <__swbuf_r+0x32>
 800a028:	4621      	mov	r1, r4
 800a02a:	4628      	mov	r0, r5
 800a02c:	f000 f82a 	bl	800a084 <__swsetup_r>
 800a030:	b118      	cbz	r0, 800a03a <__swbuf_r+0x32>
 800a032:	f04f 37ff 	mov.w	r7, #4294967295
 800a036:	4638      	mov	r0, r7
 800a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	6922      	ldr	r2, [r4, #16]
 800a03e:	1a98      	subs	r0, r3, r2
 800a040:	6963      	ldr	r3, [r4, #20]
 800a042:	b2f6      	uxtb	r6, r6
 800a044:	4283      	cmp	r3, r0
 800a046:	4637      	mov	r7, r6
 800a048:	dc05      	bgt.n	800a056 <__swbuf_r+0x4e>
 800a04a:	4621      	mov	r1, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff fde9 	bl	8009c24 <_fflush_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	d1ed      	bne.n	800a032 <__swbuf_r+0x2a>
 800a056:	68a3      	ldr	r3, [r4, #8]
 800a058:	3b01      	subs	r3, #1
 800a05a:	60a3      	str	r3, [r4, #8]
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	6022      	str	r2, [r4, #0]
 800a062:	701e      	strb	r6, [r3, #0]
 800a064:	6962      	ldr	r2, [r4, #20]
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	429a      	cmp	r2, r3
 800a06a:	d004      	beq.n	800a076 <__swbuf_r+0x6e>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	07db      	lsls	r3, r3, #31
 800a070:	d5e1      	bpl.n	800a036 <__swbuf_r+0x2e>
 800a072:	2e0a      	cmp	r6, #10
 800a074:	d1df      	bne.n	800a036 <__swbuf_r+0x2e>
 800a076:	4621      	mov	r1, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	f7ff fdd3 	bl	8009c24 <_fflush_r>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d0d9      	beq.n	800a036 <__swbuf_r+0x2e>
 800a082:	e7d6      	b.n	800a032 <__swbuf_r+0x2a>

0800a084 <__swsetup_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4b29      	ldr	r3, [pc, #164]	@ (800a12c <__swsetup_r+0xa8>)
 800a088:	4605      	mov	r5, r0
 800a08a:	6818      	ldr	r0, [r3, #0]
 800a08c:	460c      	mov	r4, r1
 800a08e:	b118      	cbz	r0, 800a098 <__swsetup_r+0x14>
 800a090:	6a03      	ldr	r3, [r0, #32]
 800a092:	b90b      	cbnz	r3, 800a098 <__swsetup_r+0x14>
 800a094:	f7fe f978 	bl	8008388 <__sinit>
 800a098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09c:	0719      	lsls	r1, r3, #28
 800a09e:	d422      	bmi.n	800a0e6 <__swsetup_r+0x62>
 800a0a0:	06da      	lsls	r2, r3, #27
 800a0a2:	d407      	bmi.n	800a0b4 <__swsetup_r+0x30>
 800a0a4:	2209      	movs	r2, #9
 800a0a6:	602a      	str	r2, [r5, #0]
 800a0a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	e033      	b.n	800a11c <__swsetup_r+0x98>
 800a0b4:	0758      	lsls	r0, r3, #29
 800a0b6:	d512      	bpl.n	800a0de <__swsetup_r+0x5a>
 800a0b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ba:	b141      	cbz	r1, 800a0ce <__swsetup_r+0x4a>
 800a0bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0c0:	4299      	cmp	r1, r3
 800a0c2:	d002      	beq.n	800a0ca <__swsetup_r+0x46>
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f7ff f8a7 	bl	8009218 <_free_r>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f043 0308 	orr.w	r3, r3, #8
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	b94b      	cbnz	r3, 800a0fe <__swsetup_r+0x7a>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0f4:	d003      	beq.n	800a0fe <__swsetup_r+0x7a>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f000 f883 	bl	800a204 <__smakebuf_r>
 800a0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a102:	f013 0201 	ands.w	r2, r3, #1
 800a106:	d00a      	beq.n	800a11e <__swsetup_r+0x9a>
 800a108:	2200      	movs	r2, #0
 800a10a:	60a2      	str	r2, [r4, #8]
 800a10c:	6962      	ldr	r2, [r4, #20]
 800a10e:	4252      	negs	r2, r2
 800a110:	61a2      	str	r2, [r4, #24]
 800a112:	6922      	ldr	r2, [r4, #16]
 800a114:	b942      	cbnz	r2, 800a128 <__swsetup_r+0xa4>
 800a116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a11a:	d1c5      	bne.n	800a0a8 <__swsetup_r+0x24>
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	0799      	lsls	r1, r3, #30
 800a120:	bf58      	it	pl
 800a122:	6962      	ldrpl	r2, [r4, #20]
 800a124:	60a2      	str	r2, [r4, #8]
 800a126:	e7f4      	b.n	800a112 <__swsetup_r+0x8e>
 800a128:	2000      	movs	r0, #0
 800a12a:	e7f7      	b.n	800a11c <__swsetup_r+0x98>
 800a12c:	20000018 	.word	0x20000018

0800a130 <_raise_r>:
 800a130:	291f      	cmp	r1, #31
 800a132:	b538      	push	{r3, r4, r5, lr}
 800a134:	4605      	mov	r5, r0
 800a136:	460c      	mov	r4, r1
 800a138:	d904      	bls.n	800a144 <_raise_r+0x14>
 800a13a:	2316      	movs	r3, #22
 800a13c:	6003      	str	r3, [r0, #0]
 800a13e:	f04f 30ff 	mov.w	r0, #4294967295
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a146:	b112      	cbz	r2, 800a14e <_raise_r+0x1e>
 800a148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a14c:	b94b      	cbnz	r3, 800a162 <_raise_r+0x32>
 800a14e:	4628      	mov	r0, r5
 800a150:	f000 f830 	bl	800a1b4 <_getpid_r>
 800a154:	4622      	mov	r2, r4
 800a156:	4601      	mov	r1, r0
 800a158:	4628      	mov	r0, r5
 800a15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a15e:	f000 b817 	b.w	800a190 <_kill_r>
 800a162:	2b01      	cmp	r3, #1
 800a164:	d00a      	beq.n	800a17c <_raise_r+0x4c>
 800a166:	1c59      	adds	r1, r3, #1
 800a168:	d103      	bne.n	800a172 <_raise_r+0x42>
 800a16a:	2316      	movs	r3, #22
 800a16c:	6003      	str	r3, [r0, #0]
 800a16e:	2001      	movs	r0, #1
 800a170:	e7e7      	b.n	800a142 <_raise_r+0x12>
 800a172:	2100      	movs	r1, #0
 800a174:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a178:	4620      	mov	r0, r4
 800a17a:	4798      	blx	r3
 800a17c:	2000      	movs	r0, #0
 800a17e:	e7e0      	b.n	800a142 <_raise_r+0x12>

0800a180 <raise>:
 800a180:	4b02      	ldr	r3, [pc, #8]	@ (800a18c <raise+0xc>)
 800a182:	4601      	mov	r1, r0
 800a184:	6818      	ldr	r0, [r3, #0]
 800a186:	f7ff bfd3 	b.w	800a130 <_raise_r>
 800a18a:	bf00      	nop
 800a18c:	20000018 	.word	0x20000018

0800a190 <_kill_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d07      	ldr	r5, [pc, #28]	@ (800a1b0 <_kill_r+0x20>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	4611      	mov	r1, r2
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	f7f7 fad7 	bl	8001750 <_kill>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d102      	bne.n	800a1ac <_kill_r+0x1c>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b103      	cbz	r3, 800a1ac <_kill_r+0x1c>
 800a1aa:	6023      	str	r3, [r4, #0]
 800a1ac:	bd38      	pop	{r3, r4, r5, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200004f4 	.word	0x200004f4

0800a1b4 <_getpid_r>:
 800a1b4:	f7f7 bac4 	b.w	8001740 <_getpid>

0800a1b8 <__swhatbuf_r>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	b096      	sub	sp, #88	@ 0x58
 800a1c4:	4615      	mov	r5, r2
 800a1c6:	461e      	mov	r6, r3
 800a1c8:	da0d      	bge.n	800a1e6 <__swhatbuf_r+0x2e>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1d0:	f04f 0100 	mov.w	r1, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2340      	movne	r3, #64	@ 0x40
 800a1d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1dc:	2000      	movs	r0, #0
 800a1de:	6031      	str	r1, [r6, #0]
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	b016      	add	sp, #88	@ 0x58
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f000 f848 	bl	800a27c <_fstat_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	dbec      	blt.n	800a1ca <__swhatbuf_r+0x12>
 800a1f0:	9901      	ldr	r1, [sp, #4]
 800a1f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1fa:	4259      	negs	r1, r3
 800a1fc:	4159      	adcs	r1, r3
 800a1fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a202:	e7eb      	b.n	800a1dc <__swhatbuf_r+0x24>

0800a204 <__smakebuf_r>:
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a208:	079d      	lsls	r5, r3, #30
 800a20a:	4606      	mov	r6, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	d507      	bpl.n	800a220 <__smakebuf_r+0x1c>
 800a210:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	2301      	movs	r3, #1
 800a21a:	6163      	str	r3, [r4, #20]
 800a21c:	b003      	add	sp, #12
 800a21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a220:	ab01      	add	r3, sp, #4
 800a222:	466a      	mov	r2, sp
 800a224:	f7ff ffc8 	bl	800a1b8 <__swhatbuf_r>
 800a228:	9f00      	ldr	r7, [sp, #0]
 800a22a:	4605      	mov	r5, r0
 800a22c:	4639      	mov	r1, r7
 800a22e:	4630      	mov	r0, r6
 800a230:	f7ff f866 	bl	8009300 <_malloc_r>
 800a234:	b948      	cbnz	r0, 800a24a <__smakebuf_r+0x46>
 800a236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23a:	059a      	lsls	r2, r3, #22
 800a23c:	d4ee      	bmi.n	800a21c <__smakebuf_r+0x18>
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	f043 0302 	orr.w	r3, r3, #2
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	e7e2      	b.n	800a210 <__smakebuf_r+0xc>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	6020      	str	r0, [r4, #0]
 800a24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a25a:	b15b      	cbz	r3, 800a274 <__smakebuf_r+0x70>
 800a25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a260:	4630      	mov	r0, r6
 800a262:	f000 f81d 	bl	800a2a0 <_isatty_r>
 800a266:	b128      	cbz	r0, 800a274 <__smakebuf_r+0x70>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	431d      	orrs	r5, r3
 800a278:	81a5      	strh	r5, [r4, #12]
 800a27a:	e7cf      	b.n	800a21c <__smakebuf_r+0x18>

0800a27c <_fstat_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d07      	ldr	r5, [pc, #28]	@ (800a29c <_fstat_r+0x20>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	4611      	mov	r1, r2
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	f7f7 fac1 	bl	8001810 <_fstat>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	d102      	bne.n	800a298 <_fstat_r+0x1c>
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	b103      	cbz	r3, 800a298 <_fstat_r+0x1c>
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	200004f4 	.word	0x200004f4

0800a2a0 <_isatty_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d06      	ldr	r5, [pc, #24]	@ (800a2bc <_isatty_r+0x1c>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	f7f7 fac0 	bl	8001830 <_isatty>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_isatty_r+0x1a>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_isatty_r+0x1a>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	200004f4 	.word	0x200004f4

0800a2c0 <_init>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr

0800a2cc <_fini>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr
